@ariphaos_patch_ai_pop_limit = 3000
#############
# Robot buildings
#############

building_robot_assembly_plant = {
	base_buildtime = @b1_time
	base_cap_amount = 1

	category = pop_assembly

	potential = {
		exists = owner
		OR = {
			owner = { is_ai = no }
			NOT = { exists = assembling_species }
			assembling_species = { is_robotic = yes }
		}
		owner = {
			is_regular_empire = yes
			NOT = { has_policy_flag = robots_outlawed }
			OR = {
				is_ai = no
				NOT = { has_ascension_perk = ap_engineered_evolution }
				is_materialist = yes
			}
		}
		NOT = { has_modifier = slave_colony }
	}

	convert_to = {
		building_machine_assembly_plant
	}

	upgrades = {
		building_robot_assembly_complex
	}

	allow = {
		hidden_trigger = {
			OR = {
				owner = { is_ai = no }
				NAND = {
					free_district_slots = 0
					free_building_slots <= 1
					free_housing <= 0
					free_jobs <= 0
				}
			}
		}
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				OR = {
					is_regular_empire = no
					has_policy_flag = robots_outlawed
				}
			}
			has_modifier = slave_colony
			AND = {
				owner = { is_ai = yes }
				free_district_slots = 0
				free_building_slots = 0
				free_housing <= 0
				free_jobs <= 0
			}
			owner = {
				is_ai = yes
				has_ascension_perk = ap_engineered_evolution
				is_materialist = no
			}
			owner = {
				is_ai = yes
				num_pops > @ariphaos_patch_ai_pop_limit
			}
		}
	}

	planet_modifier = {
		job_roboticist_add = 1
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
		}
		upkeep = {
			energy = @b2_upkeep
		}
	}

	triggered_desc = {
		trigger = {
			OR = {
				NOT = { exists = owner }
				AND = {
					exists = owner
					owner = {
						NOT = { has_policy_flag = roboticist_output_build_cyborgs }
					}
				}
			}

		}
		text = job_roboticist_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				has_policy_flag = roboticist_output_build_cyborgs
			}
		}
		text = job_roboticist_cyborg_effect_desc
	}

	triggered_desc = {
		trigger = {
			OR = {
				has_building = building_clone_vats
				has_building = building_clone_army_clone_vat
				has_building = building_posthumous_employment_center
				AND = {
					exists = assembling_species
					assembling_species = { is_organic_species = yes }
					exists = owner
					owner = {
						NOT = { has_policy_flag = roboticist_output_build_cyborgs }
					}
				}
			}
		}
		text = tooltip_organic_and_artificial_assembly_warning
	}

	prerequisites = {
		"tech_robotic_workers"
	}
}

building_robot_assembly_complex = {
	icon = building_machine_assembly_complex
	base_buildtime = @b3_time
	can_build = no

	category = pop_assembly

	potential = {
		exists = owner
		OR = {
			owner = { is_ai = no }
			NOT = { exists = assembling_species }
			assembling_species = { is_robotic_species = yes }
		}
		owner = {
			is_regular_empire = yes
			NOT = { has_policy_flag = robots_outlawed }
			OR = {
				is_ai = no
				NOT = { has_ascension_perk = ap_engineered_evolution }
				is_materialist = yes
			}
		}
		NOT = { has_modifier = slave_colony }
	}

	allow = {
		is_occupied_flag = no
	}

	convert_to = {
		building_machine_assembly_complex
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				OR = {
					is_regular_empire = no
					has_policy_flag = robots_outlawed
				}
			}
			has_modifier = slave_colony
			AND = {
				owner = { is_ai = yes }
				free_district_slots = 0
				free_building_slots = 0
				free_housing <= 0
				free_jobs <= 0
			}
			owner = {
				is_ai = yes
				has_ascension_perk = ap_engineered_evolution
				is_materialist = no
			}
			owner = {
				is_ai = yes
				num_pops > @ariphaos_patch_ai_pop_limit
			}
		}
	}

	planet_modifier = {
		job_roboticist_add = 2
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b3_minerals
			rare_crystals = @b3_rare_cost
		}
		upkeep = {
			energy = @b3_upkeep
			rare_crystals = @b3_rare_upkeep
		}
	}

	prerequisites = {
		tech_robot_assembly_complex
	}

	triggered_desc = {
		trigger = {
			OR = {
				NOT = { exists = owner }
				AND = {
					exists = owner
					owner = {
						NOT = { has_policy_flag = roboticist_output_build_cyborgs }
					}
				}
			}

		}
		text = job_roboticist_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				has_policy_flag = roboticist_output_build_cyborgs
			}
		}
		text = job_roboticist_cyborg_effect_desc
	}

	triggered_desc = {
		trigger = {
			OR = {
				has_building = building_clone_vats
				has_building = building_clone_army_clone_vat
				has_building = building_posthumous_employment_center
				AND = {
					exists = assembling_species
					assembling_species = { is_organic_species = yes }
					exists = owner
					owner = {
						NOT = { has_policy_flag = roboticist_output_build_cyborgs }
					}
				}
			}
		}
		text = tooltip_organic_and_artificial_assembly_warning
	}
}

#############
# Machine buildings
#############

building_machine_assembly_plant = {
	icon = building_robot_assembly_plant
	base_buildtime = @b1_time
	base_cap_amount = 1

	category = pop_assembly

	potential = {
		exists = owner
		owner = { is_machine_empire = yes }
		NOT = { has_modifier = crucible_colony }
	}

	convert_to = {
		building_robot_assembly_plant
	}

	allow = {
		hidden_trigger = {
			OR = {
				owner = { is_ai = no }
				NAND = {
					free_district_slots = 0
					free_building_slots <= 1
					free_housing <= 0
					free_jobs <= 0
				}
			}
		}
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = { is_robot_empire = no }
			AND = {
				owner = { is_ai = yes }
				free_district_slots = 0
				free_building_slots = 0
				free_housing <= 0
				free_jobs <= 0
			}
		}
	}

	planet_modifier = {
		job_replicator_add = 1
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}

	upgrades = {
		building_machine_assembly_complex
	}

	prerequisites = {

	}

	triggered_desc = {
		text = job_replicator_effect_desc
	}
}

building_machine_assembly_complex = {
	base_buildtime = @b3_time
	can_build = no

	category = pop_assembly

	potential = {
		exists = owner
		owner = { is_machine_empire = yes }
		NOT = { has_modifier = crucible_colony }
	}

	allow = {
		is_occupied_flag = no
	}

	convert_to = {
		building_robot_assembly_complex
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				is_robot_empire = no
			}
			AND = {
				owner = { is_ai = yes }
				free_district_slots = 0
				free_building_slots = 0
				free_housing <= 0
				free_jobs <= 0
			}
		}
	}

	planet_modifier = {
		job_replicator_add = 3
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b3_minerals
			rare_crystals = @b3_rare_cost
		}
		upkeep = {
			energy = @b3_upkeep
			rare_crystals = @b3_rare_upkeep
		}
	}

	prerequisites = {
		tech_mega_assembly
	}

	triggered_desc = {
		text = job_replicator_effect_desc
	}
}

#############
# Hive buildings
#############

building_spawning_pool = {
	base_buildtime = @b1_time
	base_cap_amount = 1

	category = pop_assembly

	potential = {
		exists = owner
		owner = {
			is_hive_empire = yes
			NOT = { has_origin = origin_progenitor_hive }
		}
		or = {
			num_buildings = { type = any value < 15 }
			owner = { is_ai = no }
		}
	}

	allow = {
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		owner = {
			OR = {
				is_hive_empire = no
				has_origin = origin_progenitor_hive
			}
		}
	}

	planet_modifier = {
		job_spawning_drone_add = 1
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { has_active_tradition = tr_cybernetics_modular_cybernetics_hive }
		}
		modifier = {
			job_cyber_drone_add = 2
		}
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = 2
		}
	}

	convert_to = {
		building_offspring_nest
	}
	triggered_desc = {
		trigger = {
			NAND = {
				exists = owner
				owner = { has_origin = origin_necrophage }
				exists = growing_species
				growing_species = {
					NOT = { has_trait = trait_hive_mind }
				}
			}
		}
		text = job_spawning_drone_effect_desc
	}
	triggered_desc = {
		trigger = {
			exists = owner
			owner = { has_origin = origin_necrophage }
			exists = growing_species
			growing_species = {
				NOT = { has_trait = trait_hive_mind }
			}
		}
		text = job_spawning_drone_necrophage_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				has_active_tradition = tr_cybernetics_modular_cybernetics_hive
			}
		}
		text = job_cyber_drone_effect_desc
	}

	triggered_desc = {
		text = spawning_pool_tooltip
	}
}

building_offspring_nest = {
	base_buildtime = @b1_time
	base_cap_amount = 1

	category = pop_assembly

	potential = {
		exists = owner
		owner = { has_origin = origin_progenitor_hive }
		or = {
			num_buildings = { type = any value < 15 }
			owner = { is_ai = no }
		}
	}

	allow = {
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		owner = { NOT = { has_origin = origin_progenitor_hive } }
	}

	#ruined_trigger = {
	#	has_planet_flag = offspring_defeated
	#}

	planet_modifier = {
		job_offspring_drone_add = 1
	}
	convert_to = {
		building_spawning_pool
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { has_active_tradition = tr_cybernetics_modular_cybernetics_hive }
		}
		modifier = {
			job_cyber_drone_add = 2
		}
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = 2
		}
	}
	triggered_desc = {
		trigger = {
			exists = owner
			owner = { has_origin = origin_progenitor_hive }
			exists = growing_species
			growing_species = {
				has_trait = trait_hive_mind
			}
		}
		text = job_offspring_drone_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = {
				has_active_tradition = tr_cybernetics_modular_cybernetics_hive
			}
		}
		text = job_cyber_drone_effect_desc
	}

	triggered_desc = {
		text = offspring_nest_tooltip
	}
}

#######################################
# Necrophage "consumption" buildings
#######################################

building_necrophage_elevation_chamber = {
	icon = building_chamber_of_elevation_1
	base_buildtime = @b1_time
	base_cap_amount = 1
	position_priority = 100
	skip_automation_upgrading = yes #colony automation will not try to upgrade this

	desc = {
		trigger = {
			OR = {
				NOT = { exists = owner }
				owner = { is_hive_empire = no }
			}
		}
		text = building_necrophage_elevation_chamber_desc
	}
	desc = {
		trigger = {
			exists = owner
			owner = { is_hive_empire = yes }
		}
		text = building_necrophage_elevation_chamber_desc_hive
	}

	category = pop_assembly

	potential = {
		exists = owner
		owner = {
			has_origin = origin_necrophage
			has_trait = trait_necrophage
			NOR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
	}

	allow = {
		custom_tooltip = {
			fail_text = NO_CULTURE_SHOCK
			NOT = { has_modifier = planet_culture_shock }
		}
		if = {
			limit = { owner = { is_hive_empire = no } }
			NOT = { is_planet_class = pc_hive }
		}
		NOT = { is_planet_class = pc_machine }
		hidden_trigger = {
			if = {
				limit = {
					owner = { is_ai = yes }
				}
				any_owned_species = {
					species_can_be_necrophaged = yes
				}
				num_pops > 5
			}
		}
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				OR = {
					NOT = { has_origin = origin_necrophage }
					NOT = { has_trait = trait_necrophage }
				}
			}
			AND = {
				owner = { is_ai = yes }
				NOT = {
					any_owned_species = {
						species_can_be_necrophaged = yes
					}
				}
			}
		}
	}

	planet_modifier = {
		job_necro_apprentice_add = 1
	}

	#you are not meant to run out of necrophaging pops on a planet with this building
	triggered_planet_modifier = {
		potential = {
			num_organic_pops_per_year >= 0.2
		}
		job_necro_apprentice_add = 1
	}
	triggered_planet_modifier = {
		potential = {
			num_organic_pops_per_year >= 0.3
		}
		job_necro_apprentice_add = 1
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}

	upgrades = {
		building_necrophage_house_of_apotheosis
	}

	prerequisites = {
	}

	triggered_desc = {
		text = job_necro_apprentice_effect_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = no
				is_hive_empire = no
			}
		}
	}
	triggered_desc = {
		text = job_necro_apprentice_effect_lithoid_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = yes
				is_hive_empire = no
			}
		}
	}
	triggered_desc = {
		text = job_necro_apprentice_effect_hive_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = no
				is_hive_empire = yes
			}
		}
	}
	triggered_desc = {
		text = job_necro_apprentice_effect_hive_lithoid_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = yes
				is_hive_empire = yes
			}
		}
	}

	triggered_desc = {
		text = necrophage_elevation_timer_tooltip
		trigger = {
			has_planet_flag = necrophage_elevation_timer
		}
	}

	triggered_desc = {
		text = building_necrophage_elevation_chamber_scaling_tooltip
	}

	is_essential = yes
}

building_necrophage_house_of_apotheosis = {
	icon = building_chamber_of_elevation_2
	base_buildtime = @b3_time
	can_build = no
	position_priority = 100

	category = pop_assembly

	desc = {
		trigger = {
			OR = {
				NOT = { exists = owner }
				owner = { is_hive_empire = no }
			}
		}
		text = building_necrophage_house_of_apotheosis_desc
	}
	desc = {
		trigger = {
			exists = owner
			owner = { is_hive_empire = yes }
		}
		text = building_necrophage_house_of_apotheosis_desc_hive
	}

	potential = {
		exists = owner
		owner = {
			has_origin = origin_necrophage
			has_trait = trait_necrophage
			NOR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_hive_devouring_swarm
			}
			is_ai = no #the AI will just kill all its necrophytes
		}
	}

	allow = {
		hidden_trigger = {
			if = {
				limit = {
					owner = { is_ai = yes }
				}
				any_owned_species = {
					species_can_be_necrophaged = yes
				}
			}
		}
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				OR = {
					NOT = { has_origin = origin_necrophage }
					NOT = { has_trait = trait_necrophage }
				}
			}
			AND = {
				owner = { is_ai = yes }
				NOT = {
					any_owned_species = {
						species_can_be_necrophaged = yes
					}
				}
			}
		}
	}

	planet_modifier = {
		job_necro_apprentice_add = 6
	}

	triggered_planet_modifier = {
		potential = {
			is_planet_class = pc_hive
			exists = owner
			owner = { is_hive_empire = yes }
		}
		job_necro_apprentice_add = 4
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
			exotic_gases = @b2_rare_cost
		}
		upkeep = {
			energy = @b2_upkeep
			exotic_gases = @b2_rare_upkeep
		}
	}

	prerequisites = {
		tech_glandular_acclimation
	}

	show_tech_unlock_if = {
		has_origin = origin_necrophage
		has_trait = trait_necrophage
	}

	triggered_desc = {
		text = job_necro_apprentice_effect_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = no
				is_hive_empire = no
			}
		}
	}
	triggered_desc = {
		text = job_necro_apprentice_effect_lithoid_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = yes
				is_hive_empire = no
			}
		}
	}
	triggered_desc = {
		text = job_necro_apprentice_effect_hive_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = no
				is_hive_empire = yes
			}
		}
	}
	triggered_desc = {
		text = job_necro_apprentice_effect_hive_lithoid_desc
		trigger = {
			exists = owner
			owner = {
				is_lithoid_empire = yes
				is_hive_empire = yes
			}
		}
	}
	triggered_desc = {
		text = necrophage_elevation_timer_tooltip
		trigger = {
			has_planet_flag = necrophage_elevation_timer
		}
	}
}

#############
# Clone vats
#############

building_clone_vats = {
	base_buildtime = @b1_time

	category = pop_assembly

	base_cap_amount = 1

	potential = {
		exists = owner
		owner = { has_tradition = tr_genetics_adopt }
		NOT = { has_modifier = resort_colony }
		OR = {
			owner = { is_ai = no }
			NOT = { exists = assembling_species }
			assembling_species = { is_organic_species = yes }
		}
		OR = {
			owner = { is_ai = no }
			NAND = {
				free_district_slots = 0
				free_building_slots <= 1
				free_housing <= 0
				free_jobs <= 0
			}
		}
	}

	allow = {
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			AND = {
				owner = { is_ai = yes }
				free_district_slots = 0
				free_building_slots = 0
				free_housing <= 0
				free_jobs <= 0
			}
			NOT = { owner = { has_tradition = tr_genetics_adopt } }
		}
	}

	planet_modifier = {
		planet_pop_assembly_organic_add = 3
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { has_tradition = tr_genetics_efficient_cloning }
		}
		modifier = {
			planet_pop_assembly_organic_add = 1.5
		}
	}

	resources = {
		category = planet_buildings

		# Base cost
		cost = {
			minerals = 500
		}
		# Org/Lith cost
		cost = {
			trigger = {
				exists = owner
				owner = { is_lithoid_empire = no }
			}
			food = 500
		}
		cost = {
			trigger = {
				exists = owner
				owner = { is_lithoid_empire = yes }
			}
			energy = 500
		}

		# Base upkeep
		upkeep = {
			energy = 2
		}
		# Org/Lith upkeep
		upkeep = {
			trigger = {
				exists = owner
				owner = { is_lithoid_empire = no }
			}
			food = 30
		}
		upkeep = {
			trigger = {
				exists = owner
				owner = { is_lithoid_empire = yes }
			}
			minerals = 30
		}
	}

	triggered_desc = {
		trigger = {
			OR = {
				has_building = building_robot_assembly_plant
				AND = {
					exists = assembling_species
					assembling_species = { is_robotic = yes }
				}
			}
		}
		text = tooltip_organic_and_artificial_assembly_warning
	}
}

building_clone_army_clone_vat = {
	icon = building_ancient_relics
	base_buildtime = 90
	position_priority = 100

	empire_limit = {
		base = 5
	}

	category = pop_assembly

	potential = {
		exists = owner
		owner = {
			has_origin = origin_clone_army
			NOT = {
				has_country_flag = clone_army_fertility_unlocked
			}
		}
		if = {
			limit = {
				owner = { is_ai = yes }
			}
			NOR = {
				has_building = building_clone_army_clone_vat
				AND = {
					exists = assembling_species
					assembling_species = { is_robotic = yes }
				}
			}
		}
	}

	allow = {
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				OR = {
					NOT = { has_origin = origin_clone_army }
					is_synthetic_empire = yes
					has_country_flag = clone_army_fertility_unlocked
				}
			}
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { is_ai = yes }
			can_assemble_clone_soldier_pop = yes
		}
		planet_pop_assembly_organic_add = 2
	}

	# Add growth from 0 to 25 depending on 'clone_pops_missing_per_vat'.
	triggered_planet_modifier = {
		potential = {
			can_assemble_clone_soldier_pop = yes
			check_variable = { which = clone_pops_missing_per_vat value > 0 }
		}
		modifier = { planet_pop_assembly_organic_add = 2 }
	}
	triggered_planet_modifier = {
		potential = {
			can_assemble_clone_soldier_pop = yes
			check_variable = { which = clone_pops_missing_per_vat value > 1 }
		}
		modifier = { planet_pop_assembly_organic_add = 3 }
	}
	triggered_planet_modifier = {
		potential = {
			can_assemble_clone_soldier_pop = yes
			check_variable = { which = clone_pops_missing_per_vat value > 4 }
		}
		modifier = { planet_pop_assembly_organic_add = 2 }
	}
	triggered_planet_modifier = {
		potential = {
			can_assemble_clone_soldier_pop = yes
			check_variable = { which = clone_pops_missing_per_vat value > 8 }
		}
		modifier = { planet_pop_assembly_organic_add = 3 }
	}
	triggered_planet_modifier = {
		potential = {
			can_assemble_clone_soldier_pop = yes
			years_passed > 10
			check_variable = { which = clone_pops_missing_per_vat value > 12 }
		}
		modifier = { planet_pop_assembly_organic_add = 5 }
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
		}
		upkeep = {
			energy = @b2_upkeep
		}
	}

	upgrades = {
	}

	prerequisites = {
	}

	triggered_desc = {
		text = building_clone_army_clone_vat_effect_desc
	}
	triggered_desc = {
		trigger = {
			OR = {
				has_building = building_robot_assembly_plant
				AND = {
					exists = assembling_species
					assembling_species = { is_robotic = yes }
				}
			}
		}
		text = tooltip_organic_and_artificial_assembly_warning
	}

	is_essential = yes
	ai_estimate_without_unemployment = yes
}

#############
# Permanent Employment Building
#############

building_posthumous_employment_center = {
	base_buildtime = @b1_time
	base_cap_amount = 1

	category = pop_assembly

	potential = {
		exists = owner
		OR = {
			owner = { is_ai = no }
			NOT = { exists = assembling_species }
			assembling_species = { is_organic_species = yes }
		}
		OR = {
			owner = { is_ai = no }
			NAND = {
				free_district_slots = 0
				free_building_slots <= 1
				free_housing <= 0
				free_jobs <= 0
			}
		}
		owner = {
			is_regular_empire = yes
			has_valid_civic = civic_permanent_employment
		}
	}

	allow = {
		has_upgraded_capital = yes
		is_occupied_flag = no
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				NOT = { has_valid_civic = civic_permanent_employment }
			}
			AND = {
				owner = { is_ai = yes }
				free_district_slots = 0
				free_building_slots = 0
				free_housing <= 0
				free_jobs <= 0
			}
		}
	}

	planet_modifier = {
		job_reassigner_add = 1
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}

	triggered_desc = {
		text = job_reassigner_effect_desc
	}
	triggered_desc = {
		trigger = {
			OR = {
				has_building = building_robot_assembly_plant
				AND = {
					exists = assembling_species
					assembling_species = { is_robotic = yes }
				}
			}
		}
		text = tooltip_organic_and_artificial_assembly_warning
	}
}

building_toxic_bath_hive = {
	base_buildtime = @b1_time
	base_cap_amount = 1
	category = amenity
	icon = building_toxic_bath_hive

	potential = {
		owner = {
			is_hive_empire = yes
			has_valid_civic = civic_hive_toxic_baths
			NAND = {
				is_ai = yes
				prev = { has_any_industry_district = no }
			}
		}
	}
	allow = {
		owner = {
			OR = {
				is_ai = no
				prev = { has_any_industry_district = yes }
			}
		}
		is_occupied_flag = no
	}
	destroy_trigger = {
		exists = owner
		owner = {
			OR = {
				is_hive_empire = no
				NOT = { has_valid_civic = civic_hive_toxic_baths }
				AND = {
					is_ai = yes
					prev = { has_any_industry_district = no }
				}
			}
		}
	}
	planet_modifier = {
		job_bath_attendant_hive_add = @b1_jobs
	}

	triggered_desc = {
		trigger = {
			exists = owner
		}
		text = job_toxic_baths_effect_hive_desc
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}
}

building_toxic_bath_machine = {
	base_buildtime = @b1_time
	base_cap_amount = 1
	category = amenity
	icon = building_toxic_bath_machine

	potential = {
		owner = {
			is_machine_empire = yes
			has_valid_civic = civic_machine_toxic_baths
		}
	}
	allow = {
		is_occupied_flag = no
	}
	destroy_trigger = {
		exists = owner
		OR = {
			owner = { is_machine_empire = no }
			owner = {
				NOT = { has_valid_civic = civic_machine_toxic_baths }
			}
		}
	}
	planet_modifier = {
		job_bath_attendant_machine_add = @b1_jobs
	}

	triggered_desc = {
		trigger = {
			exists = owner
		}
		text = job_toxic_baths_effect_machine_desc
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}
}

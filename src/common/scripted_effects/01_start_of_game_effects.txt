# This is called in initializers for all standard empires, before the empire actually exists
generate_empire_home_planet = {
}

generate_home_system_resources = {
	optimize_memory
	every_system_planet = {
		limit = {
			colonizable_planet = no
			NOT = { has_planet_flag = ignore_startup_effect }
		}
		prevent_anomaly = yes
		clear_deposits = yes
	}

	system_star = {
		set_planet_flag = starting_mining_target
		set_planet_flag = starting_deposit
		set_deposit = d_energy_5
	}

	random_system_planet = {
		limit = {
			NOT = { has_planet_flag = starting_deposit }
			NOT = { has_planet_flag = ignore_startup_effect }
			OR = {
				is_planet_class = pc_a_star
				is_planet_class = pc_b_star
				is_planet_class = pc_f_star
				is_planet_class = pc_g_star
				is_planet_class = pc_k_star
				is_planet_class = pc_m_star
				is_planet_class = pc_molten
				is_planet_class = pc_gas_giant
				is_planet_class = pc_t_star
			}
		}

		set_planet_flag = starting_mining_target
		set_planet_flag = starting_deposit
		set_deposit = d_energy_5
	}

	while = {
		count = 2
		random_system_planet = {
			limit = {
				NOT = { has_planet_flag = starting_deposit }
				NOT = { has_planet_flag = ignore_startup_effect }
				OR = {
					is_asteroid = yes
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_toxic
					is_planet_class = pc_frozen
				}
			}

			set_planet_flag = starting_mining_target
			set_planet_flag = starting_deposit
			set_deposit = d_minerals_5
		}
	}

	random_system_planet = {
		limit = {
			NOT = { has_planet_flag = starting_deposit }
			NOT = { has_planet_flag = ignore_startup_effect }
			OR = {
				is_planet_class = pc_a_star
				is_planet_class = pc_b_star
				is_planet_class = pc_f_star
				is_planet_class = pc_g_star
				is_planet_class = pc_k_star
				is_planet_class = pc_m_star
				is_planet_class = pc_molten
				is_planet_class = pc_gas_giant
				is_planet_class = pc_t_star
			}
		}

		set_planet_flag = starting_deposit
		random_list = {
			50 = { set_deposit = d_energy_2 }
			50 = { set_deposit = d_energy_3 }
		}
	}

	random_system_planet = {
		limit = {
			NOT = { has_planet_flag = starting_deposit }
			NOT = { has_planet_flag = ignore_startup_effect }
			OR = {
				is_asteroid = yes
				is_planet_class = pc_barren
				is_planet_class = pc_barren_cold
				is_planet_class = pc_toxic
				is_planet_class = pc_frozen
			}
		}

		set_planet_flag = starting_deposit
		random_list = {
			50 = { set_deposit = d_minerals_2 }
			50 = { set_deposit = d_minerals_3 }
		}
	}

	random_system_planet = {
		limit = {
			NOT = { has_planet_flag = starting_deposit }
			NOT = { has_planet_flag = ignore_startup_effect }
			OR = {
				is_planet_class = pc_gas_giant
				is_planet_class = pc_toxic
				is_planet_class = pc_frozen
				is_planet_class = pc_barren_cold
				is_planet_class = pc_barren
				is_star = yes
			}
		}

		set_planet_flag = starting_research_target
		set_planet_flag = starting_deposit

		if = {
			limit = {
				is_planet_class = pc_toxic
			}
			set_deposit = d_society_3
		}
		else_if = {
			limit = {
				OR = {
					is_planet_class = pc_barren
					is_star = yes
				}
			}
			set_deposit = d_physics_3
		}
		else = {
			set_deposit = d_engineering_3
		}
	}

	random_system_planet = {
		limit = {
			NOT = { has_planet_flag = starting_deposit }
			NOT = { has_planet_flag = ignore_startup_effect }
			OR = {
				is_planet_class = pc_gas_giant
				is_planet_class = pc_toxic
				is_planet_class = pc_frozen
				is_planet_class = pc_barren_cold
				is_planet_class = pc_barren
				is_star = yes
			}
		}

		set_planet_flag = starting_deposit

		if = {
			limit = {
				is_planet_class = pc_toxic
			}
			set_deposit = d_society_2
		}
		else_if = {
			limit = {
				OR = {
					is_planet_class = pc_barren
					is_star = yes
				}
			}
			set_deposit = d_physics_2
		}
		else = {
			set_deposit = d_engineering_2
		}
	}
}

add_random_natural_blocker_and_give_tech = {
	if = {
		limit = {
			is_dry = yes
		}
		random_list = {
			1 = {
				add_deposit = d_deep_sinkhole
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_deep_sinkhole
							}
						}
						give_technology = {
							tech = tech_deep_sinkhole
							message = no
						}
					}
				}

			}
			1 = {
				add_deposit = d_quicksand_basin
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_quicksand_basin
							}
						}
						give_technology = {
							tech = tech_quicksand_basin
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_active_volcano
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_volcano
							}
						}
						give_technology = {
							tech = tech_volcano
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_mountain_range
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_mountain_range
							}
						}
						give_technology = {
							tech = tech_mountain_range
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_dangerous_wildlife_blocker
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_dangerous_wildlife
							}
						}
						give_technology = {
							tech = tech_dangerous_wildlife
							message = no
						}
					}
				}
			}
		}
	}
	else_if = {
		limit = {
			is_wet = yes
		}
		random_list = {
			1 = {
				add_deposit = d_dense_jungle
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_dense_jungle
							}
						}
						give_technology = {
							tech = tech_dense_jungle
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_toxic_kelp
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_toxic_kelp
							}
						}
						give_technology = {
							tech = tech_toxic_kelp
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_active_volcano
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_volcano
							}
						}
						give_technology = {
							tech = tech_volcano
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_mountain_range
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_mountain_range
							}
						}
						give_technology = {
							tech = tech_mountain_range
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_dangerous_wildlife_blocker
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_dangerous_wildlife
							}
						}
						give_technology = {
							tech = tech_dangerous_wildlife
							message = no
						}
					}
				}
			}
		}
	}
	else_if = {
		limit = {
			is_cold = yes
		}
		random_list = {
			1 = {
				add_deposit = d_noxious_swamp
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_noxious_swamp
							}
						}
						give_technology = {
							tech = tech_noxious_swamp
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_massive_glacier
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_massive_glacier
							}
						}
						give_technology = {
							tech = tech_massive_glacier
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_active_volcano
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_volcano
							}
						}
						give_technology = {
							tech = tech_volcano
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_mountain_range
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_mountain_range
							}
						}
						give_technology = {
							tech = tech_mountain_range
							message = no
						}
					}
				}
			}
			1 = {
				add_deposit = d_dangerous_wildlife_blocker
				owner = {
					if = {
						limit = {
							NOT = {
								has_technology = tech_dangerous_wildlife
							}
						}
						give_technology = {
							tech = tech_dangerous_wildlife
							message = no
						}
					}
				}
			}
		}
	}
}

add_research_options_for_natural_blockers = {
	if = {
		limit = {
			has_deposit = d_mountain_range
		}
		owner = {
			add_research_option = tech_mountain_range
		}
	}
	if = {
		limit = {
			has_deposit = d_active_volcano
		}
		owner = {
			add_research_option = tech_volcano
		}
	}
	if = {
		limit = {
			has_deposit = d_dangerous_wildlife_blocker
		}
		owner = {
			add_research_option = tech_dangerous_wildlife
		}
	}
	if = {
		limit = {
			has_deposit = d_dense_jungle
		}
		owner = {
			add_research_option = tech_dense_jungle
		}
	}
	if = {
		limit = {
			has_deposit = d_toxic_kelp
		}
		owner = {
			add_research_option = tech_toxic_kelp
		}
	}
	if = {
		limit = {
			has_deposit = d_deep_sinkhole
		}
		owner = {
			add_research_option = tech_deep_sinkhole
		}
	}
	if = {
		limit = {
			has_deposit = d_quicksand_basin
		}
		owner = {
			add_research_option = tech_quicksand_basin
		}
	}
	if = {
		limit = {
			has_deposit = d_noxious_swamp
		}
		owner = {
			add_research_option = tech_noxious_swamp
		}
	}
	if = {
		limit = {
			has_deposit = d_massive_glacier
		}
		owner = {
			add_research_option = tech_massive_glacier
		}
	}
}

# This is called after game start
generate_start_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes

	# blockers
	if = {
		limit = {
			owner = {
				is_apocalyptic_empire = yes
			}
		}
		add_deposit = d_tomb_world_ruins
		if = {
			limit = {
				owner = {
					is_environmental_architects_empire = yes
				}
			}
			add_random_natural_blocker_and_give_tech = yes
		}
		else = {
			add_deposit = d_tomb_world_wasteland
		}
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_servitor
			}
		}

		add_deposit = d_unsupervised_settlement
		if = {
			limit = {
				owner = {
					is_environmental_architects_empire = yes
				}
			}
			add_random_natural_blocker_and_give_tech = yes
		}
		else = {
			add_deposit = d_strip_mine
		}
	}
	else_if = {
		limit = {
			owner = {
				is_environmental_architects_empire = yes
			}
		}

		while = {
			count = 2
			add_random_natural_blocker_and_give_tech = yes
		}
	}

	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_exterminators_ruins
		add_deposit = d_former_battlefield
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_assimilator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_assimilators_ruins
	}
	else_if = {
		limit = {
			owner = {
				is_machine_empire = yes
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_machine_empire_ruins
	}
	else_if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_machine
					has_origin = origin_synthetic_fertility
				}
			}
		}

		add_deposit = d_decrepit_dwellings
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}

		add_deposit = d_collapsed_burrows
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}

	if = {
		limit = {
			has_planet_flag = planet_unity
		}
		remove_deposit = d_failing_infrastructure
		add_deposit = d_forgotten_civilization
	}
	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_origin = origin_lithoid
					has_origin = origin_broken_shackles
				}
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_apocalyptic_empire = yes
			}
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent

		# 3 + 4 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 3 + 2 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		add_deposit = d_fungal_forest
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		create_life_seeded_planet = yes
	}

	if = {
		limit = {
			is_planet_class = pc_continental
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_prosperous_mesa
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_rugged_woods
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_rugged_woods

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tropical
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_green_hills
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_ocean
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_underwater_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_green_hills

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_teeming_reef
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_arctic
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_lichen_fields

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tundra
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_alpine
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_desert
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_nutritious_mudland
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_nutritious_mudland

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_marvelous_oasis
			}
		}
		set_planet_flag = tasty_desert
	}

	if = {
		limit = {
			is_planet_class = pc_arid
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_savannah
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_relic
			owner = {
				OR = {
					has_origin = origin_remnants
					has_origin = origin_slavers
				}
			}
		}

		set_planet_size = 22

		# 6 blockers
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains
			add_deposit = d_black_soil
		}
	}

	# Ocean Paradise Origin

	if = {
		limit = {
			owner = {
				OR  = {
					has_origin = origin_ocean_paradise
					has_origin = origin_ocean_machines
				}
			}
		}
		create_ocean_paradise_planet = yes
	}
}

# Special for Earth
generate_earth_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes
	add_deposit = d_mesopotamian_urban_corridor
	add_deposit = d_boswash_metropolitan_axis
	add_deposit = d_mauritanian_security_zone
	add_deposit = d_great_albertan_crater
	add_deposit = d_scandinavian_reclamation_sector
	add_deposit = d_saharan_irrigation_project
	add_deposit = d_pearl_river_agglomerate
	add_deposit = d_great_pacific_garbage_patch
	if = {
		limit = {
			owner = { is_machine_empire = yes }
		}
		add_deposit = d_rushing_waterfalls
	}

	if = {
		limit = {
			owner = {
				is_environmental_architects_empire = yes
			}
		}
		add_random_natural_blocker_and_give_tech = yes

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			add_deposit = d_unsupervised_settlement
		}
	}
	else = {
		add_deposit = d_failing_infrastructure_earth
		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			add_deposit = d_hot_springs
			add_deposit = d_strip_mine
			add_deposit = d_unsupervised_settlement
		}
		else = {
			add_deposit = d_decrepit_dwellings
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		set_planet_size = 30

		add_deposit = d_dust_caverns
		add_deposit = d_bubbling_swamp
		add_deposit = d_crystalline_caverns
	}

	if = {
		limit = {
			is_planet_class = pc_desert # Just in case players cause trouble
		}
		set_planet_flag = tasty_desert
	}
}

generate_start_buildings_and_districts = {
	optimize_memory
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_shattered_ring
					has_origin = origin_broken_shackles
				}
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			if = {
				limit = {
					owner = {
						OR = {
							last_created_species = { is_lithoid = yes }
							last_created_species = { has_trait = trait_machine_unit }
						}
					}
				}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_origin = origin_tree_of_life
					is_lithoid_empire = yes
				}
			}
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}

		if = {
			limit = { owner = { is_regular_empire = yes } }

			# total - 24 jobs

			# 3 jobs
			if = {
				limit = { NOT = { owner = { has_origin = origin_payback } } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			if = {
				limit = {
					owner = {
						has_origin = origin_payback
						has_valid_civic = civic_agrarian_idyll
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = {
					owner = { is_guided_sapience_empire = yes }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = {
					owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
			}
			else = {
				limit = {
					owner = {
						is_individual_machine = no
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}

			if = {
				limit = { owner = { is_megacorp = yes } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			# 4 - 6 jobs
			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								is_lithoid_empire = yes
								is_individual_machine = yes
							}
							has_country_flag = non_lithoid_subspecies
						}
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
				if = {
					limit = {
						owner = {
							NOR = {
								has_origin = origin_payback
								is_individual_machine = yes
							}
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
							is_individual_machine = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
				if = {
					limit = {
						NOT = { owner = { has_origin = origin_payback } }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_industrial
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_megacorp = no
						NOT = { has_origin = origin_payback }
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = { owner = { is_spiritualist = no } }
				add_building = building_bureaucratic_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						NOR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_temple
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_valid_civic = civic_reanimated_armies }
						}
					}
					add_building = building_research_lab_1
				}
				else = {
					add_building = building_dread_encampment

					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						while = {
							count = 2
							random_system_planet = {
								limit = {
									has_deposit_for = shipclass_research_station
									NOT = { has_deposit = d_engineering_6 }
								}
								clear_deposits = yes
								add_deposit = d_engineering_6
							}
						}
					}
				}
			}
			# 1 job
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}
			# 2 Jobs
			if = {
				limit = {
					owner = {
						NOT = {
							has_origin = origin_payback
						}
						has_valid_civic = civic_environmentalist
					}
				}
				add_building = building_ranger_lodge
				add_blocker = { type = d_big_nature_preserve_blocker }
			}
			# 4-5 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_agrarian_idyll }
					}
				}
				if = {
					limit = {
						owner = {
							is_spiritualist = no
							is_pleasure_seeker = yes
						}
					}
					add_building = building_holo_theatres
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_spiritualist = yes
							OR = {
								has_valid_civic = civic_death_cult
								has_valid_civic = civic_death_cult_corporate
							}
						}
					}
					add_building = building_sacrificial_temple_1
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_megacorp = no
							is_spiritualist = yes
						}
					}
					add_building = building_temple
					if = {
						limit = {
							owner = {
								is_anglers_empire = yes
								is_catalytic_empire = yes
							}
						}
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_industrial
						}
					}
				}
				else_if = {
					limit = {
						owner = {
							has_valid_civic = civic_augmentation_bazaars
						}
					}
					add_building = building_augmentation_bazaars
				}
				else = {
					add_building = building_commercial_zone
				}
			}
			if = {
				limit = {
					owner = { is_individual_machine = yes }
				}
				add_building = building_machine_assembly_plant
			}
		}

		if = {
			limit = { owner = { is_hive_empire = yes } }

			# 9 jobs
			while = {
				count = 3
				add_district_and_planet_size_if_needed_effect = {
					district = district_hive
				}
			}

			# 6-9 jobs
			if = {
				limit = {
					owner = {
						NOR = {
							is_lithoid_empire = yes
							is_individual_machine = yes
						}
					}
				}

				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
							is_individual_machine = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}

			if = {
				limit = {
					owner = { has_origin = origin_tree_of_life }
				}
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 3 jobs
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}

			# 5 jobs
			add_building = building_hive_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			if = {
				limit = { #Necrophages need fewer complex drones or the menial drone slots won't be filled
					owner = {
						OR = {
							AND = {
								has_origin = origin_necrophage
								has_valid_civic = civic_hive_devouring_swarm
							}
							NOT = { has_origin = origin_necrophage }
						}
					}
				}
				# 2 jobs
				add_building = building_hive_node
			}
			if = { #This building is very useless for Devouring Swarm Necrophages
				limit = {
					NOT = {
						owner = {
							has_origin = origin_necrophage
							has_valid_civic = civic_hive_devouring_swarm
						}
					}
				}
				# 1 job
				if = {
					limit = {
						owner = { has_origin = origin_progenitor_hive }
					}
					add_building = building_offspring_nest
				}
				else = {
					add_building = building_spawning_pool
				}
			}
			if = {
				limit = {
					owner = { is_guided_sapience_empire = yes }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}

		# Replace capital building for machine empires
		if = {
			limit = { owner = { is_machine_empire = yes } }

			# total - 27 jobs

			# 3 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}

			# 6 jobs
			add_building = building_machine_capital

			# 1 job
			add_building = building_machine_assembly_plant

			# 2 job
			if = {
				limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			#Tactical Cogitators
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_tactical_algorithms
					}
				}
				owner = {
					give_technology = {
						tech = tech_centralized_command
						message = no
					}
				}
				add_building = building_military_academy
			}

			####Genesis Architects
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_guided_sapience
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = { owner = { NOT = { has_origin = origin_machine } } }

				# 4 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}

				# 2 jobs
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}

				# 8 jobs
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}

				# 2 jobs
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}

				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					remove_district = district_generator

					if = {
						limit = {
							owner = {
								has_country_flag = lithoid_subspecies
							}
						}
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
				}

				#Servitors
				if = {
					limit = { owner = { has_civic = civic_machine_servitor } }

					if = {
						limit = { owner = { has_country_flag = lithoid_subspecies } }
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}

					add_district_and_planet_size_if_needed_effect = {
						district = district_nexus
					}
					add_building = building_organic_sanctuary
				}
			}
			# Resource Consolidation
			else = {
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator_uncapped
					}
				}

				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}

				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					add_deposit = d_organic_slurry
				}

				# Blocker that removes the extra machine world replicator jobs until removed
				add_deposit = d_resource_consolidation_1
			}
		}
		# Replace a mining district with a farming district for lithoid empires with an organic secondary species that use food for alloy production
		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_country_flag = non_lithoid_subspecies
					is_catalytic_empire = yes
				}
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# Replace two mining districts with farming district for non-machine empires that use food for alloy production
		if = {
			limit = {
				owner = {
					NOT = { has_country_flag = non_lithoid_subspecies }
					is_machine_empire = no
					is_catalytic_empire = yes
				}
			}
			while = {
				count = 2
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		# And machine empires swap a generator district for another farming district
		if = {
			limit = {
				owner = {
					OR = {
						is_machine_empire = yes
						is_individual_machine = yes
					}
					is_catalytic_empire = yes
				}
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
			remove_district = district_generator
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# Replace 1 generator district with 1 farming district for anglers civic on wet worlds
		if = {
			limit = {
				owner = { is_anglers_empire = yes }
				has_climate = wet
			}
			remove_district = district_generator
			add_district = district_farming
		}
		# Replace farming districts with uncapped ones for anglers civic on ocean worlds
		if = {
			limit = {
				owner = { is_anglers_empire = yes }
				is_planet_class = pc_ocean
			}
			while = {
				limit = { num_districts = { type = district_farming value > 0 } }
				remove_district = district_farming
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming_uncapped
				}
			}
		}
		# Replace mining districts with uncapped ones for subterranean origin
		if = {
			limit = {
				owner = { is_subterranean_empire = yes }
			}
			while = {
				limit = { num_districts = { type = district_mining value > 0 } }
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}
		}
		# Give Idyllic Bloom a Gaiaseeder to start with if they have room
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_idyllic_bloom
						has_valid_civic = civic_hive_idyllic_bloom
					}
					NOT = { has_origin = origin_life_seeded }
				}
				free_building_slots > 0
			}
			add_building = building_gaiaseeders_1
		}
		# Swaps Cybernetic Creed Buildings
		if = {
			limit = {
				owner = { has_origin = origin_cybernetic_creed }
			}
			# fix for Agrarian Idyll
			if = {
				limit = {
					owner = { has_civic = civic_agrarian_idyll }
				}
				add_district = district_farming
			}
			remove_building = building_research_lab_1
			remove_building = building_temple
			remove_building = building_temple
			remove_district = district_industrial
			remove_district = district_generator
			remove_district = district_farming
			add_building = building_amphitheater_of_the_mind
			add_building = building_forge_of_the_fellowship
			add_building = building_battlement_of_steel
			add_building = building_sanctuary_of_toil
			owner = {
				set_country_flag = suppress_vanilla_factions
				begin_event_chain = {
					event_chain = "cybernetic_creed_chain"
					target = this
				}
				country_event = {
					id = machine_age.2150
					days = 30
				}
				every_owned_leader = {
					limit = {
						is_ruler = yes
						NOT = { has_trait = leader_trait_ritualistic_implants_cyborg	}
					}
					add_trait = leader_trait_ritualistic_implants_cyborg
				}
			}
		}
		# Swaps Synthetic Fertility Buildings, Tech
		if = {
			limit = {
				owner = { has_origin = origin_synthetic_fertility }
			}
			set_planet_size = 20
			remove_building = building_research_lab_1
			add_building = building_identity_repository
			add_building = building_abandoned_gene_clinic
			while = {
				count = 2
				add_district = district_city
			}
			if = {
				limit = {
					exists = owner
					owner = {
						is_lithoid_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			while = {
				count = 2
				add_deposit = d_abandoned_cities
			}
			owner = {
				set_variable = {
					which = num_dead_identities
					value = 3
				}
				give_technology = {	tech = tech_administrative_ai message = no }
				give_technology = {	tech = tech_self_aware_logic message = no }
				give_technology = {	tech = tech_sapient_ai message = no }
			}
			while = {
				count = 4
				remove_deposit = d_hibernating_lithoids
			}
		}
	}

	if = {
		limit = {
			owner = { has_origin = origin_shattered_ring }
		}

		add_deposit = d_segment_rubble_1
		add_deposit = d_segment_rubble_2
		add_deposit = d_segment_rubble_3
		add_deposit = d_segment_rubble_4
		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_1

		if = {
			limit = {
				owner = {
					has_civic = civic_machine_servitor
				}
			}
			add_deposit = d_unsupervised_settlement
		}

		else_if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			add_deposit = d_collapsed_burrows
		}

		else = {
			add_deposit = d_decrepit_dwellings
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOT = {
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
					}
				}
			}

			if = {
				limit = {
					owner = {
						last_created_species = { is_lithoid = yes }
					}
				}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		#Add Genesis Guides Deposit
		if = {
			limit = {
				owner = { is_guided_sapience_empire = yes }
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming_uncapped
			}
		}
		#Tactical Cogitators
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_tactical_algorithms
				}
			}
			owner = {
				give_technology = {
					tech = tech_centralized_command
					message = no
				}
			}
			add_building = building_military_academy
		}

		if = {
			limit = {
				owner = { is_regular_empire = yes }
			}

			# total - 24 jobs

			# 3 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}

			if = {
				limit = {
					owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				if = {
					limit = {
						owner = { has_origin = origin_payback }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}

			if = {
				limit = { owner = { is_megacorp = yes } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			# 4 - 6 jobs
			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								is_lithoid_empire = yes
								is_individual_machine = yes
							}
							has_country_flag = non_lithoid_subspecies
						}
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
							is_individual_machine = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
			}

			# 4 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}

			# 2 jobs
			add_building = building_factory_1

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_srw_commercial
			}

			# 2 jobs
			if = {
				limit = { owner = { is_megacorp = no } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_srw_commercial
				}
			}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = { owner = { is_spiritualist = no } }
				add_building = building_bureaucratic_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						NOT = { has_valid_civic = civic_death_cult }
					}
				}
				add_building = building_temple
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_reanimated_armies
						}
					}
					add_building = building_dread_encampment

					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						random_system_planet = {
							limit = {
								has_deposit_for = shipclass_research_station
								has_deposit = d_engineering_5
							}
							# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
							add_deposit = d_engineering_10
						}
					}
				}
				else = {
					add_building = building_research_lab_1
				}
			}

			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}
			# 4-5 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_agrarian_idyll }
					}
				}
				if = {
					limit = {
						owner = {
							is_spiritualist = no
							is_pleasure_seeker = yes
						}
					}
					add_building = building_holo_theatres
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_spiritualist = yes
							OR = {
								has_valid_civic = civic_death_cult
								has_valid_civic = civic_death_cult_corporate
							}
						}
					}
					add_building = building_sacrificial_temple_1
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_megacorp = no
							is_spiritualist = yes
						}
					}
					add_building = building_temple
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = { #Aug Bazaar building
					limit = {
						owner = {
							has_valid_civic = civic_augmentation_bazaars
						}
					}
					add_building = building_augmentation_bazaars
				}
				else = {
					add_building = building_commercial_zone
				}
			}
			if = {
				limit = {
					owner = { is_individual_machine = yes }
				}
				add_building = building_machine_assembly_plant
			}
		}

		if = {
			limit = {
				owner = { is_hive_empire = yes }
			}

			# 9 jobs
			while = {
				count = 3
				add_district_and_planet_size_if_needed_effect = {
					district = district_hive
				}
			}

			# 6-9 jobs
			if = {
				limit = {
					owner = {
						is_lithoid_empire = no
						is_individual_machine = no
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 5 jobs
			add_building = building_hive_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 2 jobs
			add_building = building_hive_node

			# 1 job
			if = {
				limit = {
					owner = { has_origin = origin_progenitor_hive }
				}
				add_building = building_offspring_nest
			}
			else = {
				add_building = building_spawning_pool
			}

			# 1 job
			add_building = building_hive_warren
		}

		# Replace capital building for machine empires
		if = {
			limit = { owner = { is_machine_empire = yes } }

			# total - 27 jobs

			# 3 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 6 jobs
			add_building = building_machine_capital

			# 1 job
			add_building = building_machine_assembly_plant

			# 2 job
			if = {
				limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 8 jobs
			while = {
				count = 4
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}

			#Assimilators
			if = {
				limit = { owner = { has_civic = civic_machine_assimilator } }
				remove_district = district_generator_uncapped
				if = {
					limit = { owner = { has_country_flag = lithoid_subspecies } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}

			#Servitors
			if = {
				limit = { owner = { has_civic = civic_machine_servitor } }
				if = {
					limit = { owner = { has_country_flag = lithoid_subspecies } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
				add_building = building_organic_sanctuary
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}
		while = {
			count = 6
			add_district_and_planet_size_if_needed_effect = {
				district = district_crashed_slaver_ship
			}
		}
		add_building = building_low_tech_farm
		add_building = building_low_tech_scrap_refinery
		add_building = building_low_tech_admin_hub
		add_building = building_low_tech_power_plant
		add_building = building_low_tech_capital
		add_building = building_low_tech_research_lab
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_payback
			}
		}
		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		add_planet_devastation = 33
		add_modifier = {
			modifier = payback_debris_field
		}
		add_modifier = {
			modifier = payback_unified_purpose
			days = 7200
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		add_building = building_clinic
		add_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		add_building = building_energy_grid
	}

	if = {
		limit = {
			owner = {
				is_relentless_industrialist_empire = yes
			}
			free_building_slots > 0
		}
		add_building = building_coordinated_fulfillment_center_1
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_remnants
				has_ancrel = yes
			}
		}
		owner = {
			give_technology = {
				tech = tech_archaeostudies
				message = no
			}
		}
		remove_building = building_research_lab_1
		add_building = building_archaeostudies_faculty
	}

	# Additional resources based on empire type and possible subspecies
	owner = {
		give_starting_resources_effect = yes
	}
}

generate_start_pops = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = {
				last_created_species = { is_species_class = MACHINE }
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = {
			owner = { has_origin = origin_mechanists }
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	# (Non-Purging) Necrophage: add Buildings & Districts
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}

	# Necrophage + Devouring Swarm: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}

	# Clone Army: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}

	# MISC: spawn Pops
	if = {
		limit = {
			owner = { is_hive_empire = yes }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					has_cybernetic_creed_trait = no
					OR = {
						is_pop_category = ruler
						is_pop_category = specialist
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_cybernetic_creed_trait = no
				}
				clear_pop_category = yes
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		while = {
			count = 9
			create_pop = {
				species = owner
			}
		}
	}
}
generate_servitor_assmiliator_secondary_pops = {
	# Ensuring that this country flag has been set by this point
	if = {
		limit = {
			owner = {
				OR = {
					last_created_species = { is_lithoid = yes }
					last_created_species = { has_trait = trait_machine_unit }
				}
			}
		}
		owner = {
			set_country_flag = lithoid_subspecies
		}
	}
	else = {
		owner = {
			set_country_flag = non_lithoid_subspecies
		}
	}
	# Rogue Servitor & Driven Assimilator setting up pop special traits to make sure that their secondary species have all the cool traits. Spawning of the pops happens next.
	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_servitor
				}
				OR = {
					has_origin = origin_void_machines
					has_origin = origin_post_apocalyptic_machines
					has_origin = origin_subterranean_machines
				}
			}
		}
		owner = {
			switch = {
				trigger = has_origin
				origin_void_machines = {
					last_created_species = {
						modify_species = {
							species = this
							add_trait = trait_void_dweller_1
							add_traits_at_start_of_list = yes
							ideal_planet_class = pc_habitat
						}
					}
				}
				origin_post_apocalyptic_machines = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_survivor
							add_traits_at_start_of_list = yes
						}
					}
				}
				origin_subterranean_machines = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_cave_dweller
							add_traits_at_start_of_list = yes
						}
					}
				}
			}
		}
	}
	# Rogue Servitor: set citizenship, living standard & preference; spawn Pops
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		last_created_species = {
			if = {
				limit = {
					root = {
						OR = {
							is_planet_class = pc_shattered_ring_habitable
							is_planet_class = pc_gaia
						}
					}
				}
				modify_species = {
					species = this
					ideal_planet_class = home_planet
				}
			}
			set_citizenship_type = {
				country = root.owner
				type = citizenship_limited
			}
			set_living_standard = {
				country = root.owner
				type = living_standard_organic_trophy
			}
		}
		while = {
			count = 5
			create_pop = {
				species = last_created_species
				ethos = random
			}
			last_created_pop = {
				clear_ethos = yes
			}
		}
	}

	# Driven Assimilator: set citizenship, living standard & preference; spawn Pops
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_assimilator }
		}
		last_created_species = {
			if = {
				limit = {
					root = {
						OR = {
							is_planet_class = pc_shattered_ring_habitable
							is_planet_class = pc_gaia
						}
					}
				}
				modify_species = {
					species = this
					ideal_planet_class = home_planet
				}
			}
			set_citizenship_type = {
				country = root.owner
				type = citizenship_full_machine
			}
			set_living_standard = {
				country = root.owner
				type = living_standard_hive_mind
			}
		}
		while = {
			count = 10
			create_pop = {
				species = last_created_species
				ethos = random
			}
			last_created_pop = {
				clear_ethos = yes
			}
		}
	}
}

generate_home_planet_final_pass = {
	optimize_memory
	# Adjust life-seeded colonies
	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		owner = {
			# Nuke other colonies gained from advanced empire, etc
			every_owned_planet = {
				limit = { is_capital = no }
				remove_all_buildings = yes
				destroy_colony = yes
			}
			if = {
				limit = {
					NOR = {
						has_valid_civic = civic_permanent_employment
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
					}
				}
				change_dominant_species = { species = last_created_species change_all = yes }
			}
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_shattered_ring
					has_origin = origin_machine
				}
			}
		}
		owner = {
			capital_scope = {
				system_star = {
					set_deposit = d_energy_10
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_tree_of_life
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_tree_of_life_home
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_lithoid
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_lithoid_crater
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_lost_colony
				is_gestalt = no
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = colonial_spirit_mod }
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				has_origin = origin_lost_colony
				is_gestalt = yes
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = colonial_spirit_gestalt_mod }
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = free_at_last_broken_shackles days = 7200 }
				add_modifier = { modifier = culture_shock_broken_shackles days = 3600 }
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_progenitor_hive
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_progenitor
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_default
			}
		}
		owner = {
			if = {
				limit = {
					is_gestalt = no
				}
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod days = 7200 }
				}
			}
			else = {
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod_gestalt days = 7200 }
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_machine
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_machine_minerals
				solar_system = {
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
						}
						clear_deposits = yes
					}
					every_system_planet = {
						limit = {
							is_asteroid = yes
						}
						remove_planet = yes
					}
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
							is_asteroid = no
							NOT = { is_planet_class = pc_gas_giant }
						}
						change_pc = pc_broken
					}
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
							is_planet_class = pc_gas_giant
						}
						change_pc = pc_molten
						add_modifier = { modifier = chthonian_planet }
						every_moon = {
							limit = {
								colonizable_planet = no
							}
							remove_planet = yes
						}
						while = {
							limit = {
								planet_size >= 20
							}
							change_planet_size = -6
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				any_owned_pop = {
					has_trait = trait_exotic_metabolism
				}
			}
		}

		add_deposit = d_exotic_mountain
	}
}

### Origins

void_dweller_home_planet_setup = {
	optimize_memory
	set_planet_flag = habitat_level_2
	owner = {
		save_event_target_as = void_dweller_owner
	}
	solar_system = {
		random_system_planet = {
			limit = { has_planet_flag = habitat_1_planet }
			save_event_target_as = habitat_1_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_1_planet
			coords_from = event_target:habitat_1_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_2_planet }
			save_event_target_as = habitat_2_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_2_planet
			coords_from = event_target:habitat_2_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_3_planet }
			save_event_target_as = habitat_3_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_3_planet
			coords_from = event_target:habitat_3_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		if = {
			limit = {
				event_target:void_dweller_owner = {
					is_lithoid_empire = yes
				}
			}
			random_system_planet = {
				limit = {
					has_deposit = no
					is_colonizable = no
				}
				add_deposit = d_minerals_4
				set_planet_flag = mining_planet
			}
		}
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}
		# Change starting pre-scripted ideal into inhabitable worlds
		# First pre-sripted is a research system
		closest_system = {
			limit = { has_star_flag = neighbor_t1_first_colony }
			set_star_flag = ideal_habitat_t1
			max_steps = 3
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				change_pc = pc_frozen
				set_deposit = d_engineering_3
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						is_colonizable = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_physics_1 }
						5 = { set_deposit = d_society_1 }
						5 = { set_deposit = d_engineering_1 }
						1 = { set_deposit = d_physics_2 }
						1 = { set_deposit = d_society_2 }
						1 = { set_deposit = d_engineering_2 }
					}
				}
			}
		}
		# Second pre-sripted is a resource system
		closest_system = {
			limit = { has_star_flag = neighbor_t2_second_colony }
			set_star_flag = ideal_habitat_t2
			max_steps = 6
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				remove_planet_flag = prescripted_ideal
				change_pc = pc_molten
				set_deposit = d_alloys_3
				add_deposit = d_minerals_4
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_minerals_1 }
						5 = { set_deposit = d_energy_1 }
						1 = { set_deposit = d_minerals_2 }
						1 = { set_deposit = d_energy_2 }
					}
				}
			}
		}
	}
	event_target:habitat_1_planet = {
		set_planet_flag = habitat@PREV
	}
	owner = {
		give_starting_resources_effect = yes
		give_technology = {
			tech = tech_habitat_1
			message = no
		}
		add_research_option = tech_habitat_2

		if = {
			limit = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					is_catalytic_empire = yes
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
			root.solar_system.starbase = {
				remove_starbase_building = {
					slot = 1
				}
				set_starbase_building = {
					slot = 1
					building = hydroponics_bay
				}
			}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}

		}
		if = {
			limit = {
				has_valid_civic = civic_private_healthcare_corporate
			}
			give_technology = { message = no tech = tech_frontier_health }
			add_research_option = tech_subdermal_stimulation
		}
	}

	if = {
		limit = {
			owner = {
				NOR = {
					is_eager_explorer_empire = yes
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		while = {
			count = 28
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 18
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else = {
		generate_servitor_assmiliator_secondary_pops = yes
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		while = {
			count = 5
			create_pop = {
				species = owner_main_species
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	set_planet_entity = {
		entity = "habitat_phase_03_entity"
		graphical_culture = owner
	}
	set_planet_size = 6
	add_deposit = d_arcane_replicator
	while = {
		count = 2
		add_district = {
			district_type = district_hab_housing
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_industrial
		ignore_cap = yes
	}
	while = {
		count = 2
		add_district = {
			district_type = district_hab_mining
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_energy
		ignore_cap = yes
	}
	add_building = building_hab_major_capital
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = no
			}
		}
		add_district = {
			district_type = district_hab_science
			ignore_cap = yes
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					OR = {
						is_catalytic_empire = yes
						has_country_flag = non_lithoid_subspecies
					}
				}
			}
		}
		add_building = building_hydroponics_farm
	}
	#Tactical Cogitators
	if = {
		limit = {
			owner = {
				has_valid_civic = civic_machine_tactical_algorithms
			}
		}
		owner = {
			give_technology = {
				tech = tech_centralized_command
				message = no
			}
		}
		add_building = building_military_academy
	}
	if = {
		limit = {
			owner = {
				is_gestalt = no
			}
		}
		# Unity Building - Admin/Sacrificial Temple/Temple
		if = {
			limit = {
				owner = {
					is_spiritualist = no
				}
			}
			add_building = building_bureaucratic_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					NOR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_temple
		}

		# Amenity Building - Holo-Theatres/Clinc/Sacrificial Temple/Temple/Commercial Zone
		if = {
			limit = {
				owner = {
					is_spiritualist = no
					is_pleasure_seeker = yes
				}
			}
			add_building = building_holo_theatres
		}
		#Aug Bazaar
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_augmentation_bazaars
				}
				free_building_slots > 0
			}
			add_building = building_augmentation_bazaars
		}
		# Pharma State
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_private_healthcare_corporate
				}
			}
			add_building = building_clinic
		}
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		else_if = {
			limit = {
				owner = {
					is_megacorp = no
					is_spiritualist = yes
				}
			}
			add_building = building_temple
		}
		else = {
			add_building = building_commercial_zone
		}

		# Permanent Employment
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_permanent_employment
				}
				free_building_slots > 0
			}
			add_building = building_posthumous_employment_center
		}

		# Relentless Industrialists
		if = {
			limit = {
				owner = {
					is_relentless_industrialist_empire = yes
				}
				free_building_slots > 0
			}
			add_building = building_coordinated_fulfillment_center_1
		}
		if = {
			limit = {
				owner = { is_individual_machine = yes }
			}
		add_building = building_machine_assembly_plant
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		add_building = building_hive_node
		add_building = building_spawning_pool
	}
	else = {
		add_building = building_machine_assembly_plant
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
				}
			}
			add_building = building_organic_sanctuary
		}
		else = {
			add_building = building_uplink_node
		}
	}
}

add_district_and_planet_size_if_needed_effect = {
	optimize_memory
	if = {
		limit = {
			free_district_slots >= 1
		}
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	else_if = {
		limit = {
			free_district_slots = 0
			planet_size < 25
		}
		change_planet_size = 1
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	#else do nothing
}

add_district_if_possible_effect = {
	optimize_memory
	if = {
		limit = {
			free_district_slots >= 1
		}
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	#else do nothing
}

give_starting_resources_effect = {
	optimize_memory
	if = {
		limit = {
			is_catalytic_empire = yes
		}
		add_resource = { food = 100	}
	}
	if = {
		limit = {
			is_machine_empire = yes
		}
		if = {
			limit = {
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_guided_sapience
				}
			}
			if = {
				limit = { has_country_flag = lithoid_subspecies }
				add_resource = { minerals = 100	}
				add_resource = { energy = 100 }
			}
			else = {
				add_resource = { food = 100	}
				add_resource = { energy = 100 }
			}
		}
		else = {
			add_resource = { energy = 200 }
		}
	}
	else = {
		if = {
			limit = { is_lithoid_empire = no }
			if = {
				limit = {
					OR = {
						AND = {
							is_individual_machine = no
							has_country_flag = lithoid_subspecies
						}
						has_origin = origin_broken_shackles
						is_guided_sapience_empire = yes
					}
				}
				add_resource = { food = 100	}
				add_resource = { minerals = 100 }
			}
			if = {
				limit = {
					is_individual_machine = yes
					NOT = { has_country_flag = non_lithoid_subspecies }
				}
				add_resource = { minerals = 200 }
			}
			else = {
				add_resource = { food = 200 }
			}
		}
		else = {
			if = {
				limit = {
					OR = {
						AND = {
							is_individual_machine = yes
							has_country_flag = non_lithoid_subspecies
						}
						has_origin = origin_broken_shackles
						is_guided_sapience_empire = yes
					}
				}
				add_resource = { food = 100	}
				add_resource = { minerals = 100 }
			}
			else = {
				add_resource = { minerals = 200 }
			}
		}
	}
}

imperial_origin_start_effect = {
	# Main Backup
	if = { # Backup if the main system hasn't already been initialized
		limit = {
			NOT = { exists = event_target:origin_imperial_homeland_country }
		}
		# Find a random system, hopefully close to a player with the origin
		random_system = {
			limit = {
				has_owner = no
				has_special_star_flag_trigger = no
			}
			weights = {
				base = 1
				modifier = {
					factor = 100
					closest_system = {
						use_bypasses = no
						min_steps = 2
						max_steps = 4
						limit = {
							has_owner = yes
							owner = {
								has_origin = origin_imperial_vassal
							}
						}
					}
				}
			}
			# Start Spawning Systems
			set_spawn_system_batch = begin
			origin_spawn_system_effect = { INITIALIZER = overlord_system_init }
			# Main Empire
			event_target:origin_imperial_homeland.solar_system = {
				origin_spawn_system_effect = { INITIALIZER = overlord_system_2_init }
				origin_spawn_system_effect = { INITIALIZER = overlord_system_3_init }
			}
			# Vassals
			event_target:imperial_homeland_2.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_4_init } }
			if = {
				limit = {
					NOR = {
						has_global_flag = ariphaos_patch_galaxy_size_0
						has_global_flag = ariphaos_patch_galaxy_size_2
					}
				}
				event_target:imperial_homeland_2.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_5_init } }
			}
			if = {
				limit = {
					NOR = {
						has_global_flag = ariphaos_patch_galaxy_size_0
						has_global_flag = ariphaos_patch_galaxy_size_2
						has_global_flag = ariphaos_patch_galaxy_size_4
					}
				}
				event_target:imperial_homeland_3.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_6_init } }
			}
			if = {
				limit = {
					NOR = {
						has_global_flag = ariphaos_patch_galaxy_size_0
						has_global_flag = ariphaos_patch_galaxy_size_2
						has_global_flag = ariphaos_patch_galaxy_size_4
						has_global_flag = ariphaos_patch_galaxy_size_6
					}
				}
				event_target:imperial_homeland_3.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_7_init } }
			}
			set_spawn_system_batch = end

			# Set up hyperlanes if they are missing
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_4.solar_system
				SECOND_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
			}
			if = {
				limit = {
					exists = event_target:imperial_homeland_5
				}
				imperial_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_5.solar_system
					SECOND_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
				}
			}
			if = {
				limit = {
					exists = event_target:imperial_homeland_6
				}
				imperial_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_6.solar_system
					SECOND_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				}
			}
			if = {
				limit = {
					exists = event_target:imperial_homeland_7
				}
				imperial_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_7.solar_system
					SECOND_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				}
			}
		}
	}
	else_if = {
		limit = { # Backup if any of the other main empire systems are missing
			OR = {
				NOT = { any_system = { has_star_flag = overlord_system_2_flag } }
				NOT = { any_system = { has_star_flag = overlord_system_3_flag } }
			}
		}
		event_target:origin_imperial_homeland.solar_system = {
			origin_spawn_system_effect = { INITIALIZER = overlord_system_2_init }
			origin_spawn_system_effect = { INITIALIZER = overlord_system_3_init }
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
		}
	}

	# Vassal Backup
	if = { # Backup for vassal 1
		limit = {
			any_system = { has_star_flag = overlord_system_2_flag }
			NOT = { any_system = { has_star_flag = overlord_system_4_flag } }
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_2_flag
			INITIALIZER = overlord_system_4_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_4.solar_system
		}
	}
	if = { # Backup for vassal 2
		limit = {
			any_system = { has_star_flag = overlord_system_2_flag }
			NOR = {
				has_global_flag = ariphaos_patch_galaxy_size_0
				has_global_flag = ariphaos_patch_galaxy_size_2
				any_system = { has_star_flag = overlord_system_5_flag }
			}
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_2_flag
			INITIALIZER = overlord_system_5_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_5.solar_system
		}
	}
	if = { # Backup for vassal 3
		limit = {
			any_system = { has_star_flag = overlord_system_3_flag }
			NOR = {
				has_global_flag = ariphaos_patch_galaxy_size_0
				has_global_flag = ariphaos_patch_galaxy_size_2
				has_global_flag = ariphaos_patch_galaxy_size_4
				any_system = { has_star_flag = overlord_system_6_flag }
			}
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_3_flag
			INITIALIZER = overlord_system_6_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_6.solar_system
		}
	}
	if = { # Backup for vassal 4
		limit = {
			any_system = { has_star_flag = overlord_system_3_flag }
			NOR = {
				has_global_flag = ariphaos_patch_galaxy_size_0
				has_global_flag = ariphaos_patch_galaxy_size_2
				has_global_flag = ariphaos_patch_galaxy_size_4
				has_global_flag = ariphaos_patch_galaxy_size_6
				any_system = { has_star_flag = overlord_system_7_flag }
			}
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_3_flag
			INITIALIZER = overlord_system_7_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_7.solar_system
		}
	}

	# Modifier to reduce influence
	event_target:origin_imperial_homeland_country = {
		add_modifier = {
			modifier = imperial_vassal_ai_modifier
			days = -1
		}
	}

	# Rival Country
	if = {
		limit = {
			OR = {
				AND = {
					is_multiplayer = yes
					NOT = {
						count_country = {
							count >= 2
							limit = {
								is_ai = no
								has_origin = origin_imperial_vassal
							}
						}
					}
				}
				is_multiplayer = no
			}
		}
		random_country = {
			limit = {
				is_ai = yes
				has_origin = origin_imperial_vassal
			}
			set_country_flag = origin_imperial_vassal_rival_country
		}
	}

	# Startup event for vassals
	every_playable_country = {
		limit = { has_origin = origin_imperial_vassal }
		country_event = { id = origin.5700 }
		if = {
			limit = {
				is_ai = no
			}
			country_event = {
				id = origin.5703
				days = 1
			}
		}
		else = {
			country_event = { id = origin.5710 }
		}
	}
}

imperial_origin_start_hyperlane_effect = {
	if = {
		limit = {
			NOT = {
				$ORIGINAL_STAR_SYSTEM$ = {
					has_hyperlane_to = $SECOND_STAR_SYSTEM$
				}
			}
		}
		add_hyperlane = {
			from = $ORIGINAL_STAR_SYSTEM$
			to = $SECOND_STAR_SYSTEM$
		}
	}
}

origin_spawn_system_effect = {
	spawn_system = {
		min_distance = 10
		max_distance = 30
		max_jumps = 0
		hyperlane = yes
		initializer = $INITIALIZER$
	}
}

imperial_origin_vassal_backup_effect = {
	random_system = {
		limit = {
			has_star_flag = $SYSTEM_FLAG$
		}
		save_event_target_as = this_system

		origin_spawn_system_effect = { INITIALIZER = $INITIALIZER$ }
		imperial_origin_start_hyperlane_effect = {
			ORIGINAL_STAR_SYSTEM = $ORIGINAL_STAR_SYSTEM$
			SECOND_STAR_SYSTEM = event_target:this_system
		}
	}
}

toxic_knights_order_habitat_setup = {
	optimize_memory
	owner = {
		save_event_target_as = toxic_knights_owner
		add_research_option = tech_habitat_1

		if = {
			limit = {
				OR = {
					is_lithoid_empire = no
					is_catalytic_empire = yes
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}
		}
	}

	while = { #they get the habitat + destruction
		count = 7
		random_owned_pop = { kill_pop = yes }
	}
	remove_district = district_city
	remove_district = district_farming
	remove_district = district_generator
	remove_building = building_commercial_zone

	add_deposit = d_toxic_god_blight_upon_the_land
	add_deposit = d_toxic_god_deitys_swarms
	add_deposit = d_toxic_god_pools_most_venemous
	add_deposit = d_toxic_god_pestilential_wasteland
	add_deposit = d_toxic_god_envenomed_seas

	solar_system = {
		random_system_planet = {
			limit = { has_planet_flag = toxic_knights_habitat }
			set_owner = event_target:toxic_knights_owner
			while = {
				count = 4
				create_pop = {
					species = owner_main_species
				}
			}
			set_planet_size = 6
			set_planet_flag = habitat_level_1
			set_planet_flag = habitat
			set_colony_type = col_habitat_fortress
			set_planet_entity = {
				entity = "habitat_phase_03_entity"
				graphical_culture = owner
			}
			add_deposit = d_knights_calibrator
			add_district_and_planet_size_if_needed_effect = {
				district = district_orders_demesne
			}

			add_building = building_hab_major_capital
			add_building = building_order_keep
			event_target:toxic_knights_owner.capital_scope = {
				set_planet_flag = habitat@PREV
			}
		}
		every_system_planet = {
			limit = { has_deposit_for = shipclass_mining_station }
			create_mining_station = { owner = prevprev.owner }
		}
	}
}

create_life_seeded_planet = {
	set_planet_size = 30

	# 5 + 3 energy
	add_deposit = d_searing_desert
	add_deposit = d_underwater_vent
	add_deposit = d_tempestous_mountain

	# 5 + 3 mining
	add_deposit = d_ore_rich_caverns
	add_deposit = d_prosperous_mesa
	add_deposit = d_submerged_ore_veins

	# 5 + 3 farming (lithoids swap 3 for minerals)
	add_deposit = d_lush_jungle
	add_deposit = d_teeming_reef

	if = {
		limit = {
			exists = owner
			owner = {
				is_lithoid_empire = yes
			}
		}
		add_deposit = d_rich_mountain
	}
	else_if = {
		limit = {
			exists = owner
			owner = {
				is_lithoid_empire = no
			}
		}
		add_deposit = d_black_soil
	}
	# In case the owner doesn't exist, as when creating Life-Seeded pre-ftls.
	else = {
		random_list = {
			50 = { add_deposit = d_rich_mountain }
			50 = { add_deposit = d_black_soil }
		}
	}

	# 1 random medium deposit
	random_list = {
		33 = { add_deposit = d_frozen_gas_lake }
		33 = { add_deposit = d_prosperous_mesa }
		33 = { add_deposit = d_fertile_lands }
	}

	add_deposit = d_dust_caverns
	add_deposit = d_bubbling_swamp
	add_deposit = d_crystalline_caverns
}

create_ocean_paradise_planet = {
	if = {
		limit = {
			exists = owner
			owner = { is_gestalt = yes }
		}
		add_modifier = { modifier = ocean_paradise_hive }
	}
	else = {
		add_modifier = { modifier = ocean_paradise }
	}
	clear_deposits = yes
	clear_blockers = yes

	# Food
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef
	add_deposit = d_teeming_reef

	# Minerals
	add_deposit = d_submerged_ore_veins
	add_deposit = d_submerged_ore_veins
	add_deposit = d_submerged_ore_veins

	# Energy
	add_deposit = d_underwater_vent
	add_deposit = d_underwater_vent
	add_deposit = d_underwater_vent

	# Bonus
	add_deposit = d_crystal_reef
	random_list = {
		50 = { add_deposit = d_submerged_ore_veins }
		50 = { add_deposit = d_underwater_vent }
	}
	# Planetscapers
	if = {
		limit = {
			exists = owner
			owner = {
				is_environmental_architects_empire = yes
			}
		}
		add_random_natural_blocker_and_give_tech = yes
	}
}

fear_of_the_dark_binary_planets = {
	save_event_target_as = fotd_country
	random_planet_within_border = {
		limit = {
			has_planet_flag = delete_me_planet
		}
		remove_planet = yes
	}
	random_planet_within_border = {
		limit = {
			has_planet_flag = haven_flag
		}
		save_global_event_target_as = fotd_seperatist_planet@prev
		set_planet_flag = fotd_seperatist_planet@prev
		create_fear_of_the_dark_country = yes
		setup_fear_of_the_dark_pre_ftl = yes
		if = {
			limit = {
				has_planet_flag = planet_mars
			}
			set_mars_entity = yes
		}
	}
	random_planet_within_border = {
		limit = {
			has_planet_flag = divider_flag
		}
		add_deposit = d_alloys_5
	}
	random_planet_within_border = {
		limit = {
			has_planet_flag = divider_flag
		}
		create_mining_station = {
			owner = event_target:fotd_country
		}
	}
}

low_tech_start_add_research_options_effect = {
	add_research_option = tech_corvettes
	add_research_option = tech_basic_science_lab_1
	add_research_option = tech_planetary_government
}

fruitful_start_effect = {
	# Establish first contact with the Tyanki
	set_country_flag = tiyanki_encountered
	create_tiyanki_country = yes

	# Set up the event chain container for the special proects
	begin_event_chain = {
		event_chain = fruitful_partnership_chain
		target = this
	}

	# Set up event for getting the Tyanki technologies later
	country_event = { id = origin.7000 days = 1800 random = 1800 }

	random_owned_starbase = {
		set_starbase_building = {
			slot = 1
			building = feeder
		}
	}

	capital_scope.solar_system = {
		# Spawn critters to a nearby system
		random_neighbor_system = {
			set_star_flag = tiyanki_plantoid_system
			random_system_planet = {
				limit = { is_star = yes }
				event_target:tiyanki_country = {
					create_fleet = {
						name = "NAME_Tiyanki_Space_Whale"
						effect = {
							set_owner = event_target:tiyanki_country
							create_ship = {
								design = "NAME_Tiyanki_Cow"
							}
							create_ship = {
								design = "NAME_Tiyanki_Bull"
							}
							create_ship = {
								design = "NAME_Tiyanki_Calf"
							}
							create_ship = {
								design = "NAME_Tiyanki_Hatchling"
							}
							set_location = prevprev
							set_fleet_stance = passive
							set_aggro_range_measure_from = self
							set_aggro_range = 0
							set_fleet_flag = NAME_Tiyanki_Space_Whale
							queue_actions = {
								wait = { # Cooldown until they start moving
									duration = 320
									random = 80
								}
							}
						}
					}
				}
			}
		}

		# Imprint the space amoeba near your home so they will immediately go to your home system to eat,
		# instead of vanishing into a natural wormhole
		closest_system = {
			limit = {
				has_star_flag = tiyanki_plantoid_system
			}
			every_fleet_in_system = {
				limit = {
					owner = {
						is_country_type = tiyanki
					}
				}
				set_fleet_flag = fruitful_lured_critter
				auto_move_to_planet = {
					target = prev.star
					clear_auto_move_on_arrival = yes
				}
			}
		}
	}
}

lost_colony_generate_parent_effect = {
	if = { # hive parent
		limit = {
			event_target:lost_colony_child = {
				is_hive_empire = yes
			}
		}
		if = { # Parent hive has Progenitor hive if you own the Overlord DLC
			limit = {
				has_overlord_dlc = yes
			}
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_progenitor_hive"
				authority = auth_hive_mind
				civics = {
					civic = civic_hive_divided_attention
					civic = random
				}
			}
		}
		else = {
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_hive_mind
				civics = {
					civic = civic_hive_divided_attention
					civic = random
				}
			}
		}
	}
	else_if = { # machine parent
		limit = {
			event_target:lost_colony_child = {
				is_machine_empire = yes
			}
		}
		create_country = {
			species = event_target:lost_colony_child
			name_list = event_target:lost_colony_child
			type = default
			origin = "origin_default"
			authority = auth_machine_intelligence
			civics = {
				civic = civic_machine_delegated_functions
				civic = random
			}
		}
	}
	else = { # default parent
		create_country = {
			species = event_target:lost_colony_child
			name_list = event_target:lost_colony_child
			type = default
			origin = "origin_default"
			government_restrictions = {
				authority = {
					NOR = {
						value = auth_machine_intelligence
						value = auth_hive_mind
					}
				}
			}
		}
	}
	last_created_country = {
		save_event_target_as = lost_colony_parent
		add_resource = {
			minerals = 2400
			energy = 2400
			food = 2400
			alloys = 800
			consumer_goods = 1200
			influence = 600
		}
	}
}

lost_colony_generate_parent_human_effect = {
	if = { # hive parent
		limit = {
			event_target:human_lost_colony = {
				is_hive_empire = yes
			}
		}
		if = { # Parent hive has Progenitor hive if you own the Overlord DLC
			limit = {
				has_overlord_dlc = yes
			}
			random_list = {
				50 = {
					create_country = {
						species = event_target:human_species
						name_list = HUMAN1
						type = default
						origin = "origin_progenitor_hive"
						authority = auth_hive_mind
						civics = {
							civic = civic_hive_divided_attention
							civic = random
						}
					}
				}
				50 = {
					create_country = {
						species = event_target:human_species
						name_list = HUMAN2
						type = default
						origin = "origin_progenitor_hive"
						authority = auth_hive_mind
						civics = {
							civic = civic_hive_divided_attention
							civic = random
						}
					}
				}
			}
		}
		else = {
			random_list = {
				50 = {
					create_country = {
						species = event_target:human_species
						name_list = HUMAN1
						type = default
						origin = "origin_default"
						authority = auth_hive_mind
						civics = {
							civic = civic_hive_divided_attention
							civic = random
						}
					}
				}
				50 = {
					create_country = {
						species = event_target:human_species
						name_list = HUMAN2
						type = default
						origin = "origin_default"
						authority = auth_hive_mind
						civics = {
							civic = civic_hive_divided_attention
							civic = random
						}
					}
				}
			}
		}
	}
	else = { # default parent
		random_list = {
			50 = {
				create_country = {
					species = event_target:human_species
					name_list = HUMAN1
					type = default
					origin = "origin_default"
					government_restrictions = {
						authority = {
							NOR = {
								value = auth_machine_intelligence
								value = auth_hive_mind
							}
						}
					}
				}
			}
			50 = {
				create_country = {
					species = event_target:human_species
					name_list = HUMAN2
					type = default
					origin = "origin_default"
					government_restrictions = {
						authority = {
							NOR = {
								value = auth_machine_intelligence
								value = auth_hive_mind
							}
						}
					}
				}
			}
		}
	}
	last_created_country = {
		save_event_target_as = lost_colony_parent
		add_resource = {
			minerals = 2400
			energy = 2400
			food = 2400
			alloys = 800
			consumer_goods = 1200
			influence = 600
		}
	}
}

defined_text = { # Country/leader/pop/species scope
	name = GetEdibleName
	text = {
		trigger = {
			is_species_class = AVI
		}
		localization_key = edible_avi
	}
	text = {
		trigger = {
			is_species_class = MAM
		}
		localization_key = edible_mam
	}
	text = {
		trigger = {
			is_species_class = REP
		}
		localization_key = edible_rep
	}
	text = {
		trigger = {
			is_species_class = FUN
		}
		localization_key = edible_fun
	}
	text = {
		trigger = {
			is_species_class = MOL
		}
		localization_key = edible_mol
	}
	text = {
		trigger = {
			is_species_class = HUM
		}
		localization_key = edible_hum
	}
	text = {
		trigger = {
			is_species_class = ART
		}
		localization_key = edible_art
	}
	text = {
		trigger = {
			is_species_class = PLANT
		}
		localization_key = edible_plant
	}
	text = {
		localization_key = edible_fallback
	}
}

defined_text = { # Country/leader/pop/species scope
	name = GetEdibleNamePlural
	text = {
		trigger = {
			is_species_class = AVI
		}
		localization_key = edible_avi_plural
	}
	text = {
		trigger = {
			is_species_class = MAM
		}
		localization_key = edible_mam_plural
	}
	text = {
		trigger = {
			is_species_class = REP
		}
		localization_key = edible_rep_plural
	}
	text = {
		trigger = {
			is_species_class = FUN
		}
		localization_key = edible_fun_plural
	}
	text = {
		trigger = {
			is_species_class = MOL
		}
		localization_key = edible_mol_plural
	}
	text = {
		trigger = {
			is_species_class = HUM
		}
		localization_key = edible_hum_plural
	}
	text = {
		trigger = {
			is_species_class = ART
		}
		localization_key = edible_art_plural
	}
	text = {
		trigger = {
			is_species_class = PLANT
		}
		localization_key = edible_plants
	}
	text = {
		localization_key = edible_fallback_plural
	}
}

# Species Class Defined Loc


defined_text = { # Country/leader/pop/species scope
	name = GetSpeciesClass
	text = {
		trigger = {
			is_species_class = PRE_AVI
		}
		localization_key = avian_species
	}
	text = {
		trigger = {
			is_species_class = PRE_MAM
		}
		localization_key = mammalian_species
	}
	text = {
		trigger = {
			is_species_class = PRE_REP
		}
		localization_key = reptilian_species
	}
	text = {
		trigger = {
			is_species_class = PRE_FUN
		}
		localization_key = fungoid_species
	}
	text = {
		trigger = {
			is_species_class = PRE_MOL
		}
		localization_key = mollusc_species
	}
	text = {
		trigger = {
			is_species_class = PRE_ART
		}
		localization_key = arthropoid_species
	}
	text = {
		trigger = {
			is_species_class = PRE_PLANT
		}
		localization_key = plantoid_species
	}
	text = {
		trigger = {
			is_species_class = PRE_AQUATIC
		}
		localization_key = aquatic_species
	}
	text = {
		trigger = {
			is_species_class = PRE_TOX
		}
		localization_key = toxic_species
	}
	#text = {
	#	trigger = {
	#		is_species_class = PRE_NECROID
	#	}
	#	localization_key = necroid_species
	#}
	text = {
		trigger = {
			is_species_class = PRE_LITHOID
		}
		localization_key = lithoid_species
	}
}

defined_text = {
	name = GetCrimeDeviancy
	text = {
		trigger = {
			is_scope_valid = yes
			is_regular_empire = yes
		}
		localization_key = PLANET_CRIME_TITLE
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_gestalt = yes
		}
		localization_key = PLANET_CRIME_NO_HAPPINESS_TITLE
	}
    default = PLANET_CRIME_TITLE
}


#############################################
# Common terms for Machine and Hive empires #
#############################################

# Names for individual workers (as a concept, not a Pop class), e.g. "Our mining workers", "Our mining drones"...
defined_text = {
	name = GetWorkerName
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = unit_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drone_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbiont_key
	}
	default = worker_key
}
defined_text = {
	name = GetWorkerNameCap
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = unit_key_cap
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drone_key_cap
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbiont_key_cap
	}
	default = worker_key_cap
}
defined_text = {
	name = GetWorkerNamePlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = units_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drones_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbionts_key
	}
	default = workers_key
}
defined_text = {
	name = GetWorkerNamePluralCap
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = units_key_cap
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drones_key_cap
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbionts_key_cap
	}
	default = workers_key_cap
}

# Contextual descriptors for gestalt entities, as a specific authority (e.g. 'Hive Mind') or as a being (e.g. 'Hive')

# NOTE: 'GetHiveAuthority' singular form is not required, as its role is fulfilled by 'GetGovernmentName'
defined_text = {
	name = GetHiveAuthorityPlural
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = auth_hive_mind_plural
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = auth_mutualistic_intelligence_plural
	}
}

defined_text = {
	name = GetGestaltEntityName # capitalized
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = machine_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = hive_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = wilderness_key
	}
	default = collective_key
}

# How leaders are described, in the form "Officer status" or "officer/autonomous/avatar pilot":
defined_text = {
	name = GetLeaderStatusAdj
	text = {
		trigger = {
			is_gestalt = no
		}
		localization_key = leader_officer
	}
	text = {
		trigger = {
			is_gestalt = yes
			is_wilderness_empire = no
		}
		localization_key = leader_autonomous
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = leader_avatar
	}
}
defined_text = {
	name = GetLeaderStatusAdjCap
	text = {
		trigger = {
			is_gestalt = no
		}
		localization_key = leader_officer_cap
	}
	text = {
		trigger = {
			is_gestalt = yes
			is_wilderness_empire = no
		}
		localization_key = leader_autonomous_cap
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = leader_avatar_cap
	}
}

# Scientist
# Example: Our science unit/science drone/scientist has found a...
defined_text = {
	name = GetScientist
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getscientist_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getscientist_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getscientist_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getscientist_normal
	}
}

defined_text = {
	name = GetScientistCapital
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getscientist_machine_capital
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getscientist_hive_capital
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getscientist_wilderness_capital
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getscientist_normal_capital
	}
}

# Scientists
# Example: Our science units/science drones/scientists have reported that...
defined_text = {
	name = GetScientistPluralCapital
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getscientistplural_machine_capital
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getscientistplural_hive_capital
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getscientistplural_wilderness_capital
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getscientistplural_normal_capital
	}
}

defined_text = {
	name = GetScientistPlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getscientistplural_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getscientistplural_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getscientistplural_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getscientistplural_normal
	}
}

# Engineer
# Example: Our engineering unit/engineering drone/engineer has found a...
defined_text = {
	name = GetEngineer
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getengineer_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getengineer_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getengineer_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getengineer_normal
	}
}

# Engineers
# Example: Our engineering units/engineering drones/engineers have reported that...
defined_text = {
	name = GetEngineerPlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getengineerplural_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getengineerplural_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getengineerplural_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getengineerplural_normal
	}
}

# Colonist
# Example: Our colonization unit/colonization drone/colonist has found a...
defined_text = {
	name = GetColonist
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getcolonist_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getcolonist_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getcolonist_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getcolonist_normal
	}
}

defined_text = {
	name = GetColonistCapital
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getcolonist_machine_capital
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getcolonist_hive_capital
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getcolonist_wilderness_capital
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getcolonist_normal_capital
	}
}

# Colonists
# Example: Our colonization units/colonization drones/colonists have reported that...
defined_text = {
	name = GetColonistPlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getcolonistplural_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getcolonistplural_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getcolonistplural_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getcolonistplural_normal
	}
}

defined_text = {
	name = GetColonistPluralCapital
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getcolonistplural_machine_capital
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getcolonistplural_hive_capital
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getcolonistplural_wilderness_capital
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getcolonistplural_normal_capital
	}
}

# Envoy
# Example: Our diplomatic unit/diplomatic drone/envoy has found a...
defined_text = {
	name = GetEnvoy
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getenvoy_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getenvoy_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getenvoy_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getenvoy_normal
	}
}

# Envoy
# Example: Our diplomatic unit/diplomatic drone/envoy has found a...
defined_text = {
	name = GetEnvoyCap
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getenvoycap_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getenvoycap_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getenvoycap_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getenvoycap_normal
	}
}

# Envoys
# Example: Our diplomatic units/diplomatic drones/envoys have reported that...
defined_text = {
	name = GetEnvoyPlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getenvoyplural_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getenvoyplural_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getenvoyplural_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getenvoyplural_normal
	}
}

# Example: Our linguists/language drones/linguistic algoriths...
defined_text = {
	name = GetLinguists
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getlinguists_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getlinguists_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getlinguists_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getlinguists_normal
	}
}

# Example: Our researchers/research drones/research subroutines...
defined_text = {
	name = GetResearchers
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = getresearchers_machine
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = getresearchers_hive
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = getresearchers_wilderness
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = getresearchers_normal
	}
}

# Generic Researcher Job - Physics
# Example: Our Phycicist/Brain Drone/Physics Subroutine/Evosymbiont...
defined_text = {
	name = GetPhysicsJob
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = job_calculator_physicist
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = job_brain_drone_physicist
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = job_evosymbiont
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = job_physicist
	}
	default = job_physicist
}

# Generic Researcher Jobs - Physics
# Example: Our Phycicists/Brain Drones/Physics Subroutines/Evosymbionts...
defined_text = {
	name = GetPhysicsJobPlural
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = job_calculator_physicist_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = job_brain_drone_physicist_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = job_evosymbiont_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = job_physicist_plural
	}
	default = job_physicist_plural
}

# Generic Researcher Job - Biology
# Example: Our Biologist/Biology Brain Drone/Biology Subroutine/Evosymbiont...
defined_text = {
	name = GetBiologyJob
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = job_calculator_biologist
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = job_brain_drone_biologist
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = job_evosymbiont
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = job_biologist
	}
	default = job_biologist
}

# Generic Researcher Jobs - Biology
# Example: Our Biologists/Biology Brain Drones/Biology Subroutines/Evosymbionts...
defined_text = {
	name = GetBiologyJobPlural
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = job_calculator_biologist_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = job_brain_drone_biologist_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = job_evosymbiont_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = job_biologist_plural
	}
	default = job_biologist_plural
}

# Generic Researcher Job - Engineering
# Example: Our Engineer/Engineering Brain Drone/Engineering Subroutine/Evosymbiont...
defined_text = {
	name = GetEngineerJob
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = job_calculator_engineer
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = job_brain_drone_biologist
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = job_evosymbiont
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = job_engineer
	}
	default = job_engineer
}

# Generic Researcher Jobs - Engineers
# Example: Our Biologists/Biology Brain Drones/Biology Subroutines/Evosymbionts...
defined_text = {
	name = GetEngineerJobPlural
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { is_machine_empire = yes }
				}
				AND = {
					is_scope_type = country
					is_machine_empire = yes
				}
			}
		}
		localization_key = job_calculator_engineer_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_hive_empire = yes
						is_wilderness_empire = no
					}
				}
				AND = {
					is_scope_type = country
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
		}
		localization_key = job_brain_drone_engineer_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = {
						is_wilderness_empire = yes
					}
				}
				AND = {
					is_scope_type = country
					is_wilderness_empire = yes
				}
			}
		}
		localization_key = job_evosymbiont_plural
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = agreement
					exists = owner
					owner = { NOT = { has_ethic = ethic_gestalt_consciousness } }
				}
				AND = {
					is_scope_type = country
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
		}
		localization_key = job_engineer_plural
	}
	default = job_engineer_plural
}

# Example: A team member/drone/unit...
defined_text = {
	name = GetTeamMember
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = unit_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drone_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbiont_key
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = team_member_key
	}
}

defined_text = {
	name = GetTeamMemberPlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = units_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drones_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbionts_key
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = team_members_key
	}
}

defined_text = { # Country scope
	name = GetUnitDrone
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getunitdrone_unit
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getunitdrone_drone
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getunitdrone_symbiont
	}
	text = { # fallback if not Gestalt Consciousness
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getunitdrone_leader
	}
}

defined_text = { # Country scope
	name = GetUnitDronePlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getunitdrone_unit_plural
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getunitdrone_drone_plural
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getunitdrone_symbiont_plural
	}
	text = { # fallback if not Gestalt Consciousness
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getunitdrone_leader_plural
	}
}

defined_text = {
	name = GetTerraformer
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getterraformer_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getterraformer_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getterraformer_wilderness
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getterraformer_normal
	}
}

defined_text = {
	name = GetTerraformerPlural
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getterraformer_machine_plural
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getterraformer_hive_plural
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getterraformer_wilderness_plural
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getterraformer_normal_plural
	}
}

defined_text = { # Country scope
	name = GetBrainName
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getbrainname_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getbrainname_hive
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = getbrainname_wilderness
	}
	text = { # fallback if not Gestalt Consciousness
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getbrainname_error
	}
}

defined_text = { # Species scope
	name = GetBrainJunctionName
	text = {
		trigger = {
			is_robotic = yes
		}
		localization_key = getbrainjunctionsname_robotic
	}
	text = {
		trigger = {
			is_robotic = no
		}
		localization_key = getbrainjunctionsname_organic
	}
}

defined_text = { # Country scope
	name = GetNetworkName
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = getnetworkname_machine
	}
	text = {
		trigger = {
			is_hive_empire = yes # includes Wilderness
		}
		localization_key = getnetworkname_hive
	}
	text = { # fallback if not Gestalt Consciousness
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = getnetworkname_default
	}
}

defined_text = { # Must be scoped to country when called
	name = GetMonsterOnShipDesc
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = monsteronship_mach_desc
	}
	text = {
		trigger = {
			is_machine_empire = no
		}
		localization_key = monsteronship_desc
	}
}

defined_text = {
	name = GetPrecursorCiv
	text = {
		trigger = {
			has_country_flag = vultaum_artifact_recoverer
		}
		localization_key = vultaum_precursor_civ
	}
	text = {
		trigger = {
			has_country_flag = yuht_artifact_recoverer
		}
		localization_key = yuht_precursor_civ
	}
	text = {
		trigger = {
			has_country_flag = first_league_artifact_recoverer
		}
		localization_key = first_league_precursor_civ
	}
	text = {
		trigger = {
			has_country_flag = irassian_artifact_recoverer
		}
		localization_key = irassian_precursor_civ
	}
	text = {
		trigger = {
			has_country_flag = cybrex_artifact_recoverer
		}
		localization_key = cybrex_precursor_civ
	}
}

defined_text = {
	name = Get1stPlanetKiller
	text = {
		trigger = {
			has_country_flag = pk_cracker
		}
		localization_key = get1stplanetkiller_cracker
	}
	text = {
		trigger = {
			has_country_flag = pk_shielder
		}
		localization_key = get1stplanetkiller_shielder
	}
	text = {
		trigger = {
			has_country_flag = pk_neutron
		}
		localization_key = get1stplanetkiller_neutron
	}
	text = {
		trigger = {
			has_country_flag = pk_godray
		}
		localization_key = get1stplanetkiller_godray
	}
	text = {
		trigger = {
			has_country_flag = pk_nanobots
		}
		localization_key = get1stplanetkiller_nanobots
	}
	text = {
		trigger = {
			NOR = {
				has_country_flag = pk_cracker
				has_country_flag = pk_shielder
				has_country_flag = pk_neutron
				has_country_flag = pk_godray
				has_country_flag = pk_nanobots
			}
		}
		localization_key = get1stplanetkiller_none
	}
}

defined_text = {
	name = GetDiplomacyTraditionName
	text = {
		trigger = {
			owner = {
				OR = {
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_inwards_perfection
					is_hive_empire = yes
					has_origin = origin_necrophage
				}
			}
		}
		localization_key = tradition_adaptability
	}
	text = {
		trigger = {
			owner = {
				NOR = {
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_inwards_perfection
					is_hive_empire = yes
					is_machine_empire = yes
					has_origin = origin_necrophage
				}
			}
		}
		localization_key = tradition_diplomacy
	}
	text = {
		trigger = {
			owner = {
				is_machine_empire = yes
			}
		}
		localization_key = tradition_versatility
	}
}

defined_text = {
	name = GetTradingHubType
	text = {
		trigger = {
			has_ethic = ethic_gestalt_consciousness
		}
		localization_key = sm_trading_hub_gestalt
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = sm_trading_hub
	}
}

defined_text = {
	name = GetGrayGooWorldDesc
	text = {
		trigger = {
			has_global_flag = active_gray_goo
		}
		localization_key = gray_goo_world_active_nanites
	}
	text = {
		trigger = {
			NOT = { has_global_flag = active_gray_goo }
		}
		localization_key = gray_goo_world_inactive_nanites
	}
}

defined_text = {
	name = GetShieldedPlanetDesc
	text = {
		trigger = {
			NOT = { has_planet_flag = is_time_loop_world }
		}
		localization_key = pc_shielded_desc_orig
	}
	text = {
		trigger = {
			has_planet_flag = is_time_loop_world
		}
		localization_key = pc_time_loop_world_desc
	}
}

defined_text = {
	name = GetWormTechPartialFullTitle
	text = {
		trigger = {
			NOR = {
				has_technology = tech_akx_worm_1
				has_technology = tech_akx_worm_2
			}
		}
		localization_key = tech_akx_worm_partial_custom
	}
	text = {
		trigger = {
			OR = {
				has_technology = tech_akx_worm_1
				has_technology = tech_akx_worm_2
			}
		}
		localization_key = tech_akx_worm_full_custom
	}
}

defined_text = { # only needed for devouring swarm conquering robots
	name = GetPurgeProcessingResource
	text = {
		trigger = {
			is_robotic_species = yes
			from = {
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		localization_key = GetPurgeProcessingResource_alloys
	}
	text = {
		trigger = {
			is_lithoid = yes
		}
		localization_key = GetPurgeProcessingResource_minerals
	}
	text = {
		trigger = {
			is_lithoid = no
			OR = {
				is_robotic_species = no
				NOT = {
					from = {
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
		}
		localization_key = GetPurgeProcessingResource_food
	}
}

# Must use generate_number_planet_in_system_flags before it. Generates a string describing the planet a bit, e.g. "the system's fifth planet, a [This.GetClassAdj] planet"
defined_text = {
	name = GetPlanetBioInfo
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_1
		}
		localization_key = PlanetBio1
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_1 }
		}
		localization_key = PlanetBio1Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_2
		}
		localization_key = PlanetBio2
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_2 }
		}
		localization_key = PlanetBio2Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_3
		}
		localization_key = PlanetBio3
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_3 }
		}
		localization_key = PlanetBio3Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_4
		}
		localization_key = PlanetBio4
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_4 }
		}
		localization_key = PlanetBio4Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_5
		}
		localization_key = PlanetBio5
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_5 }
		}
		localization_key = PlanetBio5Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_6
		}
		localization_key = PlanetBio6
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_6 }
		}
		localization_key = PlanetBio6Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_7
		}
		localization_key = PlanetBio7
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_7 }
		}
		localization_key = PlanetBio7Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_8
		}
		localization_key = PlanetBio8
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_8 }
		}
		localization_key = PlanetBio8Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_9
		}
		localization_key = PlanetBio9
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_9 }
		}
		localization_key = PlanetBio9Moon
	}
	text = {
		trigger = {
			is_moon = no
			has_planet_flag = planet_number_10
		}
		localization_key = PlanetBio10
	}
	text = {
		trigger = {
			is_moon = yes
			orbit = { has_planet_flag = planet_number_10 }
		}
		localization_key = PlanetBio10Moon
	}
}

# Use before GetClassAdj to get the appropriate "a" or "an"
defined_text = {
	name = GetAAnPlanetClass
	text = {
		trigger = {
			OR = {
				is_planet_class = pc_arid
				is_planet_class = pc_ocean
				is_planet_class = pc_arid
				is_planet_class = pc_arctic
				is_planet_class = pc_alpine
				is_planet_class = pc_gaia
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_shattered_ring_habitable
				is_planet_class = pc_habitat
				is_planet_class = pc_city
			}
		}
		localization_key = string_an
	}
	default = string_a
}

# Use in species scope before GetClass to get the appropriate "a" or "an"
defined_text = {
	name = GetAAnSpeciesClass
	text = {
		trigger = {
			OR = {
				is_species_class = AVI
				is_species_class = ART
				is_species_class = EXD
				is_species_class = AI
				is_species_class = PRE_AVI
				is_species_class = PRE_ART
				is_species_class = AQUATIC
			}
		}
		localization_key = string_an
	}
	default = string_a
}

# Gendered titles for action.1, "Greetings <Ruler>"
defined_text = {
	name = GetBloodCourtRulerTitle
	text = {
		trigger = {
			NOT = { leader = { gender = female } }
		}
		localization_key = RT_HIGH_EXECUTIONER
	}
	text = {
		trigger = {
			leader = { gender = female }
		}
		localization_key = RT_HIGH_EXECUTIONER_FEMALE
	}
}
defined_text = {
	name = GetPurityOrderRulerTitle
	text = {
		trigger = {
			NOT = { leader = { gender = female } }
		}
		localization_key = RT_LORD_PURIFIER
	}
	text = {
		trigger = {
			leader = { gender = female }
		}
		localization_key = RT_LADY_PURIFIER
	}
}
defined_text = {
	name = GetPurificationCommitteeRulerTitle
	text = {
		trigger = {
			NOT = { leader = { gender = female } }
		}
		localization_key = RT_GRAND_ARBITER
	}
	text = {
		trigger = {
			leader = { gender = female }
		}
		localization_key = RT_GRAND_ARBITER_FEMALE
	}
}

#Used for Subterranean origins unique interaction with the subterranean event chain
defined_text = {
	name = GetSubMantleLower
	text = {
		trigger = {
			is_subterranean_empire = no
		}
		localization_key = submantle_sub
	}
	text = {
		trigger = {
			is_subterranean_empire = yes
		}
		localization_key = submantle_mantle
	}
}

defined_text = {
	name = GetSubMantleUpper
	text = {
		trigger = {
			is_subterranean_empire = no
		}
		localization_key = SubMantle_Sub
	}
	text = {
		trigger = {
			is_subterranean_empire = yes
		}
		localization_key = SubMantle_Mantle
	}
}


defined_text = {
	name = GetBioAlloy
	text = {
		trigger = {
			is_catalytic_empire = no
		}
		localization_key = not_bio_alloy
	}
	text = {
		trigger = {
			is_catalytic_empire = yes
		}
		localization_key = bio_alloy
	}
}

#Used to generate the title of the Leviathan Slaying Parade
defined_text = {
	random = no
	name = GetLeviathanParadeName
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		localization_key = xenophobe_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_xenophile }
			is_situation_leviathan_biological = yes
		}
		localization_key = xenophile_biological_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_xenophile }
			is_situation_leviathan_biological = no
		}
		localization_key = xenophile_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_fanatic_materialist
				has_country_flag = materialist_science
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = materialist_biological_parade_science
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_fanatic_materialist
				has_country_flag = materialist_trophy
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = materialist_biological_parade_trophy
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_fanatic_materialist
			}
			is_situation_leviathan_biological = no
		}
		localization_key = materialist_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_fanatic_spiritualist
				has_country_flag = spiritualist_reject
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = spiritualist_biological_parade_reject
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_fanatic_spiritualist
				has_country_flag = spiritualist_accept
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = spiritualist_biological_parade_accept
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
			is_situation_leviathan_biological = no
		}
		localization_key = spiritualist_mechanical_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_authoritarian }
		}
		localization_key = authoritarian_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_egalitarian }
			is_situation_leviathan_biological = yes
		}
		localization_key = egalitarian_biological_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_egalitarian }
			is_situation_leviathan_biological = no
		}
		localization_key = egalitarian_mechanical_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_militarist }
		}
		localization_key = militarist_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_pacifist }
			is_situation_leviathan_biological = yes
		}
		localization_key = pacifist_biological_parade
	}
	text = {
		trigger = {
			owner = { has_ethic = ethic_fanatic_pacifist }
			is_situation_leviathan_biological = no
		}
		localization_key = pacifist_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_xenophobe
				is_fanatical = no
			}
		}
		localization_key = xenophobe_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_xenophile
				is_fanatical = no
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = xenophile_biological_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_xenophile
				is_fanatical = no
			}
			is_situation_leviathan_biological = no
		}
		localization_key = xenophile_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_materialist
				is_fanatical = no
				has_country_flag = materialist_science
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = materialist_biological_parade_science
	}
		text = {
		trigger = {
			owner = {
				has_ethic = ethic_materialist
				is_fanatical = no
				has_country_flag = materialist_trophy
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = materialist_biological_parade_trophy
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_materialist
				is_fanatical = no
			}
			is_situation_leviathan_biological = no
		}
		localization_key = materialist_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_spiritualist
				is_fanatical = no
				has_country_flag = spiritualist_reject
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = spiritualist_biological_parade_reject
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_spiritualist
				is_fanatical = no
				has_country_flag = spiritualist_accept
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = spiritualist_biological_parade_accept
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_spiritualist
				is_fanatical = no
			}
			is_situation_leviathan_biological = no
		}
		localization_key = spiritualist_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_authoritarian
				is_fanatical = no
			}
		}
		localization_key = authoritarian_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_egalitarian
				is_fanatical = no
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = egalitarian_biological_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_egalitarian
				is_fanatical = no
			}
			is_situation_leviathan_biological = no
		}
		localization_key = egalitarian_mechanical_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_militarist
				is_fanatical = no
			}
		}
		localization_key = militarist_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_pacifist
				is_fanatical = no
			}
			is_situation_leviathan_biological = yes
		}
		localization_key = pacifist_biological_parade
	}
	text = {
		trigger = {
			owner = {
				has_ethic = ethic_pacifist
				is_fanatical = no
			}
			is_situation_leviathan_biological = no
		}
		localization_key = pacifist_mechanical_parade
	}
	text = {
		trigger = {
			owner = { is_hive_empire = yes }
			is_situation_leviathan_biological = yes
		}
		localization_key = hive_biological_parade
	}
	text = {
		trigger = {
			owner = { is_hive_empire = yes }
			is_situation_leviathan_biological = no
		}
		localization_key = hive_mechanical_parade
	}
	text = {
		trigger = {
			owner = { is_machine_empire = yes }
			is_situation_leviathan_biological = yes
		}
		localization_key = machine_biological_parade
	}
	text = {
		trigger = {
			owner = { is_machine_empire = yes }
			is_situation_leviathan_biological = no
		}
		localization_key = machine_mechanical_parade
	}
}

defined_text = {
	name = GetLeviathanTargetName
	text = {
		trigger = { has_situation_flag = celebration_ether_drake }
		localization_key = leviathans.510.name
	}
	text = {
		trigger = { has_situation_flag = celebration_shard }
		localization_key = scripted_SHARD
	}
	text = {
		trigger = { has_situation_flag = celebration_tiyanki_matriarch }
		localization_key = leviathans.556.name
	}
	text = {
		trigger = { has_situation_flag = celebration_voidspawn }
		localization_key = leviathans.550.name
	}
	text = {
		trigger = { has_situation_flag = celebration_spectral_wraith }
		localization_key = leviathans.545.name
	}
	text = {
		trigger = { has_situation_flag = celebration_stellar_devourer }
		localization_key = leviathans.520.name
	}
	text = {
		trigger = { has_situation_flag = celebration_dimensional_horror }
		localization_key = leviathans.525.name
	}
	text = {
		trigger = { has_situation_flag = celebration_elder_one }
		localization_key = scripted_ELDER_ONE
	}
	text = {
		trigger = { has_situation_flag = celebration_worm }
		localization_key = scripted_WORM
	}
	text = {
		trigger = { has_situation_flag = celebration_automated_dreadnought }
		localization_key = leviathans.540.name
	}
	text = {
		trigger = { has_situation_flag = celebration_enigmatic_fortress }
		localization_key = leviathans.515.name
	}
	text = {
		trigger = { has_situation_flag = celebration_scavenger_bot }
		localization_key = NAME_Scavenger_Bot
	}
	text = {
		trigger = { has_situation_flag = celebration_hrozgar }
		localization_key = scripted_SKY_DRAGON
	}
}

defined_text = {
	name = GetTrophyName
	text = {
		trigger = { has_situation_flag = celebration_ether_drake }
		localization_key = drakes_scale
	}
	text = {
		trigger = { has_situation_flag = celebration_shard }
		localization_key = eye_of_the_shard
	}
	text = {
		trigger = { has_situation_flag = celebration_tiyanki_matriarch }
		localization_key = matriarchs_flagella
	}
	text = {
		trigger = { has_situation_flag = celebration_voidspawn }
		localization_key = voidspawns_chitin
	}
	text = {
		trigger = { has_situation_flag = celebration_spectral_wraith }
		localization_key = wraiths_energy_disperser
	}
	text = {
		trigger = { has_situation_flag = celebration_stellar_devourer }
		localization_key = devourers_plasma
	}
	text = {
		trigger = {
			OR = {
				has_situation_flag = celebration_dimensional_horror
				has_situation_flag = celebration_worm
				has_situation_flag = celebration_elder_one
			}
		}
		localization_key = horrific_inverse_mass
	}
	text = {
		trigger = { has_situation_flag = celebration_automated_dreadnought }
		localization_key = dreadnoughts_reactor
	}
	text = {
		trigger = { has_situation_flag = celebration_enigmatic_fortress }
		localization_key = fortress_hull_plates
	}
	text = {
		trigger = { has_situation_flag = celebration_scavenger_bot }
		localization_key = scavenger_bots_compactor
	}
	text = {
		trigger = { has_situation_flag = celebration_hrozgar }
		localization_key = sky_dragons_plume
	}
}

defined_text = {
	name = GetPlanetHabitat
	text = {
		trigger = { is_planet_class = pc_habitat }
		localization_key = habitat_lowercase
	}
	text = {
		trigger = {
			OR = {
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_ringworld_habitable_damaged
				is_planet_class = pc_cybrex
			}
		}
		localization_key = ringworld_lowercase
	}
	text = {
		trigger = {
			NOR = {
				is_planet_class = pc_habitat
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_ringworld_habitable_damaged
				is_planet_class = pc_cybrex
			}
		}
		localization_key = planetmoon
	}
}

define_text = {
	name = GetSensoryWorkers
	text = {
		trigger = { is_gestalt = no }
		localization_key = sensor_operatior
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = sensory_drones
	}
	text = {
		trigger = { is_wilderness_empire = yes }
		localization_key = sensory_symbionts
	}
	text = {
		trigger = { is_machine_empire = yes }
		localization_key = observation_subroutines
	}
}

define_text = {
	name = GetFinancialAdvisorAgencyCap

	text = {
		trigger = {
			is_megacorp = yes
		}
		weight = 10
		localization_key = financial_advisors_megacorp_upper
	}
	text = {
		trigger = {
			is_authoritarian = yes
		}
		weight = {
			base = 6
			modifier = {
				factor = 2
				has_ethic = ethic_fanatic_authoritarian
			}
		}
		localization_key = financial_advisors_authoritarian_upper
	}
	text = {
		trigger = {
			is_xenophile = yes
		}
		weight = {
			base = 6
			modifier = {
				factor = 2
				has_ethic = ethic_fanatic_xenophile
			}
		}
		localization_key = financial_advisors_xenophile_upper
	}
	text = {
		trigger = {
			is_spiritualist = yes
		}
		weight = {
			base = 6
			modifier = {
				factor = 2
				has_ethic = ethic_fanatic_spiritualist
			}
		}
		localization_key = financial_advisors_spiritualist_upper
	}
	text = {
		trigger = {
			is_egalitarian = yes
		}
		weight = {
			base = 6
			modifier = {
				factor = 2
				has_ethic = ethic_fanatic_egalitarian
			}
		}
		localization_key = financial_advisors_egalitarian_upper
	}
	text = {
		trigger = {
			OR = {
				is_materialist = yes
				is_pacifist = yes
			}
		}
		weight = {
			base = 4
			modifier = {
				factor = 2
				OR = {
					has_ethic = ethic_fanatic_materialist
					has_ethic = ethic_fanatic_pacifist
				}
			}
		}
		localization_key = financial_advisors_xenophile_upper
	}
	text = {
		trigger = {
			is_hive_empire = yes
		}
		localization_key = financial_advisors_hive_upper
	}
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = financial_advisors_machine_upper
	}

	default = financial_advisors_generic_upper
}

define_text = {
	name = GetParadeStudy
	text = {
		trigger = { is_gestalt = no }
		localization_key = parade
	}
	text = {
		trigger = { is_gestalt = yes }
		localization_key = study
	}
}

define_text = {
	name = GetWaterCoolantUpper
	text = {
		trigger = { is_machine_empire = no }
		localization_key = water_upper_case
	}
	text = {
		trigger = { is_machine_empire = yes }
		localization_key = coolant_upper_case
	}
}

define_text = {
	name = GetWaterCoolantLower
	text = {
		trigger = { is_machine_empire = no }
		localization_key = water_lower_case
	}
	text = {
		trigger = { is_machine_empire = yes }
		localization_key = coolant_lower_case
	}
}

define_text = {
	name = GetNecromancersUpper
	text = {
		trigger = { is_machine_empire = yes }
		localization_key = getnecromancers_machine_upper
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getnecromancers_hive_upper
	}
	text = {
		trigger = { is_wilderness_empire = yes }
		localization_key = getnecromancers_wilderness_upper
	}
	default = getnecromancers_regular_upper
}

define_text = {
	name = GetNecromancersLower
	text = {
		trigger = { is_machine_empire = yes }
		localization_key = getnecromancers_machine_lower
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = getnecromancers_hive_lower
	}
	text = {
		trigger = { is_wilderness_empire = yes }
		localization_key = getnecromancers_wilderness_lower
	}
	default = getnecromancers_regular_lower
}

defined_text = {
 	name = num_toxic_terraform_candidates
 	value = value:num_toxic_terraform_candidates
}

defined_text = {
	name = GetMechanicalBiological
	text = {
		trigger = {
			OR = {
				has_trait = "trait_mechanical"
				has_trait = "trait_machine_unit"
			}
		}
		localization_key = getmechanical
	}
	text = {
		trigger = {
			NOR = {
				has_trait = "trait_mechanical"
				has_trait = "trait_machine_unit"
			}
		}
		localization_key = getbiological
	}
}

defined_text = {
	name = GetCrew
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = units_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drones_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbionts_key
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = crew_key
	}
}

defined_text = {
	name = GetCrewMember
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = unit_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drone_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbiont_key
	}
	text = {
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		localization_key = crew_member_key
	}
}

define_text = {
	name = LeaderAssignDesc
	text = {
		trigger = { leader_class = commander }
		localization_key = leader_desc_admiral
	}
	text = {
		trigger = { leader_class = scientist }
		localization_key = leader_desc_scientist
	}
	text = {
		trigger = { leader_class = official }
		localization_key = leader_desc_official
	}
	default = paragon_origin_null_loc
}

# Names for individual drones/units/symbionts, in-fiction
defined_text = {
	name = GetIndividualName
	text = {
		trigger = {
			is_machine_empire = yes
		}
		localization_key = unit_key
	}
	text = {
		trigger = {
			is_hive_empire = yes
			is_wilderness_empire = no
		}
		localization_key = drone_key
	}
	text = {
		trigger = {
			is_wilderness_empire = yes
		}
		localization_key = symbiont_key
	}
	default = individual_key
}
defined_text = {
	name = GetIndividualNameCap
	text = {
		trigger = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		localization_key = unit_key_cap
	}
	text = {
		trigger = {
			exists = owner
			owner = {
				is_hive_empire = yes
				is_wilderness_empire = no
			}
		}
		localization_key = drone_key_cap
	}
	text = {
		trigger = {
			exists = owner
			owner = { is_wilderness_empire = yes }
		}
		localization_key = symbiont_key_cap
	}
	default = individual_key_cap
}
defined_text = {
	name = GetIndividualNamePlural
	text = {
		trigger = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		localization_key = units_key
	}
	text = {
		trigger = {
			exists = owner
			owner = {
				is_hive_empire = yes
				is_wilderness_empire = no
			}
		}
		localization_key = drones_key
	}
	text = {
		trigger = {
			exists = owner
			owner = { is_wilderness_empire = yes}
		}
		localization_key = symbionts_key
	}
	default = individuals_key
}
defined_text = {
	name = GetIndividualNamePluralCap
	text = {
		trigger = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		localization_key = units_key_cap
	}
	text = {
		trigger = {
			exists = owner
			owner = {
				is_hive_empire = yes
				is_wilderness_empire = no
			}
		}
		localization_key = drones_key_cap
	}
	text = {
		trigger = {
			exists = owner
			owner = { is_wilderness_empire = yes }
		}
		localization_key = symbionts_key_cap
	}
	default = individuals_key_cap
}

defined_text = {
	name = GetOpionLossTrader
	value = value:enclave_cancel_trade_trust
}

defined_text = {
	name = GetFallenEmpireBuilding
	text = {
		trigger = {
			has_country_flag = recently_got_micro_forge
		}
		localization_key = building_micro_forge
	}
	text = {
		trigger = {
			has_country_flag = recently_got_affluence_emporium
		}
		localization_key = building_affluence_emporium
	}
	text = {
		trigger = {
			has_country_flag = recently_got_nourishment_complex
		}
		localization_key = building_nourishment_complex
	}
	text = {
		trigger = {
			has_country_flag = recently_got_dimensional_replicator
		}
		localization_key = building_dimensional_replicator
	}
	text = {
		trigger = {
			has_country_flag = recently_got_class_3_singularity
		}
		localization_key = building_class_3_singularity
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_fortress
		}
		localization_key = building_fe_fortress
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_administration_1
			is_spiritualist = no
		}
		localization_key = building_fe_administration_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_administration_1 # Using Administration 1 for this one instead of temple to avoid ethic swap shennanigans
			is_spiritualist = yes
		}
		localization_key = building_fe_temple_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_administration_hive_1
		}
		localization_key = building_fe_administration_hive_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_administration_machine_1
		}
		localization_key = building_fe_administration_machine_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_assembly_1
		}
		localization_key = building_fe_assembly_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_clinic_1
		}
		localization_key = building_fe_clinic_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_security_1
		}
		localization_key = building_fe_security_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_market_1
		}
		localization_key = building_fe_market_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_silo_1
		}
		localization_key = building_fe_silo_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_entertainment_1
		}
		localization_key = building_fe_entertainment_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_lab_1
		}
		localization_key = building_fe_lab_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_mine_1
		}
		localization_key = building_fe_mine_1
	}
	text = {
		trigger = {
			has_country_flag = recently_got_fe_sky_dome
		}
		localization_key = building_fe_sky_dome
	}
}

# Faction Type
defined_text = {
	name = GetFactionType
	text = {
		trigger = {
			is_pop_faction_type = traditionalist
		}
		localization_key = pft_traditionalist
	}
	text = {
		trigger = {
			is_pop_faction_type = imperialist
		}
		localization_key = pft_imperialist
	}
	text = {
		trigger = {
			is_pop_faction_type = supremacist
		}
		localization_key = pft_supremacist
	}
	text = {
		trigger = {
			is_pop_faction_type = isolationist
		}
		localization_key = pft_isolationist
	}
	text = {
		trigger = {
			is_pop_faction_type = totalitarian
		}
		localization_key = pft_totalitarian
	}
	text = {
		trigger = {
			is_pop_faction_type = progressive
		}
		localization_key = pft_progressive
	}
	text = {
		trigger = {
			is_pop_faction_type = prosperity
		}
		localization_key = pft_prosperity
	}
	text = {
		trigger = {
			is_pop_faction_type = technologist
		}
		localization_key = pft_technologist
	}
	text = {
		trigger = {
			is_pop_faction_type = xenoist
		}
		localization_key = pft_xenoist
	}
	text = {
		trigger = {
			is_pop_faction_type = manifesti
		}
		localization_key = pft_manifesti
	}
}

# Faction Ethic Equivelent
defined_text = {
	name = GetEthicEquivelent
	text = {
		trigger = {
			is_pop_faction_type = imperialist
		}
		localization_key = ethic_militarist
	}
	text = {
		trigger = {
			is_pop_faction_type = supremacist
		}
		localization_key = ethic_xenophobe
	}
	text = {
		trigger = {
			is_pop_faction_type = isolationist
		}
		localization_key = ethic_xenophobe
	}
	text = {
		trigger = {
			is_pop_faction_type = totalitarian
		}
		localization_key = ethic_authoritarian
	}
	text = {
		trigger = {
			is_pop_faction_type = progressive
		}
		localization_key = ethic_egalitarian
	}
	text = {
		trigger = {
			is_pop_faction_type = prosperity
		}
		localization_key = ethic_pacifist
	}
	text = {
		trigger = {
			is_pop_faction_type = technologist
		}
		localization_key = ethic_materialist
	}
	text = {
		trigger = {
			is_pop_faction_type = xenoist
		}
		localization_key = ethic_xenophile
	}
}

defined_text = {
	name = GetSlotCity02Prereq
	text = {
		trigger = {
			is_capital = no
			exists = owner
			has_upgraded_capital = no
		}
		localization_key = zone_unavailable_capital
	}
}

# Crisis Resource/Currency
# Ideally we will add future Crisis Currencies to this so the tutorial is udated.
define_text = {
	name = GetCrisisResource
	text = {
		trigger = {
			owner = {
				has_ascension_perk = ap_become_the_crisis # Become the Crisis
			}
		}
		localization_key = menace
	}
	text = {
		trigger = {
			owner = {
				has_ascension_perk = ap_behemoths # Behemoth Fury
			}
		}
		localization_key = feral_insight
	}
	text = {
		trigger = {
			owner = {
				has_ascension_perk = ap_cosmogenesis # Cosmogenesis
			}
		}
		localization_key = advanced_logic
	}
}

# Build or Grow depending on Shipset
define_text = {
	name = GetBuildGrowCap
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = no
			}
		}
		localization_key = get_build_cap
	}
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = yes
			}
		}
		localization_key = get_grow_cap
	}
}

define_text = {
	name = GetBuildGrow
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = no
			}
		}
		localization_key = get_build
	}
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = yes
			}
		}
		localization_key = get_grow
	}
}

define_text = {
	name = GetBuildingGrowingCap
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = no
			}
		}
		localization_key = get_building_cap
	}
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = yes
			}
		}
		localization_key = get_growing_cap
	}
}

define_text = {
	name = GetBuildingGrowing
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = no
			}
		}
		localization_key = get_building
	}
	text = {
		trigger = {
			owner = {
				country_uses_bio_ships = yes
			}
		}
		localization_key = get_growing
	}
}

defined_text = {
	name = GetHabitatMaxDistricts
	value = value:max_habitat_districts_value
}

# Handle mechanical or biological ship Focus Rewards
define_text = {
	name = GetConquestRewards4
	text = {
		trigger = {
			country_uses_bio_ships = yes
		}
		localization_key = conquest_rewards_4.desc_biological
	}
    default = conquest_rewards_4.desc_mechanical
}

# Handle mechanical or biological ship Focus Rewards
define_text = {
	name = GetConquestRewards7
	text = {
		trigger = {
			country_uses_bio_ships = yes
		}
		localization_key = conquest_rewards_7.desc_biological
	}
    default = conquest_rewards_7.desc_mechanical
}

# Handle mechanical or biological ship Focus Rewards
define_text = {
	name = GetConquestRewards9
	text = {
		trigger = {
			country_uses_bio_ships = yes
		}
		localization_key = conquest_rewards_9.desc_biological
	}
    default = conquest_rewards_9.desc_mechanical
}

# Handle non-diplomatic Focus Rewards
define_text = {
	name = GetDevelopmentRewards3
	text = {
		trigger = {
			is_diplomatic = no
		}
		localization_key = development_rewards_3.desc_no_diplo
	}
    default = development_rewards_3.desc_diplo
}

# Handle non-diplomatic Focus Rewards
define_text = {
	name = GetDevelopmentRewards5
	text = {
		trigger = {
			is_diplomatic = no
			is_gestalt = yes
		}
		localization_key = development_rewards_5.desc_no_diplo_gestalt
	}
	text = {
		trigger = {
			is_diplomatic = no
			is_gestalt = no
		}
		localization_key = development_rewards_5.desc_no_diplo_regular
	}
    default = development_rewards_5.desc_diplo
}

# Handle non-diplomatic Focus Rewards
define_text = {
	name = GetDevelopmentRewards8
	text = {
		trigger = {
			is_diplomatic = no
		}
		localization_key = development_rewards_8.desc_no_diplo
	}
    default = development_rewards_8.desc_diplo
}

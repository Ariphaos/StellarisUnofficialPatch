#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

#Root = target country
#This = country
is_valid_rival = {
	custom_tooltip = {
		fail_text = INVALID_RIVAL_DESC
		root = {
			OR = {
				prev = { NOT = { is_country_type = default } }
				AND = {
					relative_power = { who = prev value >= inferior }
					OR = {
						relative_power = { who = prev value <= superior }
						prev = { has_policy_flag = diplo_stance_animosity }
					}
				}
				is_country_type = mirrored_country # Mirrored Empire doesn't have relative power but we want to be rivals anyway
			}
		}
	}
}

# Root = claimer
# This = system
can_add_claim = {
	hidden_trigger = {
		if = {
			limit = {
				root = { NOT = { is_country_type = default } }
			}
			always = yes
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_POLICY
		OR = {
			root = { has_policy_flag = unrestricted_wars }
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			AND = {
				exists = owner
				owner = {
					any_war = {
						any_attacker = { is_same_value = prevprev }
						any_defender = { is_same_value = root }
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		NAND = {
			exists = owner
			owner = {
				NOR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = no }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM_LITHOID
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = yes }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { root = { has_valid_civic = civic_machine_assimilator } }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_fanatic_purifiers }
			NOT = {	owner = { is_same_species = root } }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_machine_terminator }
			owner = {
				NOR = {
					is_same_species = root
					has_country_flag = synthetic_empire
					is_machine_empire = yes
					is_individual_machine = yes
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			owner = {
				OR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
				}
			}
			root = {
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
	}
}

# Root = taker country
# This = giver country
can_get_claim_from_lost_system = {
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
		root = {
			OR = {
				is_country_type = default
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			has_valid_civic = civic_fanatic_purifiers
			NOT = {	is_same_species = root }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			has_valid_civic = civic_machine_terminator
			NOR = {
				is_same_species = root
				has_country_flag = synthetic_empire
				is_machine_empire = yes
			}
		}
	}
}

# Root = Bombarding country
# This = Receiving country
should_surrender_planets_to = {
	is_country_type = default
	is_gestalt = no
	is_homicidal = no
	is_crisis_faction = no
	is_primitive = no
	root = {
		is_homicidal = no
		is_crisis_faction = no
		is_primitive = no
		is_country_type = default
	}
}

#Root = country
#This = species
species_has_citizenship = {
	has_citizenship_type = { type = citizenship_full country = root }
}

#Root = country
#This = pop
should_abduct_pop = {
	planet = {
		exists = owner
		owner = { is_hostile = root }
	}
	has_virtual_species_trait = no
	NAND = {
		has_citizenship_type = { type = citizenship_purge country = root }
		NOR = {
			has_purge_type = { type = purge_matrix country = root }
			has_purge_type = { type = purge_processing country = root }
			has_purge_type = { type = purge_labor_camps country = root }
			has_purge_type = { type = purge_necrophage country = root }
			has_purge_type = { type = purge_cosmogenesis_lathe_resettle country = root }
		}
	}
}

#Root = planet
#This = species
species_can_live_on_planet = {
	hidden_trigger = {
		exists = root #somehow this appeared in the error log. No idea how!
		NAND = {
			root = { is_planet_class = pc_machine }
			NOR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
				AND = {
					has_trait = trait_cybernetic
					exists = root.owner
					root.owner = {
						is_machine_empire = yes
						OR = {
							has_civic = civic_machine_assimilator # Assimilator empire
							has_ascension_perk = ap_mechromancy
						}
					}
				}
			}
		}
		if = {
			limit = {
				root = { is_planet_class = pc_hive }
			}
			OR = {
				has_trait = trait_hive_mind
				AND = { #Necrophage Hive Mind can have Necrophytes
					exists = root.owner
					root.owner = {
						is_hive_empire = yes
						has_origin = origin_necrophage
						prev = { species_can_be_necrophaged = yes }
					}
				}
			}
		}
	}
	if = {
		limit = {
			exists = root.owner
			root.owner = {
				has_origin = origin_clone_army
			}
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
		}
		custom_tooltip = {
			fail_text = CLONE_ARMY_FORCE_DECLINE
			root = {
				check_variable = { which = clone_pops_missing value >= 0 }
			}
		}
	}
}

#Note: this is also used in pop faction support calculations
#Root = country
#This = pop
can_vote_in_democratic_election = {
	has_citizenship_rights = yes
	is_sapient = yes
	is_enslaved = no
	is_being_purged = no
}

#This = leader
should_pay_for_leader_upkeep = {
	NOR = {
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
			}
			is_councilor = yes
		}
		has_trait = leader_trait_spacebender
		has_leader_flag = should_not_have_upkeep
	}
	NOR = {
		has_leader_flag = marauder_merc_leader
		has_leader_flag = hired_admiral_merc_leader
	}
}

#Checks whether any leaders (scientists etc) can be formed from this pop
#Root = country
#This = pop
can_generate_leader_from_pop = {
	can_be_leader = yes
}

#Checks whether this species is eligible to become rulers through elections
#Root = country
#This = species
can_generate_leader_from_species = {
	is_sapient = yes
	OR = {
		NAND = {
			NOT = { root = { has_technology = "tech_synthetic_leaders" } }
			has_trait = "trait_mechanical"
		}
		has_citizenship_type = { type = citizenship_full country = root }
	}
}

#Checks whether this species can become espionage assets (note that some checks are also done in code)
#Root = country
#This = species
can_create_espionage_asset_from_species = {
	OR = {
		NOT = { has_trait = "trait_mechanical" }
		root = { has_technology = "tech_droid_workers" }
	}
}

#Root = country
#This = pop
can_generate_military_leader_from_pop = {
	can_be_leader = yes
	can_be_military_leader = yes
}

#Root = species
#This = planet
can_generate_army_from_planet = {
	NOT = {
		is_planet_class = pc_cosmogenesis_world
	}
	any_owned_species = {
		is_same_species = root
		can_be_soldier = yes
	}
}

#Root = planet
#This = country
can_release_vassal = {
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_fanatic_purifiers }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_machine_terminator }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
}

#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		NOR = {
			AND = {
				has_trait = trait_machine_unit
				prev.this = { is_individual_machine = no }
			}
			AND = {
				has_trait = trait_hive_mind
				NOT = { prev.this = { has_origin = origin_progenitor_hive } }
			}
			AND = {
				NOT = { has_trait = trait_hive_mind }
				prev.this = { is_hive_empire = yes }
			}
			has_trait = trait_mechanical
			can_think = no
			has_trait = trait_clone_soldier_infertile
			has_trait = trait_clone_soldier_infertile_full_potential
		}
	}
}

# Root = species
# This = country
can_generate_army_from_species = {
	root = {
		OR = {
			has_military_service_type = { type = military_service_full country = prev }
			has_military_service_type = { type = military_service_limited country = prev }
			AND = {
				exists = prev
				prev = {
					is_primitive = yes
				}
			}
		}
	}
}

# Root = country
# This = species
can_modify_species = {
	root.owner = {
		OR = {
			is_ai = no
			is_synthetic_empire = yes
			count_exact_species = {
				count < 3
				limit = {
					OR = {
						is_same_species = prevprev
						is_subspecies = prevprev
					}
					NOT = { has_trait = trait_self_modified }
				}
			}
			AND = {
				owner_species = { is_same_species = prevprev }
				OR = {
					has_ascension_perk = ap_engineered_evolution
					has_ascension_perk = ap_the_flesh_is_weak
				}
			}
			AND = {
				OR = {
					owner_species = { is_same_species = prevprev }
					has_ascension_perk = ap_engineered_evolution
					has_ascension_perk = ap_the_flesh_is_weak
				}
				has_technology = tech_gene_expressions
				count_exact_species = {
					count < 6
					limit = {
						OR = {
							is_same_species = prevprev
							is_subspecies = prevprev
						}
						NOT = { has_trait = trait_self_modified }
					}
				}
			}
		}
	}
	# Can't modify root Species during Ascension Situations
	if = {
		limit = {
			is_same_species = ROOT
		}
		custom_tooltip = {
			fail_text = "ASCENSION_SITUATION_ONGOING"

			ROOT = {
				NOT = {
					any_situation = {
						has_ascension_situation_ongoing = yes
					}
				}
			}
		}
	}
	# Organic Species
	if = {
		limit = {
			OR = {
				is_archetype = BIOLOGICAL
				is_archetype = LITHOID
			}
		}
		custom_tooltip = {
			fail_text = "NEEDS_GENE_TAILORING_OR_INTERGRATED_ANATOMY"

			ROOT = {
				OR = {
					has_technology = tech_gene_tailoring
					has_active_tradition = tr_cybernetics_integrated_anatomy
					has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
				}
			}
		}
	}
	# Robots & Machines
	else_if = {
		limit = {
			OR = {
				is_archetype = ROBOT
				is_archetype = MACHINE
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						AND = { ## organic trying to robomod
							is_individual_machine = no
							is_machine_empire = no
						}
						AND = { ## Machines with origins that delay them
							OR = {
								is_individual_machine = yes
								is_machine_empire = yes
							}
							OR  = {
								has_origin = origin_life_seeded
								has_origin = origin_ocean_machines
								has_origin = origin_void_machines
								has_origin = origin_shattered_ring
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "NEEDS_ROBOT_MODDING"

				ROOT = {
					OR = {
						has_technology = tech_robomodding
						has_technology = tech_robomodding_m
					}
				}
			}
		}
	}
	# Self-Modified
	custom_tooltip = {
		fail_text = "CANNOT_MODIFY_SELF_MODIFIED_SPECIES"
		AND = {
			NOT = {
				has_trait = trait_self_modified
			}
			#is_same_species = root
		}
	}
}

#This = country, suject
#Root = country, overlord
#From = target solar system
#This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
subject_can_expand = {
	root = { has_valid_civic = civic_feudal_realm }
	NAND = {
		is_ai = yes
		AND = {
			exists = overlord
			overlord = { has_origin = origin_imperial_vassal_overlord }
		}
	}
}

#Root = country, attacker
#This = country, target
#This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops or attacking their fleets
can_take_hostile_actions = {
	if = {
		limit = {
			ROOT = {
				NOT = { has_policy_flag = first_contact_attack_allowed }
			}
			NOT = {
				is_hostile = ROOT
				has_communications = ROOT
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		limit = {
			has_country_flag = fotd_seperatist_country@ROOT
			ROOT = {
				has_origin = origin_fear_of_the_dark
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FOTD"
			always = no
		}
	}
	else_if = {
		limit = {
			AND = {
				NOT = { is_hostile = root }
				ROOT = {
					is_country_type = nomad
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		#attacking primitives with non-interference
		limit = {
			ROOT = {
				is_country_type = default
				NOT = {
					has_policy_flag = interference_aggressive
				}
			}
			is_primitive = yes
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NATIVE_INTERFERENCE"
			always = no
		}
	}
	else_if = {
		limit = {
			is_primitive = yes
			ROOT = { is_country_type = default }
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
			is_country_type = faction
			root = {
				any_owned_planet = {
					exists = controller
					controller = {
						is_same_value = prevprevprev
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = yes
		}
	}
	else_if = {
		limit = {
			exists = overlord
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else_if = {
		limit = {
			exists = overlord
			overlord = { is_same_value = root }
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_OVERLORD"
			always = no
		}
	}
	else = {
		always = yes
	}
}

#Root = country, attacker
#This = country, target
#This rule is a condition for declaring war
can_declare_war = {
	custom_tooltip = {
		fail_text = "ACTION_DECLARE_WAR_OVERLORD_ON_SUBJECT"
		NOT = {
			has_overlord = ROOT
		}
	}
	if = {
		limit = {
			exists = root
			ROOT = {
				has_policy_flag = no_wars
				OR = {
					is_subject = no
					overlord = {
						is_same_value = root
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_DECLARE_WAR_POLICY"
			always = no
		}
	}
	if = {
		limit = {
			exists = root
			ROOT = {
				is_ai = yes
			}
		}
		ROOT = {
			is_at_war = no
		}
	}
}

#Root = country
#This = planet
can_colonize_planet = {
	hidden_trigger = {
		exists = root
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_UNDER_INVESTIGATION"
		NOT = { has_planet_flag = planet_under_investigation }
	}
	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_DYSON_SPHERE"
		if = {
			limit = {
				is_artificial = no	# Colonizing habitats is fine
			}
			system_has_dyson_sphere = no
		}
	}
	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_DYSON_SPHERE_CONSTRUCTION"
		if = {
			limit = {
				system_has_dyson_sphere = no
				is_artificial = no	# Colonizing habitats is fine
			}
			NOT = {
				solar_system = {
					has_star_flag = dyson_sphere_construction
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_COSMOGENESIS_EXODUS"
		exists = root
		root = {
			NOT = { owner = { has_event_chain = cosmogenesis_planet_pickup_chain } }
		}
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_CRIMSON_CRAWLERS"

		if = {
			limit = {
				has_modifier = crimson_crawlers
			}
			root = {
				cares_for_crimson_crawlers = yes
			}
		}
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_DEFENDED_PLANET"
		NOT = { has_planet_flag = planet_defended_forbid_colonization }
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_SMEEGIBB_PLANET"
		NOT = { has_planet_flag = cannot_colonize_smeegibb_shelter }
	}

	custom_tooltip = {
		fail_text = "ariphaos_patch_consecrated_world"
		exists = space_owner
		NOT = { has_planet_flag = consecrated@space_owner }
	}
}

#Root = country
#This = planet
can_colonize_outside_borders = {
	always = no
}

#Root = country
#This = planet
can_terraform_planet = {
	custom_tooltip = {
		fail_text = terraform_fail_no_presapient_protection_or_no_presapients
		NAND = {
			AND = {
				exists = root
				root = { has_policy_flag = pre_sapients_protect }
			}
			any_owned_species = { is_sapient = no }
		}
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_devouring_swarm_lithoid"
		exists = root
		root = { is_lithoid_devouring_swarm = no }
	}
	custom_tooltip = {
		fail_text = "legendary_leader_planet_no_terraform"
		exists = root
		this = {
			NOT = { has_planet_flag = legendary_leader_planet }
		}
	}

	custom_tooltip = {
		fail_text = requires_not_relentless_industrialists_situation
		NOT = {
			any_targeting_situation = {
				is_situation_type = relentless_industrialists_situation
			}
		}
	}

	custom_tooltip = {
		fail_text = terraform_fail_is_metal_planet
		NOT = {
			has_modifier = metal_planet
		}
	}

	custom_tooltip = {
		fail_text = COLONIZATION_IMPOSSIBLE_DEFENDED_PLANET
		NOT = { has_planet_flag = planet_defended_forbid_colonization }
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_SMEEGIBB_PLANET"
		NOT = { has_planet_flag = cannot_colonize_smeegibb_shelter }
	}
}

#Root = country
#This = pop
can_colonize_with_pop = {
	has_colonization_control = {
		type = colonization_control_no
		country = root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	has_cybernetic_creed_trait = no
	NOR = {
		has_trait = trait_pathogenic_genes
		has_trait = trait_limited_cybernetic
	}
	if = {
		limit = {
			OR = {
				is_sapient = no
				has_trait = trait_zombie
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}
}

#Root = country
#This = species
can_colonize_with_species = {
	has_colonization_control = {
		type = colonization_control_no
		country = root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			OR = {
				is_sapient = no
				has_trait = trait_zombie
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else_if = {
		limit = { has_trait = trait_hive_mind }
		root = { is_hive_empire = yes }
	}
	else = {
		always = yes
	}
}

# Root = Pop
# From = Country
# This = Pop
# NOTE: species_has_happiness is also checked for this
pop_has_random_ethics = {
	exists = from
	NOT = {
		has_citizenship_type = {
			country = from
			type = citizenship_organic_trophy
		}
	}
}

# Root = Species
# From = Country
# This = Species
species_has_happiness = {
	NOR = {
		AND = {
			has_trait = trait_machine_unit
			exists = from
			from = { is_machine_empire = yes }
		}
		has_trait = trait_hive_mind
		can_think = no
		AND = {
			has_trait = trait_mechanical
			OR = {
				NOT = { exists = from }
				from = { is_machine_empire = yes }
				from = { NOT = { has_technology = tech_synthetic_workers } }
				from = { has_policy_flag = ai_outlawed }
			}
		}
		AND = {
			has_trait = trait_cybernetic
			exists = from
			from = {
				OR = {
					AND = {
						is_machine_empire = yes
						has_civic = civic_machine_assimilator # Assimilator empire
					}
					AND = {
						is_democratic_authority = yes
						has_country_flag = cyber_collectivist
					}
				}
			}
		}
	}
}

#Root = country, us
#This = country, them
#This rule is a condition for determining if a country is hostile towards another. not to be confused with can_take_hostile_action
can_be_hostile_towards = {
	if = {
		limit = { is_primitive = yes }
		ROOT = {
			NOR = {
				has_policy_flag = interference_not_allowed
				has_policy_flag = interference_subtle
			}
		}
	}
	else_if = {
		limit = { ROOT = { is_primitive = yes } }
		NOR = {
			has_policy_flag = interference_not_allowed
			has_policy_flag = interference_subtle
		}
	}
	else_if = {
		limit = { is_country_type = ratlings }
		always = yes
	}
}

# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	is_sapient = yes
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_mechanical
		has_trait = trait_limited_cybernetic
	}
	NAND = {
		root = { has_modifier = slave_colony }
		NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
	}
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					species_can_be_necrophaged = yes
				}
			}
		}
	}
	NOT = { has_species_flag = nivlac_no_procreation }
	if = {
		limit = {
			has_cybernetic_creed_trait = yes
		}
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					is_robotic_species = no
					has_cybernetic_creed_trait = no
				}
			}
		}
	}
	if = {
		limit = {
			has_cybernetic_creed_trait = no
		}
		root = {
			any_owned_species = {
				has_population_control = { country = root.owner type = no }
				is_robotic_species = no
				has_cybernetic_creed_trait = no
			}
		}
	}
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOT = {
		has_trait = trait_exd
	}
	NOT = {
		AND = {
			has_trait = trait_mechanical
			root.owner = { is_individual_machine = yes }
		}
	}
	NOT = {
		AND = {
			has_virtual_species_trait = yes
			root.owner = {
				is_fallen_empire = no
				has_active_tradition = tr_virtuality_finish
			}
		}
	}
	OR = {
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
				owner = {
					NOT = { has_country_flag = synth_assembly_stopped }
				}
			}
		}
		AND = {
			is_organic_species = yes
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				has_trait = trait_hive_mind
			}
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					has_building = building_clone_army_clone_vat
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			else = {
				root = {
					OR = {
						has_building = building_clone_vats
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
				}
			}
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
}

#Root = country
#From = species
founder_species_uses_growth_speed = {
	exists = from
	from = {
		is_robotic_species = no
		is_infertile = no
	}
}

founder_species_uses_organic_assembly = {
	exists = from
	from = {
		is_robotic_species = no
		is_infertile = yes
	}
}

founder_species_uses_assembly = {
	exists = from
	from = {
		is_robotic_species = yes
	}
}

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	NOT = {
		any_controlled_ship = {
			is_ship_size = colossus
		}
	}
	OR = {
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_not_allowed
					has_policy_flag = interference_subtle
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		# Risa fix.
		ROOT.CONTROLLER = { is_hostile = FROM.CONTROLLER }
		ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
		FROM = { is_planet_class = pc_infested }
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					ROOT.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		ROOT.CONTROLLER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = debt_collectors
				is_country_type = gray_goo
				is_country_type = vol
				AND = {
					is_country_type = frenzied_voidworms
					has_country_flag = can_bombard
					FROM.CONTROLLER = { has_country_flag = tormented_by_frenzied_voidworms }
				}
				AND = {
					OR = {
						is_country_type = awakened_marauders
						is_country_type = formless
					}
					FROM.CONTROLLER = { is_hostile = prev }
				}
				AND = {
					is_voidworms_hostile_country_type = yes
					ROOT = {
						is_ship_size = voidworms_titan
					}
				}
			}
		}
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = ROOT.CONTROLLER }
			}
			from.owner = {
				is_same_value = ROOT.CONTROLLER
			}
		}
	}
}

#Check if it is possible to build orbital stations on this planet
#this: planet
#root: country
can_planet_support_orbital_station = {
	custom_tooltip = {
		fail_text = "ORBITAL_STATION_ALREADY_EXISTS"
		has_any_megastructure = no
		NOT = { has_planet_flag = has_megastructure }
	}
}

# Check if full sensor range in entire galaxy
# root: country
has_full_sensor_range = {
	OR = {
		has_megastructure = spy_orb_4
		has_megastructure = spy_orb_restored
	}
}

# Determines if notification messages should be sent after a ground combat
# this: planet
# from: winner
# root: loser
show_notification_for_ground_combat = {
	NOT = { has_planet_flag = slave_revolt }
}

# Determines if the "per_neighbor_rival" static modifier should be applied to an empire
# this: country
should_apply_neighbor_rival_modifier = {
	has_tradition = tr_enmity_adopt
}

#Root: Rebelling against country
#This: Rebel country
are_rebels_hostile = {
	is_country_type = rebel	#Rebels change country type after taking their initial planet (action.30)
}

#Root: planet
should_colony_be_destroyed_on_pc_change = {
	is_planet_class = pc_infested
}

# Is the given fleet the portal for given extradimensional country
# root: country (ED)
# this: fleet
is_extradimensional_portal = { # is this portal mine
	is_ship_size = dimensional_portal_ed
	OR = {
		owner = { is_same_value = root } # owner is me
		OR = {
			AND = { # portal is unbidden and I am unbidden
				root = { is_country_type = extradimensional }
				any_controlled_ship = { has_ship_flag = unbidden_portal }
			}
			AND = { # portal is aberrant and I am aberrant
				root = { is_country_type = extradimensional_2 }
				any_controlled_ship = { has_ship_flag = aberrant_portal }
			}
			AND = { # portal is vehement and I am vehement
				root = { is_country_type = extradimensional_3 }
				any_controlled_ship = { has_ship_flag = vehement_portal }
			}
		}
	}
}

# Is the given fleet an anchor for given extradimensional country
# root: country (ED)
# this: fleet
is_extradimensional_anchor = {
	root = {
		OR = {
			is_country_type = extradimensional
			is_country_type = extradimensional_2
			is_country_type = extradimensional_3
			is_country_type = formless
		}
	}
	any_controlled_ship = { is_ship_size = starbase_exd }
	owner = { is_same_value = root }
}

# Will colonizing this planet tick off a fallen empire?
# Root = fallen empire
# This = planet
will_anger_fallen_empire = {
	OR = {
		AND = {
			root = { has_ai_personality_behaviour = demands_clear_borders }
			is_neighbor_of = root
		}
		AND = {
			root = { has_ai_personality_behaviour = holy_planets }
			has_modifier = "holy_planet"
			space_owner = {
				NOT = { has_relic = r_severed_head }
			}
		}
	}
}

# Can the country have robot pop
# root: country
can_have_robot_pops = {
	exists = this
	is_hive_empire = no
	NOT = { has_policy_flag = robots_outlawed }
}

# Can purge/disassembly be individually stopped by owner
# scope: pop
can_stop_purge_pop_manually = {
	custom_tooltip = {
		fail_text = "ENTIRE_SPECIES_BEING_PURGED"
		NOT = { has_citizenship_type = { type = citizenship_purge country = owner } }
	}
}

# Can the pop be purged/disassembled individually by its owner
# scope: pop
can_purge_pop_manually = {
	custom_tooltip = {
		fail_text = "ALREADY_BEING_PURGED"
		NOT = { has_citizenship_type = { type = citizenship_purge country = owner } }
	}
	custom_tooltip = {
		fail_text = "ACTION_CANNOT_PURGE_CITIZEN"
		exists = owner
		OR = {
			is_robot_pop = yes
			is_sapient = no
			owner = { is_hive_empire = yes }
			has_citizenship_type = { type = citizenship_slavery country = owner }
			has_citizenship_type = { type = citizenship_full_machine country = owner }
		}
	}
	custom_tooltip = {
		fail_text = "ACTION_CANNOT_PURGE_POLICY"
		exists = owner
		OR = {
			is_robot_pop = yes
			AND = {
				is_sapient = no
				owner = { NOT = { has_policy_flag = pre_sapients_protect } }
			}
			owner = { has_ethic = ethic_gestalt_consciousness }
			owner = { has_policy_flag = purge_allowed }
		}
	}
	custom_tooltip = {
		fail_text = "ACTION_DISASSEMBLE_SYNTHETICS"
		exists = owner
		OR = {
			is_robot_pop = no
			owner = { is_hive_empire = yes }
			NAND = {
				has_trait = trait_mechanical
				owner = { has_policy_flag = ai_full_rights }
			}
		}
	}
}

# THIS = Fleet
fleet_uses_templates = {
	is_ship_class = shipclass_military
	is_designable = yes
	is_alliance_fleet = no
}

# this = starbase, megastructure or planet
can_orbitable_repair_ships = {
	OR = {
		AND = {
			is_scope_type = starbase
			OR = {
				has_starbase_size >= starbase_starport
				has_starbase_size = juggernaut
				has_starbase_size = enclave_mercenary_station
			}
			fleet = {
				is_disabled = no
			}
		}
		AND = {
			is_scope_type = megastructure
			OR = {
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
			}
		}
	}
}

# this = ship
# root = country that kills ship
can_spawn_debris = {
	root = { is_country_type = default }
	exists = owner
	owner = { NOT = { has_ascension_perk = ap_enigmatic_engineering } }
}

# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# Used by regular empires, fallen empires & crises
# Add new guardians, crystal home system
ai_should_restrict_system = {
	OR = {
		AND = {
			root = {
				OR = {
					is_country_type = caravaneer_fleet
					is_country_type = fallen_empire
				}
			}
			exists = owner
			owner = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = dormant_marauders
				}
			}
		}
		AND = {
			root = { is_country_type = voidworms }
			exists = owner
			owner = {
				OR = {
					is_country_type = dormant_marauders
					is_country_type = awakened_marauders
				}
			}
		}
		AND = {
			root = { 
				OR = {
					is_country_type = caravaneer_fleet
					is_country_type = awakened_marauders 
					is_country_type = marauder_raiders # Doesn't actually work but I register my protest anyway.
				}
			}
			exists = owner
			owner = { is_country_type = fallen_empire }
		}
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders
					is_country_type = voidworms
					is_country_type = caravaneer_fleet
					ariphaos_patch_fleet_huge = no
				}
			}
			OR = {
				AND = {
					has_star_flag = crystal_home_system
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_country_type = crystal
							is_hostile_to = root
						}
					}
				}
				AND = {
					has_star_flag = great_wound
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_hostile_to = root
							is_country_type = cloud
						}
					}
				}
				AND = {
					has_star_flag = amoeba_home_system
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_hostile_to = root
							is_country_type = amoeba_garrison
						}
					}
				}
				AND = {
					has_star_flag = drone_home_system
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_hostile_to = root
							is_country_type = drone
						}
					}
				}
				AND = {
					has_star_flag = guardian
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_guardian_country = yes
							is_hostile_to = root
						}
					}
				}
			}
		}
		AND = {
			root = {
				OR = {
					is_crisis_faction = yes
					is_country_type = awakened_fallen_empire
					is_country_type = default
				}
			}
			has_star_flag = guardian
			any_fleet_in_system = {
				exists = owner
				owner = {
					is_country_type = guardian_fortress
				}
			}
		}
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = marauder_raiders
					is_country_type = caravaneer_fleet
					AND = {
						is_country_type = default
						ariphaos_patch_fleet_huge = no
					}
				}
			}
			OR = {
				has_star_flag = lgate
				has_star_flag = lcluster
			}
			has_global_flag = gray_goo_crisis_active
		}
	}
}

# this = country
can_subjugate_empires = {
	always = yes
}

# this = leader
can_leader_get_council_trait = {
	# See 03_scripted_triggers_paragon.txt
	can_leader_get_council_trait_trigger = yes
}

# this = leader
can_leader_get_normal_trait = {
	NOR = {
		AND = {
			exists = owner
			owner = { is_gestalt = yes }
			OR = {
				is_councilor = yes
				has_leader_flag = restored_node
			}
		}
		AND = {
			has_global_flag = game_started
			is_ruler = yes
			exists = owner
			owner = {
				is_autocracy = yes
			}
			NOT = { has_leader_flag = ignore_autocracy_ruler_trait_restriction }
		}
		is_heir = yes
	}
}

# this = leader
can_leader_get_subclass_trait = {
	NAND = {
		exists = owner
		owner = { is_gestalt = yes }
		OR = {
			is_councilor = yes
			has_leader_flag = restored_node
		}
	}
	has_any_subclass = no
}

# this = leader
can_leader_get_destiny_trait = {
	NAND = {
		exists = owner
		owner = { is_gestalt = yes }
	}
	exists = owner
	owner = {
		is_crisis_faction = no
	}
}

# this = country
has_extra_council_position = {
	country_has_extra_council_position = yes
}

# THIS = Fleet
can_jump_drive = {
	always = yes	# Moved cooldown to code
}

# this = country
can_spawn_occupation_armies = {
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
	}
}

# this = system
# root = country
system_blocks_sensors = {
	OR = {
		is_inside_nebula = yes
		has_modifier = space_storm
		has_modifier = zroni_storm
		has_modifier = queen_scorn_storm
		has_star_flag = lcluster
		has_star_flag = sealed_system
		has_star_flag = storm_system
	}
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
#		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster
		NOT = { has_star_flag = lcluster }

		# Formless system
		NOT = { has_star_flag = formless_system }
	}
}

# This = pop
can_resettle_pop = {
	# Self-modified Pops won't leave
	custom_tooltip = {
		fail_text = "self_modified_refuse"
		NAND = {
			has_trait = trait_self_modified
			is_enslaved = no
		}
	}
	# Pathogenic Pops Can't Resettle
	custom_tooltip = {
		fail_text = "pathogenic_genes_warning"
		NOT = { has_trait = trait_pathogenic_genes }
	}
	custom_tooltip = {
		fail_text = "origin_egalitarian_refuse"
		NAND = {
			pop_has_ethic = ethic_egalitarian
			is_enslaved = no
			planet = { has_modifier = paragon_origin_reformists }
		}
	}
	custom_tooltip = {
		fail_text = "no_resettling_apps"
		if = {
			limit = {
				has_virtual_species_trait = yes
			}
			exists = owner
			owner = {
				is_fallen_empire = no
				NOT = {
					has_active_tradition = tr_virtuality_adopt
				}
			}
		}
	}
	if = { #Done as an IF/ELSE so the tooltip isn't hideous and unreadable
		limit = { is_shackled_robot = yes }
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				is_doomsday_planet = yes
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	else_if = {
		limit = {
			planet = {
				is_capital = yes
				num_pops < 2
			}
			NOT = {
				owner = {
					any_owned_planet = {
						is_capital = no
						NOT = {
							is_planet_class = pc_cosmogenesis_world
						}
					}
				}
			}
		}
		custom_tooltip = {
			fail_text = "no_abandon_capital_for_unviable_planet"
			always = no
		}
	}
	else_if = {
		limit = {
			planet = {
				is_planet_class = pc_cosmogenesis_world
				owner = {
					has_ascension_perk = ap_cosmogenesis
				}
				num_pops < 2
			}
		}
		custom_tooltip = {
			fail_text = "no_unfueled_lathe"
			always = no
		}
	}
	else_if = {
		limit = {
			planet = {
				has_deposit = d_genesis_preserve
				count_owned_pop = {
					limit = { is_sapient = yes }
					count < 2
				}
			}
			owner = {
				is_guided_sapience_empire = yes
			}
		}
		custom_tooltip = {
			fail_text = "no_abandon_genesis_preserve"
			always = no
		}
	}
	else_if = {
		limit = {
			owner = {
				has_ascension_perk = ap_cosmogenesis
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			owner = {
				is_gestalt = yes
			}
		}
		always = yes
	}
	else = {
		custom_tooltip = {
			fail_text = RESETTLEMENT_POLICY_FAIL
			owner = {
				has_policy_flag = resettlement_allowed
			}
		}
	}
}

can_country_resettle = {
	OR = {
		has_policy_flag = resettlement_allowed
		is_gestalt = yes
		has_ascension_perk = ap_cosmogenesis
		custom_tooltip = {
			text = owns_non_sapient_robots
			country_has_shackled_robots = yes
		}
		hidden_trigger = { #don't need to show this as tooltip only shown when all game rule fails, and this is a special case
			any_owned_planet = {
				is_doomsday_planet = yes
			}
		}
	}
}

# This = Planet
can_resettle_planet = {
	owner = {
		OR = {
			has_policy_flag = resettlement_allowed
			is_gestalt = yes
			country_has_shackled_robots = yes
			has_ascension_perk = ap_cosmogenesis
			any_owned_planet = {
				is_doomsday_planet = yes
			}
		}
	}
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}
}

can_resettle_planet_no_owner_check = {
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}
}

# This = Planet
should_spawn_deposits = {
	is_artificial = no
}

# This = Planet
can_get_colony_events = {
	NOT = {
		is_planet_class = "pc_cosmogenesis_world"
	}
}

# This = Planet
is_new_colony = {
	NOT = {
		has_planet_flag = synth_queen_bastille
	}
	colony_age < 180
	num_pops < 10
}

# This = pop
pop_generates_crime = {
	is_sapient = yes
	is_non_sapient_robot = no
	is_being_assimilated = no
}

# This = planet
can_pops_grow_on_planet = {
	NOR = {
		has_modifier = planet_population_control
		has_modifier = planet_population_control_gestalt
		is_planet_class = pc_cosmogenesis_world
		is_planet_class = pc_nanotech
		AND = { # conquered by crisis
			exists = controller
			controller = {
				OR = {
					is_country_type = ai_empire
					is_country_type = swarm
				}
			}
		}
	}
}

# This = planet
can_pops_assemble_on_planet = {
	NOR = {
		has_modifier = planet_robot_assembly_control
		has_modifier = planet_population_control_gestalt
		is_planet_class = pc_cosmogenesis_world
		AND = { # conquered by crisis
			exists = controller
			controller = {
				OR = {
					is_country_type = ai_empire
					is_country_type = swarm
				}
			}
		}
	}
}

# This = planet
can_pops_decline_on_planet = {
	always = yes
}

# This = planet
# Root = country
can_force_grow_on_planet = {
	custom_tooltip = {
		fail_text = FORCE_GROWTH_NEEDS_POP_CONTROLS
		exists = owner
		owner = { NOT = { has_policy_flag = population_controls_not_allowed } }
		NOT = { is_planet_class = pc_cosmogenesis_world }
	}
}

# This = planet
# Root = country
can_force_decline_on_planet = {
	custom_tooltip = {
		fail_text = FORCE_DECLINE_NEEDS_POP_CONTROLS
		exists = owner
		owner = { NOT = { has_policy_flag = population_controls_not_allowed } }
	}
	custom_tooltip = {
		fail_text = FORCED_DECLINE_ALREADY_PURGING
		NOT = {
			any_owned_species = {
				has_citizenship_type = { type = citizenship_purge country = root }
				NOT = { has_purge_type = { country = root type = purge_neutering } }
			}
		}
	}
}

# This = species
# Root = country
can_force_decline_species = {
	OR = {
		has_citizenship_type = { country = root type = citizenship_slavery }
		has_citizenship_type = { country = root type = citizenship_robot_servitude }
	}
}

## If this returns true, the species will be set to decline even if it is not being purged
# This = species
# From = planet
## Note: success text tooltips are shown in alert_pops_declining alert.
should_force_decline_species = {
	OR = {
		# Infertile Clone Army pops should decline if in Country that can't have Vats, or there is a Vat shortage.
		custom_tooltip = {
			success_text = CLONE_ARMY_FORCE_DECLINE
			exists = this
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
			from = {
				OR = {
					# Check if country is unable to build Vats for this species.
					AND = {
						exists = owner
						owner = {
							OR = {
								NOT = { has_origin = origin_clone_army }					# Can't have Vats.
								has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
								NOT = { owner_main_species = { is_same_species = root } }	# Our Vats can't build this species.
							}
						}
					}
					# Vats check out, but are there more pops than Vats support?
					check_variable = { which = clone_pops_missing value < 0 }
				}
			}
		}
		# This slowly kills off the Syntheic Fertility Species
		custom_tooltip = {
			success_text = PATHOGENIC_GENES_FORCE_DECLINE
			exists = this
			has_trait = trait_pathogenic_genes
		}
	}
}

# This = country
can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		OR = {
			is_megacorp = yes
			has_civic = civic_galactic_sovereign_megacorp
		}
	}
}

# This = country
can_support_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		NOR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET
		NOR = {
			is_megacorp = yes
			has_civic = civic_galactic_sovereign_megacorp
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_REGULAR_EMPIRE
		is_gestalt = no
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ADVANCED_PRE_FTL
		if = {
			limit = {
				is_primitive = yes
				is_gestalt = no
			}
			OR = {
				has_pre_ftl_age = atomic_age
				has_pre_ftl_age = early_space_age
			}
		}
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
		if = {
			limit = {
				root = { is_criminal_syndicate = yes }
				owner = { is_primitive = yes }
			}
			has_observation_outpost = yes
			observation_outpost_owner = {
				is_same_value = root
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			AND = {
				has_observation_outpost = yes
				observation_outpost = {
					has_modifier = preftl_action_trade_pact
				}
			}

			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			root = {
				is_subject = yes
				OR = {
					is_megacorp = yes
					has_civic = civic_galactic_sovereign_megacorp
				}
				overlord = {
					OR = {
						is_same_value = prevprev.owner
						is_same_value = prevprev.owner.overlord
					}
				}
			}
			owner = {
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						is_megacorp = yes
						has_civic = civic_galactic_sovereign_megacorp
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
		exists = owner
		# failure message for having a corporate overlord

		if = {
			limit = {
				OR = {
					# Not valid if you aren't a subject.
					root = {
						is_subject = no
					}
					# Or if your overlord isn't a megacorp.
					root = {
						is_subject = yes
						overlord = {
							NOR = {
								is_megacorp = yes
								has_civic = civic_galactic_sovereign_megacorp
							}
						}
					}
				}
			}
			always = yes
		}
		else = {
			AND = {
				root = {
					is_subject = yes
					overlord = {
						OR = {
							is_megacorp = yes
							has_civic = civic_galactic_sovereign_megacorp
						}
					}
				}
				owner = {
					OR = {
						is_subject = no
						AND = {
							is_subject = yes
							overlord = { NOT = { is_same_value = root.overlord } }
						}
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}
	custom_tooltip = {
		fail_text = NO_BRANCH_OFFICE_ON_NANITE_WORLD
		NOT = { is_planet_class = pc_gray_goo }
	}
	custom_tooltip = {
		fail_text = NO_BRANCH_OFFICE_ON_SYNAPTIC_LATHE
		NOT = { is_planet_class = pc_cosmogenesis_world }
	}
}

# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = {
	OR = {
		is_megacorp = yes
		has_valid_civic = civic_galactic_sovereign_megacorp
	}
	has_valid_civic = civic_criminal_heritage
}

# This = planet
can_crossbreed_species_on_planet = {
	exists = owner
	owner = { has_ascension_perk = ap_xeno_compatibility }
	count_species = {
		limit = {
			is_crossbreeding_possible = yes
		}
		count >= 2
	}
}

# This = species one
# Root = species two
can_crossbreed_species = {
	is_crossbreeding_possible = yes
	root = { is_crossbreeding_possible = yes }
	NOR = {
		is_subspecies = root
		root = { is_subspecies = prev }
	}
}

# No scope
can_win_timed_victory = {
	custom_tooltip = {
		fail_text = VICTORY_CONDITION_CRISIS_IN_PROGRESS
		NOT = {
			any_country = {
				is_crisis_faction = yes
				NOT = { is_country_type = awakened_marauders }
			}
		}
	}
	custom_tooltip = {
		fail_text = VICTORY_CONDITION_WAR_IN_HEAVEN_IN_PROGRESS
		NOT = { has_global_flag = war_in_heaven_ongoing }
	}
}

# This = country
can_use_galactic_market = {
	is_country_type = default
	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator
	}
}

# ROOT = country
# THIS = pop
can_be_sold_on_slave_market = {
	exists = owner
	OR = {
		is_enslaved = yes
		is_non_sapient_robot = yes
		is_shackled_robot = yes
		is_being_purged = yes
	}
	OR ={
		ROOT = { is_ai = no }
		is_on_slave_market = yes	# pops that were already on the market should stay there
		AND = {
			is_unemployed = yes
			is_being_assimilated = no
			planet = {
				num_unemployed > 2
			}
			OR = {
				NOT = { has_trait = trait_syncretic_proles }
				ROOT = { NOT = { has_origin = origin_syncretic_evolution } }
			}
		}
	}
	if = {
		limit = {
			has_global_flag = organic_slave_trade_banned_flag
		}
		is_organic_species = no
	}
	if = {
		limit = {
			has_global_flag = sentient_slave_trade_banned_flag
		}
		is_sapient = no
	}
	NOR = {
		# Since they can't reproduce, they die out too fast for anyone to want to buy them.
		has_trait = trait_clone_soldier_infertile
		has_trait = trait_clone_soldier_infertile_full_potential
		has_virtual_species_trait = yes
	}
}

# This = country
can_be_part_of_galactic_community = {
	custom_tooltip = {
		fail_text = "community_default_failtext"
		is_country_type = default
	}
	custom_tooltip = {
		fail_text = "community_homicidal_failtext"
		NOR = {
			has_civic = civic_fanatic_purifiers
			has_civic = civic_hive_devouring_swarm
			has_civic = civic_machine_terminator
		}
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		has_been_declared_crisis = no
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		#fail_text = "community_overlord_declared_crisis_failtext"
		OR = {
			NOT = { exists = overlord }
			overlord = { has_been_declared_crisis = no }
		}
	}
}

# This = country
can_be_part_of_galactic_empire = {
	custom_tooltip = {
		fail_text = "community_default_failtext"
		is_country_type = default
	}
	custom_tooltip = {
		fail_text = "community_homicidal_failtext"
		NOR = {
			has_civic = civic_fanatic_purifiers
			has_civic = civic_hive_devouring_swarm
			has_civic = civic_machine_terminator
		}
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		has_been_declared_crisis = no
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		#fail_text = "community_overlord_declared_crisis_failtext"
		OR = {
			NOT = { exists = overlord }
			overlord = { has_been_declared_crisis = no }
		}
	}
}

# This = country
can_see_galactic_community = {
	OR = {
		has_country_flag = galcom_form_aye
		has_country_flag = galcom_form_nay
		is_galactic_community_member = yes
	}
}

# This = country
can_be_part_of_galactic_council = {
	is_country_type = default
	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator
	}
}

# If, 'yes', forces an empire to be advanced at game start (overrides game settings)
# This = country
must_be_advanced_empire = {
	OR = {
		has_country_flag = lost_colony_parent
		has_country_flag = MSI
	}
}

# If 'no', blocks an empire from being advanced at game start (overrides 'must_be_advanced_empire' above)
# This = country
is_allowed_to_be_advanced_empire = {
	always = yes
}

# This = planet
has_enough_pops_for_necrophage_on_planet = {
	owner = { has_origin = origin_necrophage }
	has_available_jobs = necro_apprentice
	if = {
		limit = {
			has_planet_flag = necrophage_alert_timer
		}
		count_owned_species = {
			count = 0
			limit = { species_can_be_necrophaged = yes }
		}
	}
	else = {
		NOT = { any_owned_pop = { can_work_specific_job = necro_apprentice } }
	}
}

# Root = current planet
# This = pop
# Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
can_pop_auto_migrate = {
	hidden_trigger = { is_unemployed = yes } #this is always true where this tooltip is called
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ASSIMILATED
		is_being_assimilated = no
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_VIRTUALITY
		OR = {
			has_virtual_species_trait = no
			AND = {
				has_virtual_species_trait = yes
				exists = owner
				owner = {
					OR = {
						is_individual_machine = no
						is_machine_empire = no
					}
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_shackled_robot = yes
				is_enslaved = yes
			}
		}
		custom_tooltip = {
			fail_text = AUTO_MIGRATE_SLAVE_PROCESSING
			OR = {
				planet = {
					OR = {
						has_building = building_slave_processing
						AND = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = {
									has_starbase_building = ring_slave_processing_facility
								}
							}
						}
					}
				}
				solar_system = {
					count_starbase_buildings = {
						type = transit_hub
						count >= 1
						include_being_constructed = no
					}
				}
			}
		}
	}
}

# This = planet
# Checked before can_pop_auto_migrate to save performance
can_planet_auto_migrate = {
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_CULTURE_SHOCK
		NOT = { has_modifier = planet_culture_shock }
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_COLONY_TOO_NEW
		OR = {
			colony_age > 60
			is_capital = yes # Don't break Doomsday!
		}
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ONLY_HAS_ONE_POP
		num_sapient_pops > 1
	}
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_country_type = default
				is_country_type = awakened_fallen_empire
			}
		}
	}
}

can_planet_receive_auto_migration = {
	NOR = {
		planet_devastation >= 10
		has_modifier = planet_culture_shock
		is_doomsday_planet = yes
		is_planet_class = pc_cosmogenesis_world
	}
}

#This, root = country
can_gene_mod_habitability = {
	always = yes
	# See can_change_habitability_preference in 05__scripted_triggered_traits.txt
}

#This, root = country
can_add_advanced_traits = {
	has_utopia = yes
	has_tradition = tr_genetics_enhanced_expression
}

#This, root = country
can_add_negative_traits_organic = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_resequencing
		has_active_tradition = tr_cybernetics_integrated_anatomy
		has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
	}
}

#This, root = country
can_remove_positive_traits_organic = {
	OR = {
		AND = {
			has_utopia = yes
			OR = {
				has_tradition = tr_genetics_resequencing
				has_active_tradition = tr_cybernetics_integrated_anatomy
				has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
			}
		}
		AND = {
			has_toxoids = yes
			has_origin = origin_overtuned
		}
		has_technology = tech_epigenetic_triggers
	}
}

#This, root = country
can_modify_organic_portraits = {
	has_utopia = yes
	has_tradition = tr_genetics_enhanced_expression
}

# This = country establishing contact | From = target country
# Final check for whether there should be a first contact site spawned. Main check is via country type 'contact_rule', in code. See also: error-logging/fixing event 'action.240', which duplicates this trigger.
can_have_first_contact = {
	if = {
		limit = { from = { is_amoeba_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_amoeba_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_tiyanki_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_tiyanki_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_cutholoids_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_cutholoids_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_voidworms_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_voidworms_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_crystal_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = {
					is_crystal_country_type = yes
					NOT = { has_country_flag = queued_to_destroy }
				}
			}
		}
	}
	else_if = {
		limit = { from = { is_drone_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = {
					is_drone_country_type = yes
					NOT = { has_country_flag = queued_to_destroy }
				}
			}
		}
	}
	else_if = {
		limit = { from = { is_country_type = cloud } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_country_type = cloud }
			}
		}
	}
	else_if = {
		limit = {
			from = {
				OR = {
					is_country_type = caravaneer_fleet
					is_country_type = caravaneer_home
				}
			}
		}
		NOT = {
			any_active_first_contact = {
				contact_country = {
					OR = {
						is_country_type = caravaneer_fleet
						is_country_type = caravaneer_home
					}
				}
			}
		}
	}
	else_if = {
		limit = {
			from = {
				is_country_type = dragon_dummy
			}
		}
		has_origin = origin_here_be_dragons
		from = { has_country_flag = dragon_of@prev }
	}
	else_if = {
		limit = {
			from = {
				is_country_type = jaunting_traveler_dummy
			}
		}
		from = { has_country_flag = jaunting_traveler_of@prev }
	}
}

# Root = Country with envoys to send
# This = Imperium leader country
can_use_envoys_to_raise_imperial_authority = {
	always = yes
}

# Root = Country with envoys to send
# This = Imperium leader country
can_use_envoys_to_lower_imperial_authority = {
	custom_tooltip = {
		fail_text = cannot_lower_authority_emperor
		root = { is_galactic_emperor = no }
	}
	custom_tooltip = {
		fail_text = cannot_lower_authority_espionage_operation
		root = {
			NOT = { has_modifier = undermining_efforts_stalled }
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_drone_job
can_fill_drone_job = {
	custom_tooltip = DRONE_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		is_being_purged = no
		is_enslaved = no
		is_being_assimilated = no
		NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	custom_tooltip = WORKER_JOB_TRIGGER
	hidden_trigger = {
		if = {
			limit = {
				planet = {
					is_planet_class = pc_cosmogenesis_world #Everyone can become a chip slave
				}
			}
			always = yes
		}
		else = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_being_purged = no
			is_being_assimilated = no
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			NAND = {
				has_citizenship_type = { type = citizenship_slavery }
				OR = {
					has_slavery_type = { type = slavery_livestock }
					has_slavery_type = { type = slavery_matrix }
				}
			}
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_worker = yes
			}
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_specialist_job
can_fill_specialist_job = {
	can_fill_specialist_job_trigger = yes
	# Defined in 01_scripted_triggers_jobs.txt
}

#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
			# Rule out Traits for servitude & lack of free will
			NOR = {
				has_trait = trait_syncretic_proles
				can_think = no
			}
			# Rule out Machine Pops, unless they're rendered sapient
			OR = {
				NOT = { has_trait = trait_mechanical }
				AND = {
					owner = { has_technology = tech_synthetic_workers }
					owner = { has_policy_flag = ai_full_rights }
				}
			}
			# Rule out Organic Trophies
			NOT = {
				has_citizenship_type = {
					type = citizenship_organic_trophy
					country = owner
				}
			}
			# Rule out violations of the 'Right to Work' Resolution (prioritises organic workers)
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_precursor_job
can_fill_precursor_job = {
	custom_tooltip = SPECIALIST_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_fallen_empire = yes }
	}
}

# Checks whether the game should try and build a building or district on a planet via scripts in common/colony_automation
# Does not apply to "emergency building" (colony_automation_exceptions)
# this = planet
should_planetary_automate = {
	always = yes
}

dismiss_leader_cost = {
	base = 0
}

# this = leader
can_dismiss_leader = {
	if = {
		limit = {
			leader_class = commander
			is_idle = no
			# Rulers and heirs can't be dismissed any way and can be non-idle
			is_ruler = no
			is_heir = no
		}
		custom_tooltip = {
			fail_text = "requires_fleet_control"
			exists = fleet
			fleet = {
				controller = {
					is_same_value = prev.owner
					is_same_value = prevprev.owner
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_heir = yes
				is_ruler = yes
			}
		}
		custom_tooltip = {
			always = no
			fail_text = "can_not_dismiss_rulers"
		}
	}

	if = {
		limit = {
			leader_class = scientist
		}
		custom_tooltip = {
			fail_text = "can_not_dismiss_rift_explorer"
			NAND = {
				exists = fleet
				fleet = {
					has_fleet_order = explore_astral_rift_fleet_order
				}
			}
		}
	}
	if = {
		limit = {
			leader_class = commander
		}
		custom_tooltip = {
			fail_text = "no_dismissing_tacs"
			NOT = { has_trait = leader_trait_tactical_algorithms }
		}
	}
}

# this = country
can_country_change_councilors = {
	is_gestalt = no
}

# this = leader
should_count_towards_leader_cap = {
	NOR = {
		leader_class = envoy
		is_hidden = yes
		has_leader_flag = hired_admiral_merc_leader
		has_leader_flag = legendary_leader
		has_leader_flag = should_not_have_upkeep
		has_trait = leader_trait_rift_warped
		AND = {
			has_trait_tier1or2 = { TRAIT = leader_trait_eager }
			has_skill < 4
		}
		AND = {
			is_ruler = yes
			OR = {
				has_trait = leader_trait_ruler_machine_intelligence
				has_trait = leader_trait_ruler_hive_mind
			}
		}
	}
}

# From = country, country that tries to connect using relay network
# ROOT/This = country, target country to connect to using relay network
can_country_connect_to_relay_network = {
	AND = {
		is_primitive = no
		OR = {
			is_country_type = default
			is_country_type = awakened_fallen_empire
			is_country_type = fallen_empire
			is_country_type = awakened_marauders
		}
		OR = {
			from = { is_same_value = root }
			is_in_federation_with = from
			has_overlord = from
			from = { has_overlord = root }
		}
	}
}

# this = planet
should_ai_build_stronghold_on_vulnerable_planet = {
	planet_stability > 50
	OR = {
		AND = {
			num_pops <= 5
			num_buildings = { type = building_stronghold value < 1 }
		}
		AND = {
			num_pops <= 10
			num_buildings = { type = building_stronghold value < 2 }
		}
		AND = {
			num_pops <= 15
			num_buildings = { type = building_stronghold value < 3 }
		}
		AND = {
			num_pops <= 25
			num_buildings = { type = building_stronghold value < 4 }
		}
	}

	exists = sector
	sector = {
		NOT = { has_sector_type = core_sector }
	}

	IF = {
		LIMIT = {
			exists = owner
			owner = { is_gestalt = yes }
		}
		NOT = { has_available_jobs = warrior_drone }
		any_owned_pop = {
			is_unemployed = yes
			can_work_specific_job = warrior_drone
		}
	}
	ELSE = {
		NOT = { has_available_jobs = soldier }
		any_owned_pop = {
			is_unemployed = yes
			can_work_specific_job = soldier
		}
	}
}

# This = leader
will_leader_retire = {
	exists = owner
	not = { has_leader_flag = use_unspecific_death_reason }
	owner = {
		not = { has_ethic = ethic_gestalt_consciousness }
	}
	has_leader_flag = retirement_is_default # Randomized retirement instead of death in paragon.590
}

# This = country, Country that wants to get an external leader
# From = country, country that we are trying to get from
can_get_external_leader_pool_candidate = {
	exists = from
	OR = {
		has_diplo_migration_treaty = from
		is_in_federation_with = from
		is_overlord_to = from
	}
	# Both empires must be regular empires, machine intelligences or hive-minds.
	OR = {
		AND = {
			ROOT = {
				is_regular_empire = yes
			}
			FROM = {
				is_regular_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_machine_empire = yes
			}
			FROM = {
				is_machine_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_hive_empire = yes
			}
			FROM = {
				is_hive_empire = yes
			}
		}
	}
}

# This = leader, leader we'd like to trade
# Root = country, country that owns the leader currently
# From = country, country that would receive the leader
can_trade_leader = {
	# The leader must have a trait from a specialist subject type.
	this = {
		has_specialist_subject_leader_trait = yes
		is_councilor = no
		is_heir = no
		is_ruler = no
		NOT = { has_leader_flag = legendary_leader }
	}
	OR = {
		AND = { # Either from subject to Overlord
			ROOT = {
				is_subject = yes
			}
			FROM = {
				is_overlord_to = ROOT
			}
		}
		AND = { # Or from a tactical cogitator empire to a NON tactical cogitator empire
			ROOT = { has_valid_civic = civic_machine_tactical_algorithms }
			FROM = {
				NOT = { has_valid_civic = civic_machine_tactical_algorithms }
				is_fallen_empire = no
				NOT = {
					any_owned_leader = {
						has_trait = leader_trait_tactical_algorithms
					}
				}
			}
		}
	}
	# The subject and overlord must both be regular empires, machine intelligences or hive-minds.
	OR = {
		AND = {
			ROOT = {
				is_regular_empire = yes
			}
			FROM = {
				is_regular_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_machine_empire = yes
			}
			FROM = {
				is_machine_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_hive_empire = yes
			}
			FROM = {
				is_hive_empire = yes
			}
		}
		AND = { # Tactical Cogitator option
			ROOT = {
				has_valid_civic = civic_machine_tactical_algorithms
			}
			FROM = {
				OR = {
					is_regular_empire = yes
					is_hive_empire = yes
					is_machine_empire = yes
				}
				NOT = { has_country_flag = no_murdering_tactical_leaders }
				NOT = {
					any_owned_leader = {
						has_trait = leader_trait_tactical_algorithms
					}
				}
			}
		}
	}
	# Can't trade gestalt nodes
	is_gestalt_node = no
	# The overlord can't be a fallen or awakened empire.
	ROOT = {
		NAND = {
			is_overlord = yes
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
	NOR = {
		has_trait = leader_trait_fotd_scientist
		has_trait = leader_trait_fotd_commander
	}
}

# This = fleet, fleet we'd like to trade
# Root = country, country that owns the fleet currently
# From = country, country that would receive the fleet
can_trade_fleet = {
	AND = {
		ROOT = {
			NAND = {
				is_overlord = yes
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}
		}
		NOT = { has_fleet_flag = dimensional_fleet }
	}
}

# this = leader
# from = country scope
can_leader_be_ruler = {
	NOT = { leader_class = envoy }
}

# this = leader
# from = country scope
can_leader_be_councilor = {
	is_exploring_astral_rift = no
}

chance_for_external_leader_pool = {
	base = 10
	modifier = {
		is_xenophile = yes
		add = 30
	}
	modifier = {
		is_xenophobe = yes
		mult = 0.5
	}
}

# this = country scope
council_agenda_early_activation_cost = {
	base = 0
	add = value:council_agenda_early_activation_cost
}

# this = leader scope
# from = country scope
leader_election_elect_cost = {
	# Cost = (1 + election_cost_mult) * empire_size * 10
	base = 1
	add = modifier:country_election_cost_mult
	mult = from.trigger:empire_size

	# Rounded to closest 10, by applying x10 last.
	round = yes
	mult = 10
}

# this = country scope
emergency_election_cost_rule = {
	# Cost = (1 + election_cost_mult) * empire_size * 5
	base = 1
	add = modifier:country_election_cost_mult
	mult = trigger:empire_size
	mult = 5

	# Rounded to closest 50.
	divide = 50
	round = yes
	mult = 50
}

# this = leader scope (not valid in UI if no leader is selected)
# from = country scope
leader_election_support_cost = {
	# Cost = (1 + election_cost_mult) * empire_size * 4 * (1 + TimesSupported * 0.5)
	base = 1
	add = modifier:country_election_cost_mult
	mult = from.trigger:empire_size
	mult = 4

	# Rounded to closest 10; before applying TimesSupported, so player understands better how it increases.
	divide = 10
	round = yes
	mult = 10

	# If there's a Valid leader, cost increases if they're already Supported.
	modifier = {
		exists = this
		mult = value:leader_election_candidate_supported_mult
	}
}

# this = leader scope
leader_election_weight = {
	base = 0

	# Multiply by Faction support.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.faction_support
			owner = { has_country_flag = first_faction }
		}
		add = value:leader_faction_support_election_bonus
	}

	# If no Factions formed, fake faction support based on if it's an Empire ethic or not.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.no_faction_empire_ethic
			NOT = { owner = { has_country_flag = first_faction } }
			leader_has_empire_ethic = yes
		}
		add = 50
	}
	modifier = {
		custom_tooltip = {
			success_text = election_weight.no_faction_not_empire_ethic
			NOT = { owner = { has_country_flag = first_faction } }
			leader_has_empire_ethic = no
		}
		add = 25
	}

	# Not changing Ruler should be slightly preferred.
	modifier = {
		is_ruler = yes
		mult = 1.1
	}

	# Bonus if Leader was Councilor when election started. Or if no Election, is a Councilor now.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.iswas_councilor
			if = {
				limit = {
					owner = { has_country_flag = election_under_way }
				}
				has_leader_flag = councilor_at_election_start
			}
			else = {
				is_councilor = yes
				is_ruler = no
			}
		}
		mult = 1.05
	}

	# Governments (based on Ethics and Civics) might prefer certain Leader classes. Hide if +/- 0%.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_class_government_approves
			check_variable_arithmetic = {
				which = value:leader_class_government_match_bonus_mult
				value != 1
			}
		}
		mult = value:leader_class_government_match_bonus_mult
	}

	# Extra bonus for Councilor Subclass (which is a Trait).
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_councilor_subclass
			has_council_subclass = yes
		}
		mult = 1.2
	}

	# Penalty for Non-Councilor Subclass (which is a Trait).
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_councilor_subclass
			has_non_council_subclass = yes
		}
		mult = 0.8
	}

	# Bonus/penalty from Traits.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_traits
			check_variable_arithmetic = {
				which = value:leader_traits_election_bonus_mult
				value != 1
			}
		}
		mult = value:leader_traits_election_bonus_mult
	}

	# Bonus from Skill level.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_skill
			check_variable_arithmetic = {
				which = value:leader_skill_election_bonus_mult
				value != 1
			}
		}
		mult = value:leader_skill_election_bonus_mult
	}

	# Penalty from old Age, unless already ruler or immortal.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_age
			is_immortal = no
			is_ruler = no
			check_variable_arithmetic = {
				which = value:leader_age_percentage_of_lifespan
				value > 0.9
			}
		}
		mult = 0.5
	}
}

# Determines if pre-ftl country is unaware of alien life
# this: pre-ftl country
are_pre_ftls_unaware = {
	NOT = {
		current_awareness_level = full
	}
}

##TERRAFORMING CANDIDATES

# This = planet
# Checked if planet is a terraforming candidate
is_terraforming_candidate = {
	OR = {
		has_modifier = terraforming_candidate
		has_modifier = frozen_terraforming_candidate
		has_modifier = toxic_terraforming_candidate
	}
}

# Root = country
# This = planet
# Checked if the planet is special terraforming candidate and the country has the required matching ascension perk to do it
has_ascension_for_terraforming_candidate = {
	exists = root
	OR = {
		AND = {
			#No ascension perk required for terraforming_candidate modifier
			has_modifier = terraforming_candidate
		}
		AND = {
			root = { has_ascension_perk = ap_detox }
			has_modifier = toxic_terraforming_candidate
		}
		AND = {
			root = { has_ascension_perk = ap_hydrocentric }
			has_modifier = frozen_terraforming_candidate
		}
	}
}

# This = country that tries to rename
# Root = country owning the planet
# From = planet
# Checks if the planet (from) can be renamed by the country (this) that contains it in its borders, even if it has a different owner (Root)
# Renaming is never possible if the planet is not in your borders; and it is always possible if it is in your borders but the owner is yourself/no-one
can_be_renamed_by = {
	FROM = {
		exists = owner
		owner = {
			is_same_species = root
		}
		has_planet_flag = haven_flag

	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
can_build_station_around = {
	exists = root
	always = yes
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build a mining station around this planet/star/astral_rift
can_build_mining_station_around = {
	exists = root
	always = yes
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build a research station around this planet/star/astral_rift
can_build_research_station_around = {
	exists = root
	always = yes
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build a military station around this planet/star/astral_rift
can_build_military_station_around = {
	exists = root
	always = yes
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build an observation station around this planet/star/astral_rift
can_build_observation_station_around = {
	exists = root
	FROM = {
		is_scope_type = planet
		NOR = {
			has_planet_flag = haven_flag #FotD
			has_planet_flag = no_observation #Solarpunk
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build a starbase around this planet/star/astral_rift
can_build_starbase_around = {
	exists = root
	always = yes
}

# Root/this = country
# Checks if the country's capital has any kind of relevancy (aka is the capital in the galaxy really theirs)
has_inworld_capital = {
	NOT = { is_country_type = mirrored_country }
}

# Root/this = trading country
# From = country traded with
# Checks if target country has economy power relative to begin with
has_relative_economy_power = {
	exists = this
	exists = from
	NOR = {
		is_country_type = mirrored_country
		from = { is_country_type = mirrored_country }
	}
}

# Root/this = trading country
# From = country traded with
# Checks if the country can trade sensor
can_trade_sensor = {
	NOR = {
		is_country_type = mirrored_country
		from = { is_country_type = mirrored_country }
	}
}

# Root/this = trading country
# From = country traded with
# Checks if the country can trade favor
can_trade_favor = {
	NOR = {
		OR = {
			is_country_type = mirrored_country
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
		from = {
			OR = {
				is_country_type = mirrored_country
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
}

# THIS = country
# FROM = Astral Rift checked
can_interact_with_astral_rift = {
	OR = {
		from = {
			is_surveyed = { who = prev status = yes }
		}
		intel_level = {
			level >= low
			system = from.solar_system
		}
		from = {
			exists = explorer
			explorer = {
				is_same_value = prevprev
			}
		}
	}
}

# THIS = country
# FROM = Astral Rift checked
can_explore_astral_rift = {
	has_technology = tech_rift_sphere
	hidden_trigger = {
		OR = {
			is_astral_rift_pool_empty = no
			AND = {
				exists = from.explorer
				from.explorer = {
					is_same_value = prevprev
				}
			}
		}
	}
}

# THIS = leader
# FROM = Astral Rift checked
# Checks if the selected leader can explore the rift
can_leader_explore_astral_rift = {
	custom_tooltip = {
		fail_text = "CANNOT_EXPLORE_WITH_COUNCIL_LEADER"
		is_councilor = no
	}
	custom_tooltip = {
		fail_text = "CANNOT_EXPLORE_WITH_HEIR_LEADER"
		is_heir = no
	}
}

# FROM = country of the ai (in case it's relevant)
# THIS = planet
# this determines if the planet is allowed to receive a governor at all, and isn't called for a specific candidate
can_ai_assign_governor = {
	OR = {
		is_sector_capital = yes
		is_capital = yes
	}
	num_pops >= 1	# replaces the MINIMUM_POPS_TO_CONSIDER_GOVERNOR define
	NOT = {
		exists = leader
	}
}

# if the galactic community exists, is a galactic empire, and the country is part of it
# the ai will call this to see if it should set its delegate to strengthn it
# It is guaranteed that the galactic community exists, is an empire, and the country is part of it
# when this rule is called
# THIS = Country
# FROM = Galactic Emperor (Country)
should_ai_support_galactic_empire = {
	OR = {
		is_galactic_emperor = yes
		AND = {
			NOT = {
				FROM = {
					is_overlord_to = prev
				}
			}
			imperial_authority <= 0.75
			is_part_of_galactic_council = yes
			opinion = {
				who = FROM
				value >= 300	# value defined as "GOOD" in for opinion 00_defines.txt
			}
		}
		AND = {
			NOT = {
				FROM = {
					is_overlord_to = prev
				}
			}
			imperial_authority <= 0.75
			opinion = {
				who = FROM
				value >= 750	# value define as "EXCELLENT" for opinion in 00_defines.txt
			}
		}
		AND = {
			# Subjects of the Galactic Emperor that are loyal or cannot vote
			# should support the Imperium
			FROM = {
				is_overlord_to = prev
			}
			OR = {
				has_loyalty >= 0
				NOT = {
					any_agreement = {
						has_term_value = {
							term = subject_diplomacy
							value = subject_can_do_diplomacy
						}
					}
				}
			}
		}
	}
}

# if the galactic community exists, is a galactic empire, and the country is part of it
# and if it didn't decided to strengthen the empire,
# the ai will call this to see if it should set its delegate to undermine it
# if the ai neither wants to support nor undermine the galactic empire, it will just keep
# its emissary as a standard delegate
# It is guaranteed that the galactic community exists, is an empire, and the country is part of it
# when this rule is called
# THIS = Country
# FROM = Galactic Emperor (Country)
should_ai_undermine_galactic_empire = {
	is_galactic_emperor = no
	imperial_authority >= 0.25
	OR = {
		AND = {
			NOT = {
				FROM = {
					is_overlord_to = prev
				}
			}
			opinion = {
				who = FROM
				value <= -300	# value defined as "POOR" for opinion in 00_defines.txt
			}
		}
		AND = {
			FROM = {
				is_overlord_to = prev
			}
			has_loyalty < 0
			any_agreement = {
				has_term_value = {
					term = subject_diplomacy
					value = subject_can_do_diplomacy
				}
			}
		}
	}
}

# root/this = country
can_country_initiate_storm = {
	has_ascension_perk = ap_weather_control
}

# root/this = star
can_initiate_storm_on_planet = {
	custom_tooltip = {
		fail_text = "FLEETORDER_INITIATE_COSMIC_STORM_IS_NOT_STAR"
		is_star = yes
	}
	custom_tooltip = {
		fail_text = "FLEETORDER_INITIATE_COSMIC_STORM_ALREADY_INITIATED"
		NOT = {
			any_fleet_in_orbit = {
				has_fleet_flag = is_initiating_storm_at@root
			}
		}
	}
	custom_tooltip = {
		fail_text = "FLEETORDER_INITIATE_COSMIC_STORM_OCCUPIED"
		solar_system = {
			NOT = { has_star_flag = storm_system }
		}
	}
}

# root/this = system
can_force_see_fleets_in_system = {
	exists = this
	is_inside_storm = solar_storm
}

# root/this = country
# from = cosmic storm
has_breached_shroud_storm = {
	exists = this
	exists = from
	has_country_flag = breached_shroud
	from = { is_storm_type = shroud_storm }
}

# THIS = Fleet
is_science_fleet_gravity_snare_on_cooldown = {
	custom_tooltip = {
		success_text = FLEETORDER_SEND_SNARE_ON_COOLDOWN
		OR = {
			has_fleet_flag = gravity_snare_is_in_cooldown
			controller = {
				has_country_flag = gravity_snare_is_in_cooldown_ai
			}
		}
	}
}

# THIS = Fleet
# FROM = Country / Snare sender
can_fleet_be_captured_by_snares = {
	custom_tooltip = {
		fail_text = "FLEETORDER_GRAVITY_SNARE_NO_COMMUNICATIONS"
		exists = from
		exists = owner
		from = {
			has_communications = root.owner
		}
	}
	custom_tooltip = {
		fail_text = "FLEETORDER_MUST_BE_SPACE_CRITTER"
		exists = owner
		owner = {
			OR = {
				is_capturable_space_critter_country_type = yes
				is_country_type = grave_guardian
				is_country_type = lured_fauna_faction
			}
			is_guardian_country = no
		}
		any_owned_ship = {
			is_space_fauna = yes
		}
	}
}

# THIS = country
can_fauna_grow = {
	NOT = { has_policy_flag = nutrient_rationing }
}

# THIS = country
can_use_exhibits = {
	hidden_trigger = { exists = this }
	custom_tooltip = {
		fail_text = "GALACTIC_ARCHIVISM_NOT_RESEARCHED"
		has_technology = tech_galactic_archivism
	}
	custom_tooltip = {
		fail_text = "GRAND_ARCHIVE_NOT_BUILT"
		any_owned_megastructure = {
			is_megastructure_type = grand_archive_0
		}
	}
}

# THIS = country
can_access_vivarium = {
	custom_tooltip = {
		fail_text = "GRAVITY_WELLS_NOT_RESEARCHED"
		has_technology = tech_gravity_wells
	}
	custom_tooltip = {
		fail_text = "VIVARIUM_NO_ROOM"
		check_variable_arithmetic = {
			which = value:get_vivarium_capacity
			value > 0
		}
	}
}

# this = debris
# root = country who can explore debris
can_scavenge_and_research_debris = {
	OR = {
		AND = {
			exists = root
			root = {
				has_policy_flag = scavenge_and_research_debris
			}
		}
		AND = {
			must_scavenge = yes
			must_research = yes
		}
	}
}

# this = debris
# root = country who can explore debris
can_scavenge_debris = {
	OR = {
		AND = {
			exists = root
			root = {
				has_policy_flag = scavenge_debris
			}
		}
		AND = {
			must_scavenge = yes
			must_research = no
		}
	}
}

# this = country
# from = location (galactic_object)
can_excavate_outside_borders = {
	exists = this
	exists = from
	has_tradition = tr_archivism_frontier_archaeology
	from = {
		solar_system = { NOT = { exists = owner } }
	}
}

# this = country
can_voidworms_bombard_country = {
	hidden_trigger = {
		exists = event_target:voidworms_country
		exists = this
	}
	NOR = {
		is_tiyanki_country_type = yes
		is_amoeba_country_type = yes
		is_crystal_country_type = yes
		is_country_type = cloud
		is_drone_country_type = yes
		is_voidworms_country_type = yes
		is_fallen_empire = yes
		is_country_type = awakened_marauders
	}
	# During crisis, they should bombard no matter what, otherwise check tech and max voidworms
	if = {
		limit = {
			event_target:voidworms_country = {
				is_country_type = voidworms_crisis
			}
		}
		always = yes
	}
	else = {
		NOT = { has_technology = tech_voidworm_immunity }
		event_target:voidworms_country = {
			check_variable_arithmetic = {
				which = value:voidworm_ships_owned
				value < value:voidworm_maximum_population
			}
		}
	}
}

# this = country
can_use_mutations = {
	hidden_trigger = { exists = this }
	has_technology = tech_controlled_mutations
}

can_use_artificial_breeding = {
	hidden_trigger = { exists = this }
	has_technology = tech_alien_cloning
}

# this = actor (country)
# from = recipient (country)
can_trade_specimens = {
	exists = this
	exists = from
	count_exhibit = {
		limit = { contains_specimen = yes }
		count > 0
	}
	NOT = { has_country_flag = has_already_traded_specimens }
	from = {
		count_exhibit = {
			limit = { contains_specimen = yes }
			count < @archive_max_exhibit_count
		}
	}
}

# this = ship design
# from = owner (country)
force_create_default_ship_design = {
	exists = this
	exists = from
	is_designable = yes
	OR = {
		AND = {
			is_space_fauna = yes
			from = {
				uses_fauna_ship_sizes = yes
			}
		}
		# Add other cases here if any
	}
}

# from = owner (country)
#This = fleet
is_seeded = {
	has_fleet_flag = fruitful_seeded_critter
}

# this = destroyed ship
# from = attacker (ship)
can_capture_ship = {
	exists = this
	exists = from
	exists = controller
	controller = {
		is_country_type = default
	}
	OR = {
		# Civilian Ships
		is_ship_size = constructor
		is_ship_size = science
		# Regular Ships
		is_ship_size = corvette
		is_ship_size = frigate
		is_ship_size = destroyer
		is_ship_size = cruiser
		is_ship_size = battleship
		# Galactic Nemesis Ships
		is_ship_size = crisis_corvette
		is_ship_size = crisis_destroyer
		is_ship_size = crisis_cruiser
		# Offspring Ships
		AND = {
			controller = {
				has_origin = origin_progenitor_hive
			}
			OR = {
				is_ship_size = offspring_corvette
				is_ship_size = offspring_destroyer
				is_ship_size = offspring_cruiser
				is_ship_size = offspring_battleship
			}
		}
		# Cosmogenesis Ships
		is_ship_size = cosmo_crisis_destroyer
		is_ship_size = cosmo_crisis_battlecruiser
		# Nanotech Ships
		AND = {
			controller = {
				has_tradition = tr_nanotech_finish
			}
			OR = {
				is_ship_size = nanite_swarmer
				is_ship_size = nanite_interdictor
			}
		}
		# Fallen Empire Ships
		is_ship_size = large_ship_fallen_empire
		is_ship_size = small_ship_fallen_empire
		# Marauder Ships
		is_ship_size = marauder_corvette
		is_ship_size = marauder_destroyer
		is_ship_size = marauder_cruiser
		is_ship_size = marauder_galleon
	}
}

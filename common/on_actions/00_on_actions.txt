# Triggers when the game starts
on_game_start = {
	events = {
		game_start.1 # Spawn special/hidden countries
		game_start.2 # removes random planet modifiers from homeworlds
		game_start.3 # Hidden Game Start Event that resets tutorial for advisor trigger purposes
		game_start.5 # Countdown to Nomad Fleet
		game_start.31 # Create wormhole pairs
		distar.290 # Spawn Sealed System
		distar.252 # Phaseshifting Planet
		distar.295 # Connect Ratling Systems to one another
		distar.8000 # Randomize L-Cluster outcome
		colony_mod.100 #titanic life blocker setup
		game_start.50 # Set up Nebula system art
		galactic_features.420 # Spawn VLUUR
		clones.1 # Clone Army Origin, fix species before Leaders are generated
		central.1 # Central Crystal event
	}
	random_events = {
		19 = 0
		1 = akx.8000
	}
}

on_game_start_country = {
	events = {
		game_start.33 # populate system with stations
		game_start.10
		necroids.4 # flip guaranteed planets to guaranteed primitives for Necrophage
		clones.2 # Clone Army Origin
		clones.3 # Clone Army Origin pop creation
	}
}

# No scope, like on_game_start
# Does not run when loading MP saves due to OOS concerns
on_single_player_save_game_load = {
}

# No scope, like on_game_start
on_monthly_pulse = {
	events = {
		unrest.162
		unrest.164
		marauder.511 # Great Khan Dies
		#marauder.11 # Marauder infighting - commented out for now
		crisis.120 # Feral Prethoryn
		crisis.123 # Feral Prethoryn infighting
		marauder.113
		leviathans.170
		action.85 # flip planets to starbase owner
		marauder.150 # AI hires Marauder raids
		marauder.151 # AI hires Marauder mercs
		action.92 # make sure the swarm infests
		action.93 # make sure extradimensionals have no planets
		action.90 # rebuild outpost for orphaned colonies
		unrest.166
		apoc.301
		#distar.1082	# Rewrote this nasty event to be a looper.
		distar.5014
		distar.5001
		distar.301
		graygoo.183
		graygoo.510
		distar.10955
		action.116 # enable resources for galactic market
		pirate.48
		pirate.4
		crime.1000
		origin.50
		origin.30
		galcom.105
		galcom.108
		galactic_features.365 # Tiyanki Respawning
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		leviathans.10
		crisis.204
		crisis.205
		crisis.208
		crisis.240 # Prethoryn army reinforcements
		crisis.1254
		crisis.2080
		crisis.2310
		action.64 # species assimilation
		marauder.100
		crisis.122
		marauder.85
		marauder.160
		marauder.699
		# action.95 # Galactic Market - replaced with resolution in the Galactic Community
		crime.50 # Crime Events
		action.105 # Catch those outside of the Market - now requires you to be part of Galactic Community
		ancrel.6098
		galcom.1 # Galactic Community
		origin.25
		galactic_features.400
		crisis.5000
		crisis.5005
		custodian.33 # Independent GDF Reinforcements
		custodian.34 # GDF resurrection if destroyed
	}
}

# No scope, like on_game_start
on_bi_yearly_pulse = {
	events = {
		crisis.206
		distar.5060
		cara.960 # Galatron pulse
	}
}

# No scope, like on_game_start
on_five_year_pulse = {
	events = {
		crisis_trigger.1
		colony.3029 #Mirror portal followup event gatekeeper
		origin.1334
	}
}

# No scope, like on_game_start
on_decade_pulse = {
	events = {
		galactic_features.362
		utopia.50
		syndaw.10 # machine leader malfunction chance
		syndaw.400 # machine uprising + warning events
		galcom.14 # check if anyone's missing an invite to the Galactic Community
		drones.100	# Ancient Mining Drone Expansion Fleet setup (unclaimed systems)
		drones.120	# Ancient Mining Drone Expansion Fleet setup (claimed systems too)
		drones.200	# triggers a possible Space Crystal Splitter expansion (any system)
		pirate.100 # assorted late-game pirates
		fedev.600	# Federation Joint Operation - Trade League
	}
}

# No scope, like on_game_start
on_mid_game_pulse = {
	events = {
		leviathans.2011 # spawn wraith
		leviathans.20101 # remove too-late wraith discovery
		distar.2050
		central.2
	}
}

# No scope, like on_game_start
on_late_game_pulse = {
	events = {
	}
}

# this = country
on_monthly_pulse_country = {
	events = {
		tutorial.1337 #Artifact tutorial
		cara.333 # ai checks if it can/wants to play with the caravaneers
		clones.3 #Clone Army Origin pop creation
		action.325 #Eminent Diplomats tradition
	}
}

# this = country
on_yearly_pulse_country = {
	events = {
		cara.4101 #Caravan neighbor gatekeeper
		#tutorial.44
	}
}

# this = country
on_bi_yearly_pulse_country = {
	events = {
		espionage.2 #Random Spy Network events
	}
}

# this = country
on_five_year_pulse_country = {
	events = {
		action.220
	}
}

# this = country, fired via action.220 from on_five_year_pulse_country
on_five_year_random_pulse_country = {
	random_events = {
		100 = federations2.50	# Federation hegemony challenge
		100 = federations2.100	# Federation military challenge
		50 = envoy_events.4		# Respected Envoy to Galactic Community
		25 = envoy_events.5	# Irritating Envoy Must Die
		5 = envoy_events.15	# Galactic Community Wildlife
		25 = envoy_events.1	# Insulting envoy software event
		100 = action.2211		# on_five_year_random_pulse_country_negative_list
		2000 = 0
	}
}

# Why do this, you might ask, and not just use a random_list? Because on_actions check the triggers of the event before they try to fire them and exclude them from the list if they are false, so a list with no 0 weight will always fire an event so long as any of them are able to be fired
# Used in operation_diplomatic_incident. Beware when changing.
# this = country, fired via action.2211 from on_five_year_random_pulse_country
on_five_year_random_pulse_country_negative_list = {
	random_events = {
		10 = envoy_events.1001	# Insulting envoy software event (operation_diplomatic_incident-safe)
		20 = envoy_events.3	# A Contribution to Galactic Comedy
		10 = envoy_events.100	# Scandalous Insult
		20 = envoy_events.7	# Xenophobe Envoy Elopes
		20 = envoy_events.225	# Salacious Affair
		20 = envoy_events.200	# Galcom Lobbying
		10 = envoy_events.205	# Violating Local Norms
		20 = envoy_events.210	# Straying from own Norms
		20 = envoy_events.215	# Substance Abuse
		10 = envoy_events.220	# Offense Taken
		20 = action.2212		# Nothing, done differently because of operation_diplomatic_incident
	}
}

# this = country
on_decade_pulse_country = {
	events = {
		federations.10400
		action.240 #Misc error checking
	}
}

# this = country
on_mid_game_pulse_country = {
	events = {
	}
}

# this = country
on_late_game_pulse_country = {
	events = {
	}
}


# setup advanced colony. So far it has a pop on the capital and a colony shelter building matching the is_colony trigger
# scope: planet
# from: country
on_initialize_advanced_colony = {
	events = {
		game_start.20	# remove blockers on capital
		game_start.21	# upgrade colony shelter on additional colonies
		game_start.22	# set up additional buildings (mines, farms, power plants)
		game_start.23	# add additional pops
	}
}

on_become_advanced_empire = {
	events = {
		game_start.6
	}
}

# Triggers when pressing begin in the intro window
# This = country to press begin
on_press_begin = {
	events = {
		tutorial.104
		advisor.1
	}
}

# Triggers when trying to open the diplomacy view for countries with custom diplomacy.
# Country scope
# This = target country (player)
# From = source country
on_custom_diplomacy = {
	events = {
		crisis.30
		crisis.55
		crisis.1050
		crisis.1051
		crisis.1052
		nomad.30
		leviathans.100
		leviathans.103
		leviathans.104
		#leviathans.200
		leviathans.299
		leviathans.313
		#leviathans.400
		leviathans.500
		leviathans.157
		leviathans.160
		leviathans.163
		leviathans.597
		utopia.3000
		utopia.3010
		crisis.2300
		crisis.2403
		marauder.19
		marauder.20
		marauder.102
		marauder.550
		marauder.112
		marauder.665
		graygoo.120
		cara.100 # Caravaneer Home Base
		cara.101 # Hostile Caravaneers
		graygoo.130
		graygoo.500
		graygoo.501
		graygoo.502
		graygoo.503
		graygoo.504
		central.19 # Crystalline Empire
	}
}

# Triggered when two empires discover each other
# This = Empire 1
# From = Empire 2
# Fromfromfrom = System where contact occurred
on_first_contact = {
	events = {
		story.7 #First aliens discovered
		tutorial.59 #Tutorial: First Contact
		leviathans.9 #Leviathans
		galactic_features.421 #VLUUR
		pirate.155 #thalassocracy pirates
		first_contact_critters.1000 #Establish comms for most cases
	}
}

# Triggered when a first contact process is finished
# This = first contact scope
# From = other country
on_first_contact_finished = {
	events = {
		tutorial.2004 #First Contact Established (setup)
	}
}

# Triggered when an Empire has fleets within another Empire's borders.
# This = receiver
# From = sender
# FromFrom = fleet
# FromFromFrom = system
on_enforce_borders = {
	events = {
	}
}

# Triggers when ground combat starts
# This = planet
# From = country attacking
on_ground_combat_started = {
}

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# IDENTITIES: attacker is the side that "IsHostile" to
# the planet controller; e.g. spawned monster armies
# are attackers, but if they win and the player attempts
# to retake the planet, the player is the attacker
on_planet_attackers_win = {
	events = {
		colony.114
		crisis.201
		crisis.219
		action.8
		action.14
		colony.158
		#crisis.2400
		action.51
		factions.12
		crisis.2041
		crisis.2042
		crisis.2045
		marauder.503
		marauder.515
		distar.37
		distar.81
		distar.235
		graygoo.150
		unrest.171
		distar.5077
		ancrel.2068
		ancrel.6499
		ancrel.4064
	}
}

# Triggers country_event for the attacker upon defeat
# This = country, attack leader
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_lose = {
	events = {
	}
}

# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		colony.5
		colony.56
		colony.108
		unrest.161
		unrest.4235
		distar.34
		ancrel.4057
	}
}

# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_lose = {
	events = {
		colony.57
		colony.113
		colony.154
		unrest.167
		ancrel.4063
	}
}

# Fires when you first get intel (_low and up) on a new system
# Scope = Country
# From = System
on_system_first_visited = {
	events = {
	}
}

# Triggers event when each country first sends a ship into the system (once per country)
# Scope = Ship
# From = System
# FromFrom = Country
on_entering_system_first_time = {
	events = {
		graygoo.160
		graygoo.550
		federations2.20
		galactic_features.2
		galactic_features.350
		leviathans.3000
		leviathans.3100
		leviathans.3202
		leviathans.2105
		utopia.2010
		utopia.2012
		utopia.2014
		utopia.2016
		apoc.1
		apoc.3
		apoc.5
		mega.9100
		mega.9110
		mega.9120
		mega.9130
		feda.5
		galactic_features.500
		aquatics.305 #first sight of Aquatic dragon during first contact
	}
	random_events = {
		200 = 0
		10 = leader.19
	}
}

# Triggers event when ship enters a system. It's usually better to use on_entering_system_first_time or on_entering_system_fleet
# Scope = Ship
# From = System
# FromFrom = Country
on_entering_system = {
	events = {
	}
	random_events = {
	}
}

# A fleet has entered a system | See also: on_fleet_auto_move_arrival
# Scope = Fleet
# From = System
on_entering_system_fleet = {
	events = {
		action.40
		country.211
		country.1002
		anomaly.3095
		country.204
		country.205
		country.206
		#story.218
		story.220
		story.330
		#story.408
		anomaly.3114
		anomaly.3115
		nomad.3
		nomad.7
		nomad.8
		leviathans.1005
		pirate.10
		leviathans.610
		leviathans.1030
		akx.9200
		akx.9300
		akx.9600
		akx.9610
		distar.135
		distar.211
		distar.5011
		distar.1002
		distar.230
		distar.240
		distar.242
		ancrel.4012
		leviathans.999
		leviathans.1001
		country.6
		anomaly.142
		anomaly.143
		anomaly.144
		country.1030
		country.1050
		anomaly.96
		anomaly.106
		country.1102
		anomaly.4036
		country.254
		leviathans.2061
		distar.13030
		graygoo.162
		ancrel.4024
		origin.1345
		origin.1351
		origin.1390
		origin.1400
		country.2
		galcom.102 # Tiyanki Entering Sytem
		galactic_features.425 # VLUUR
		galactic_features.501 # Amoeba wave
		drones.105 #Mining Drone Expansion Fleet
		drones.125 #Mining Drone Expansion Fleet (Aggressive)
		drones.205 #Crystal Splitters
		akx.9000
		anomaly.6775
		aquatics.180 #Enemy enters system with Dragon
	}
}

# A fleet executes a move order to exit borders
# Scope = Fleet
# From = Origin System
# FromFrom = Destination System
on_crossing_border = {
	events = {
		cara.1010 # Caravaneer Fleet 1 intro
		cara.2010 # Caravaneer Fleet 2 intro
		cara.3010 # Caravaneer Fleet 3 intro
		cara.1250 # Caravaneer Fleet 1 Re-Deal
		cara.2250 # Caravaneer Fleet 2 Re-Deal
		cara.3250 # Caravaneer Fleet 3 Re-Deal
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
on_survey = {
	events = {
		action.24
		advisor.10
		advisor.15
		advisor.25
		country.52
		progress.2
		galactic_features.300
		#story.307
		anomaly.6660
		anomaly.6661
		anomaly.6662
		action.12
		tutorial.50
		tutorial.55
		leviathans.2010
		distar.130
		action.94 # strategic resource discovered
		distar.256 #Phaseshifting Planet
		distar.23100 # Risa fix - ratling planet
		#distar.11002 # distar strategic resource discovered
		ancrel.2050
		ancrel.6150
		ancrel.6151
		ancrel.9999 # Spawns Archaeology Sites
		galactic_features.368
	}

	random_events = {
		#100 = 0

		3 = precursor.1
		3 = precursor.500
		3 = precursor.1000
		3 = precursor.1500
		3 = precursor.2000
		10 = ancrel.2000
		75 = ancrel.1
	}
}

# A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# Root = Planet
# From = Country
# FromFrom = Fleet of the science ship that surveyed it, if any
on_planet_surveyed = {
	events = {
		action.46
		country.259
		distar.13050 # strategic resource alert
		communications_spread.4
	}
}

# A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# Root = Country
# From = system
# FromFrom = Fleet of the science ship that surveyed it, if any
on_system_survey = {
	events = {
		tutorial.18
		distar.13060 # first wormhole is in foreign territory - apoc.5 duplicate
		distar.13070 # first gateway is in foreign territory - apoc.1 duplicate
		distar.13080 # first l-gate is in foreign territory - apoc.3 duplicate
	}
}

# A ship is done surveying the last unsurveyed planet in a system
# Scope = ship
# From = system
on_system_survey_ship = {
	events = {
		tutorial.2
		tutorial.299
		tutorial.74
		tutorial.170
		country.251
		country.252
		country.253
	}
}

# A planet has begun the colonization process.
# Scope = Planet
on_colonization_started = {
	events = {
		advisor.17
		progress.3
		progress.7
		distar.300 # Change junkheap planetview image
		mega.110 # Colonization unconsecration
		origin.3010 #Lithoid origin deposit/modifier
		origin.3101 #Remnants colonial goodies
		federations3.120 #Kept Grounds, if Wenkwort Artem has been colonised
	}
	random_events = {
		190 = 0

		#10 = diplomatic.21
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		crisis.203
		anomaly.4171
		tutorial.27
		#factions.105 # Colonialists New Colony
		akx.9499
		distar.5
		distar.2599
		distar.1014
		distar.72
		distar.73
		distar.5000
		distar.262
		tutorial.9000
		origin.3001 #ToL Tree add
		origin.84
		clones.5 	#Clone Army (make sure pops don't migrate to die)
	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {
		colony.2002
		origin.3002#ToL Tree death
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
		nomad.96
		nomad.98
		nomad.99
		leviathans.330
		leviathans.155
		leviathans.158
		leviathans.161
		leviathans.595
		graygoo.155
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		syndaw.30
		mandate.143
		nomad.95
		leviathans.3002
		leviathans.3101
		leviathans.592
		leviathans.140
		crisis.1281
		crisis.1282
		crisis.217
		crisis.2070
		crisis.1012
		crisis.1115
		crisis.1215
		marauder.4
		marauder.14
		marauder.505
		marauder.509
		crisis.80
		marauder.525
		#distar.57
		graygoo.6
		cara.900 # Tradestation Destroyed
		graygoo.180
		crisis.251 # Prethoryn Brood-Queen Captured
		crisis.261 # Remove Swarm System Effect
		crisis.1311 # Remove Extradimensional System Effect
		crisis.2601 # Remove Contingency System Effect
		ancrel.11040
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		leviathans.1016
		leviathans.2099
		crisis.1283
		crisis.218
		crisis.2071
		story.222
		achievement.2
		distar.137
		distar.212
		distar.243
		distar.13020
		galactic_features.380 # Tiyanki Counter
		crisis.4025 # Crisis Objective: count ships destroyed
	}
	random_events = {
	}
}

# This = starbase being destroyed
# From = fleet that destroyed the starbase
on_starbase_destroyed = {
	events = {
		crisis.4010 # Menace Objective - Destroy Starbases
		crisis.265
		crisis.1320
		crisis.2610
		crisis.6099
		action.225 # Cleanup
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_disengaged_victim = {
	events = {
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_disengaged_perp = {
	events = {
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_victim = {
	events = {
		country.16
		country.18
		country.20
		country.220
		galactic_features.3
		country.1021
		country.1060
		anomaly.3097
		leviathans.331
		leviathans.3203
		#leviathans.649
		marauder.51
		#marauder.13 - Marauder infighting aftermath - commented out for now
		crisis.108
		crisis.125
		marauder.115
		origin.52
		galactic_features.366
		galactic_features.369
		galactic_features.422
		crisis.6152
		drones.130
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
		country.9
		country.11
		country.14
		country.215
		country.216
		country.1020
		country.1043
		colony.181
		observation.5
		story.109
		#story.114
		#story.209
		#story.309
		#story.311
		#story.214
		story.216
		story.332
		#story.409
		anomaly.3101
		anomaly.3120
		anomaly.3121
		galactic_features.360
		crisis.1111
		crisis.70
		leviathans.1009
		leviathans.1012
		leviathans.1015
		leviathans.1032
		leviathans.1040
		leviathans.648
		leviathans.655
		leviathans.670
		leviathans.334
		leviathans.2014
		leviathans.4
		pirate.13
		pirate.24
		akx.9318
		akx.10030
#		factions.330
		factions.10
		crisis.2472
		distar.5009
		cara.1002 # Destroyed Caravaneer Fleet 1
		cara.2002 # Destroyed Caravaneer Fleet 2
		cara.3002 # Destroyed Caravaneer Fleet 3
		ancrel.4020
		origin.1030
		aquatics.105 # Killed Origin Dragon
		galcom.101 # Killed Tiyanki Inside Borders
		galactic_features.381 # Tiyanki Counter
		federations2.112 # Destroyed training targets in militarist federation challenge
		ancrel.13000 #Destroyed Polaris fleet
	}
	random_events = {
		300 = 0
		2 = leader.1
		2 = leader.5
		2 = leader.6
		2 = leader.7
		2 = leader.8
		2 = leader.9
		2 = leader.17
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		achievement.1
	}
}

# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_lost = {
	events = {
	}
}

# This = owner of fleet
# From = disbanded fleet
on_fleet_disbanded = {
	events = {
		mandate.3 #removes mandate progress if you disband a related station
	}
}

# This = owner of fleet
# From = fleet
# FromFrom = planet (if any)
on_fleet_auto_move_arrival = {
	events = {
		distar.5008
		distar.136
		distar.210
		distar.5054
		distar.1017
		distar.5061
		drones.106 #Mining Drone Expansion (establish a new mining base)
		drones.126 #Aggressive Mining Drone Expansion (establish a new mining base)
		drones.206 #Space Crystal Splitter (form Shardlings)
	}
}

# The game will generate one on_building_X on_action for every station ship-size
# Orbital stations will get the planet in FROM, space stations only get they building ship

# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_mining_station = {
	events = {
		mandate.110
		tutorial.10
		tutorial.1000
		tutorial.56
		pirate.3
		leviathans.3200
		anomaly.6830 #Mining for Food
		anomaly.6880 #Sleeping Crystal
		anomaly.6885 #Angry Crystal
	}
}

# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_research_station = {
	events = {
		mandate.120
		tutorial.12
		tutorial.1200
		tutorial.56
	}
	random_events = {
		100 = 0
		5 = federations3.2000
	}
}

# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_outpost_station = {
	events = {
		tutorial.750
		tutorial.56
		mandate.110
		mandate.120
		#factions.220
	}
}

# This = construction ship
# Fires when construction is complete,
# immediately before station is created
on_building_wormhole_station = {
	events = {
	}
}

on_building_starbase_outpost = {
	events = {
		tutorial.76
		distar.254
		distar.1007
		distar.2036
	}
}

on_building_observation_station = {
	events = {
	}
}

on_building_starbase_ai = {
	events = {
		crisis.2600
	}
}

# This = construction ship
# Fires when construction is complete,
# immediately before station is created

on_building_starbase_exd_0 = {
	events = {
		crisis.1300
		crisis.1310
	}
}

on_building_starbase_exd = {
	events = {
	}
}

on_building_starbase_swarm = {
	events = {
		crisis.260
	}
}

on_building_starbase_marauder = {
	events = {
	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
	}
}

# This = Country
# From = Fleet
on_fleet_detected = {
	events = {
	}
}

# This = Ship
# From = Disabler Ship
on_ship_disabled = {
	events = {
		country.201
		country.212
		country.217
		country.222
		distar.58
		leviathans.2100
		distar.5053
		pirate.70
	}
}

# This = Ship
on_ship_enabled = {
	events = {
	}
}

# Triggers when a Special Project to uplift a pre-sapient species is completed.
# Note that this will trigger once for each combination of planet & original
# species (but for uplifting this should be only once).
#
# Scope = planet_event
# This = planet scope
# From = uplifted species (pre-modification)
on_uplift_completion = {
	events = {
		uplift.6001
		uplift.6011
		uplift.6021
		uplift.6031
		uplift.6041
		uplift.6051
		uplift.6061
		uplift.6071
		uplift.6091
		uplift.6081
		factions.1005
	}
}

# This = Pop scope
# From = Planet
on_purge_begun = {
	events = {
		syndaw.1310 # purging a bot can trigger Uprising
	}
}

# This = Pop scope
# From = Planet
on_purge_canceled = {
}

# Planets starts being terraformed
# This = Planet
# From = Terraforming country
on_terraforming_begun = {
	events = {
		terra.5 # Remembers original Planet Class
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		action.68
		syndaw.1320 # Planet of the Mechs achievement check
		distar.197
		terra.10 # Terraforming random events
	}
}

# Planet has changed planet class in whatever way. Note that this is also called during galaxy creation in some places.
# This = Planet
on_planet_class_changed = {
	events = {
		aquatics.1005
	}
}

# Planet has taken damage from orbital bombardment - Damage is applied daily
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		crisis.200
		crisis.1011
		crisis.2040
		crisis.2043
		crisis.2475
		crisis.2476
		marauder.103
		graygoo.2
		graygoo.555
		origin.3003 #ToL Tree death
	}
}

# Planet has reached 0 pops from orbital bombardment
# This = Planet
# From = Bombarder
on_planet_zero_pops = {
	events = {
		action.81
		distar.1015
		primitive.201
	}
}

# Planet has reached 0 pops from collateral damage
# This = Planet
# From = Army owner
on_planet_zero_pops_ground_combat = {
}

# Pop is abducted by raiding stance
# This = Pop scope
# From = planet abducted from
on_pop_abducted = {
	events = {
		action.121
		action.122
	}
}


# Pop is enslaved
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_enslaved = {
	events = {
	}
}


# Pop is released from slavery
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_emancipated = {
	events = {
	}
}

# Executed right before a country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_pre_communications_established = {
	events = {
		action.7
		action.19
	}
}

# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_post_communications_established = {
	events = {
		action.11
		first_contact.1050 #establish comms via first contact process
		anomaly.4016
		#anomaly.4092
		factions.11
		action.110 # get Galactic Community invitation
	}
}

# Executed just after country has established communications with another country
# This = Planet where the pop was bombed to death
# From = Country which is raining down fire and brimstone
on_pop_bombed_to_death = {
	events = {
	}
}

# Executed as a leader has died
# This = Country
# From = Leader
on_leader_death = {
	events = {
		pretender.1
		mandate.21
		akx.9330
		marauder.70
		marauder.711
	}
}

# Executed as a leader has been fired
# This = Country
# From = Leader
on_leader_fired = {
	events = {
		marauder.70
	}
}

# A leader leveled up.
# Scope = Country
# From = Leader
on_leader_level_up = {
	events = {
		leader.20 #gatekeeper for various events
	}
}

# Scope: Leader (after assignment)
on_leader_assigned = {
	events = {
		envoy_events.230
	}
}

# Scope: Leader (just before unassignment)
# Fires if a leader is unassigned from their position for any reason (including being assigned elsewhere)
on_leader_unassigned = {
}

# Executed as new ruler has been set
# This = Country
on_ruler_set = {
	events = {
		action.47	# Remove election-filler leaders when ruler is set
		mandate.1	# "ruler X elected, check situation log for their mandate"=
	}
}

# Executed when a ruler has been removed
# From = Previous Ruler
# This = Country
on_ruler_removed = {
	events = {
	}
}

# Executed when the ruler is ousted and goes back to their pre-ruler class
# From = Previous Ruler, already has the new class
# This = Country
on_ruler_back_to_pre_ruler_class = {
	events = {
		utopia.2511	# leader gets cyborg trait for their normal leader class
		utopia.2561	# leader gets synthetic trait for their normal leader class
		utopia.2653	# leader gets psionic trait for their normal leader class
	}
}

# This = Planet
on_blocker_cleared = {
	events = {
		tutorial.16
		tutorial.160
		ancrel.4030
		terra.30 # Clear the Terraforming Blocker form terra.25
	}
}

# A ship has started a new order
# Root = Ship
# From = Country
on_ship_order = {
	events = {
		tutorial.500
	}
}

# Executes after a policy has been changed
# use last_changed_policy to identify which policy it was
# This = Country
on_policy_changed = {
	events = {
		action.35
		syndaw.1300 # banning AI can cause Uprising
		syndaw.1305 # banning bot workers can cause Uprising
		leader.30 # banning AI will remove AI-dependent traits from leaders
		action.80 # banning AI will remove existing Synthetic Armies
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		tutorial.40
		tutorial.8
		tutorial.21
		tutorial.25
		mandate.144
		crisis.2056
		fedev.9500
	}
}

# A ship design has been finished
# Root = Country
on_ship_designed = {
	events = {
		tutorial.49
		tutorial.480
	}
}

# A ship has been upgraded
# Root = Ship
on_ship_upgraded = {
	events = {
		crisis.2057
	}
}

# A war is beginning, executed for every country in the war.
# Root = Country
# From = War
on_war_beginning = {
	events = {
		action.41
		#diplomatic.1002
		factions.13
		origin.29
		emperor.370
	}
}

# A war has ended
# Root = Loser
# From = Main Winner
on_war_ended = {
	events = {
		fallen_empires.14
	}
}

# A country has been released through a peace deal in a war
# Root = new country
# From = country forcing the release
# FromFrom = country they are released from
# FromFromFrom = war
on_country_released_in_war = {
	events = {
		action.320
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		tutorial.6
		tutorial.64
		tutorial.73
		anomaly.1193
		action.56
		apoc.300
		distar.12000
		distar.1085
		distar.10903
		ancrel.4008
		aquatics.190 #Dragon Material Study
		aquatics.250 #Dragon Communications Study
	}
}

# Triggers when a Special Project to apply a species modification template has completed.
# Note that this will trigger once for each combination of planet & original species.
#
# This = Country
# From = Species ( Post Modification )
on_modification_complete = {
	events = {
		tutorial.65
		utopia.2508 # Handle leader traits after species modification
		utopia.6001 # Hive Mind species integration
	}
}

# A planets controller becomes a country not the same as the owner.
# Root = Planet
# From = Planet Owner
# FromFrom = Planet Controller (the one occupying)
on_planet_occupied = {
	events = {
		#crisis.2005
		#crisis.2215
	}
}

# A fleet has successfully escaped from combat, executed right before the fleet enters FTL
# This = escaping fleet
# From = system escaped from
# FromFrom = system escaping to
on_emergency_ftl = {
	events = {
		nomad.97
		leviathans.1010
		#leviathans.1013	# Risa fix: The triggers for this event can't fire the event it calls.
		#leviathans.1014	# Risa fix: duplicated with leviathans.1010
		leviathans.1020
		leviathans.1031
		leviathans.650
		leviathans.654
	}
	random_events = {
		310 = 0
		10 = leader.10
		10 = leader.12
		10 = leader.13
		10 = leader.14
		10 = leader.11
	}
}

#An army construction has been completed.
# This = Planet
# From = Army
on_army_recruited = {
	events = {
	}
}

#An army has been killed in ground combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
on_army_killed_in_combat = {
	events = {
		emperor.450
		necroids.15
	}
}

#An army has ceased to exist for any other reason
# This = country
# From = army
on_army_killed_no_combat = {
	events = {
		emperor.450
	}
}

#A building construction has been completed.
# This = Planet
on_building_complete = {
	events = {
		tutorial.14
		tutorial.140
		akx.10000
		federations3.1000
		emperor.61
	}
}

# A building construction has been queued.
# This = Planet
on_building_queued = {
	events = {
	}
}

# A building construction has been unqueued.
# This = Planet
on_building_unqueued = {
	events = {
	}
}

# A building construction has been completed, which is an upgrade of previous building.
# This = Planet
on_building_upgraded = {
	events = {
		plant.100
	}
}

# A building construction has demolished.
# This = Planet
on_building_demolished = {
	events = {
		leviathans.305
		emperor.62
	}
}

#A district construction has been completed.
# This = Planet
on_district_complete = {
	events = {
		mandate.180 # Districts built counter
	}
}

# A building construction has finished, replacing another building.
# This = Planet
on_building_replaced = {
	events = {
		leviathans.305
		akx.10000
		emperor.62
	}
}

# A building construction has been downgraded and replaced.
# This = Planet
on_building_downgraded = {
	events = {
	}
}

# A district construction has been queued.
# This = Planet
on_district_queued = {
	events = {
	}
}

# A district construction has been unqueued.
# This = Planet
on_district_unqueued = {
	events = {
	}
}

# A district construction has demolished.
# This = Planet
on_district_demolished = {
	events = {
		mandate.181
	}
}

# Tutorial level for a country has changed
# This = Country
on_tutorial_level_changed = {
	events = {
		tutorial.100 # Show what has been enabled / disabled
		tutorial.101 # Show what has been enabled / disabled
		tutorial.102 # Show what has been enabled / disabled
		tutorial.103 # Disable irrelevant tutorial stuff
	}
}

# A war has been won
# Root = Winner Warleader
# From = Loser Warleader
# FromFrom = War
on_war_won = {
	events = {
		action.37 # Default victory message
		action.48 # Country destroyed victory message
		action.32
		action.44
		#factions.205 # Imperialist Conquest
		action.150
		action.152
		action.154
		#action.156
		action.158
		syndaw.1200
		syndaw.1205
		syndaw.2000 # exterminator achievement
	}
}

# A war has been lost
# Root = Loser Warleader
# From = Winner Warleader
# FromFrom = War
on_war_lost = {
	events = {
		action.38 # Default defeat message
		action.151
		action.153
		action.155
		#action.157
		fallen_empires.2
		fallen_empires.12
	}
}

# A status quo has been signed
# Root = Actor
# From = Recipient
# FromFrom = Main Attacker
# FromFromFrom = Main Defender
# FromFromFromFrom = War
on_status_quo = {
	events = {
		action.39
		action.45
	}
}

# A status quo has been signed, by force
# Root = Recipient
# From = Actor
# FromFrom = Main Attacker
# FromFromFrom = Main Defender
# FromFromFromFrom = War
on_status_quo_forced = {
	events = {
		action.39
	}
}

# A pop has been added to the planet
# Root = pop
# From = planet
on_pop_added = {
	events = {
#		origin.1
	}
}

# We changed a species right
# This = pop
on_pop_rights_change = {
	events = {
		utopia.90 # remove withdrawal when blissed
		utopia.91 # add withdrawal after bliss
	}
}

# A pop has finished growing
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_grown = {
	events = {
	}
}

# A pop has finished assembling
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_assembled = {
	events = {
		crisis.2055
		crisis.2312
	}
}

# A pop has finished purging
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_purged = {
	events = {
		crisis.202
		crisis.2044
		# mandate.131
		action.21 # Opinion effect on other empires
		action.22 # Resources from Forced Labor/Processing/Chemical Processing
		action.95 # Purging the last Primitive Pop removes Culture Shock from the planet
		utopia.180 # Gain resources for fanatic purifiers civic
		utopia.181 # Gain resources for devouring swarm
		syndaw.1330 # Gain resources for exterminators
		ancrel.4075
		necroids.5 # Necrophage Purge
		crisis.4030 # Menace Objective - Purge Pops
		clones.30 #Clone Army Cleanup
	}
}

# A pop has finished declining (while not being purged)
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_declined = {
	events = {
		clones.30 #Clone Army Cleanup
	}
}


# A pop has been displaced
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_displaced = {
	events = {
		refugees.3
		crisis.4030 # Menace Objective - Purge Pops
	}
}

# Initial rebels manage to take control of the planet, happens before the new owner is set, after the war is created.
# This = Rebel Country
# From = Planet
# FromFrom = War
on_rebels_take_planet = {
	events = {
		action.30
		unrest.4210
	}
}

# Initial rebels manage to take control of the planet, happens after the new owner is set, after the war is created.
# This = Rebel Country
# From = Planet
# FromFrom = War
on_rebels_take_planet_owner_switched = {
	events = {
		action.36
	}
}

#From = Country scope
#This = Planet scope
on_planet_ownerless = {
	events = {
		action.85
		action.89
		clones.30 #Clone Army cleanup
		terra.110 #Removes second home modifier
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
#		utopia.2657 # make habitats larger
		mega.205 # nuke invalid ongoing planetary political decisions
		origin.3002#ToL Tree death
		origin.3004#ToL Tree modifier
		clones.30 #Clone Army cleanup
		terra.110 #Removes second home modifier
		terra.115 # Restore second home modifier if the planet is the same planet class
	}
}

#Fired whenever a new owner is set for a planet, and the planet was aggressively conquered
#Fired in ADDITION to on_planet_transfer
#From = Country scope (new owner)
#This = Planet scope
on_planet_conquer = {
	events = {
		action.42 # Land appropriation
		action.84
		action.89
		crisis.5010 # Crisis Menace Objective: Conquer a Colony
	}
}

#You have changed the location of your capital. Also called when a country's capital is first set e.g. during galaxy creation (but then FROM is not set)
#this/root = new capital
#from = old capital
on_capital_changed = {
}

#From = Planet/Starbase/Megastructure scope
#This = Fleet scope
on_fleet_enter_orbit = {
	events = {
	}
}

#This = Federation leader
#From = Joining member
on_join_federation = {
	events = {
		fedev.499 # First Federation event
	}
}

#This = Federation leader
#From = Leaving member
on_leave_federation = {
	events = {
		action.201 # achievement flagging and various cleanups
	}
}

#This = Country scope, federation leader
#From = Country to initiate the vote
on_federation_law_vote_succeed = {
	events = {
		fedvote.1
	}
}

#This = Country scope, federation leader
#From = Country to initiate the vote
on_federation_law_vote_failed = {
	events = {
		fedvote.2
	}
}

#This = Country scope, federation leader
#From = Country to exclude from the federation elections
on_federation_leader_elections = {
	events = {
	}
}

#This = Country scope, new federation leader
#From = Previous leader (if still existing)
on_federation_new_leader = {
	events = {
		action.310
	}
}

#This = Country scope, federation leader
#From = Country to exclude from the federation psionicbattle

on_federation_leader_challenge = {
	events = {
		fedel.1	# Arena Combat
		fedel.500	# Psionc Battle
		fedel.900	# Bidding War (Golden Rule)
		fedel.1500	# Thesis Defense
	}
}

#This = destroyed country
#From = optional, destroyer (country)
on_country_destroyed = {
	events = {
		custodian.100 # Custodian destroyed
		emperor.400 # Galactic Empire destroyed
		crisis.210
		crisis.1270
		action.61
		crisis.2404
		war_in_heaven.17 #WiH - both AFEs dead - do not flip the order here!
		war_in_heaven.10 #WiH - first AFE dead by NAL - do not flip the order here
		crisis.4020	# Menace Objective: Destroy Empire.
		emperor.63
	}
}

# A Megastructure has been built
# Root = Country
# From = Megastructure
# FromFrom = System
# FromFromFrom = Fleet
on_megastructure_built = {
	events = {
		utopia.2000
		utopia.4000
		utopia.4100
		utopia.80
		utopia.4007 # alert message
	}
}

# A Megastructure has begun to be upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
on_megastructure_upgrade_begin = {
	events = {
		utopia.2001
		utopia.29
	}
}

# A Megastructure has been upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
on_megastructure_upgraded = {
	events = {
		utopia.2003
		utopia.2004
		utopia.4001
		utopia.4003
		utopia.4004
		utopia.4005
		utopia.4006 # alert message
		utopia.4101
		utopia.4103
		utopia.4104
		utopia.81
		utopia.83
		utopia.84
		utopia.85
		action.120 # alert message for contacts
	}
}

# X years has passed since a planet was colonized (won't trigger on empire homeworld)
on_colony_1_year_old = {
	events = {
		### Planet Modifiers - 9
		#colony_mod.1 # Irradiated
		#colony_mod.2 # Titanic Life
		#colony_mod.3 # Unstable Tectonics
		#colony_mod.4 # Asteroid Belt
		#colony_mod.5 # Atmospheric Hallucinogen
		#colony_mod.12 # Asteroid Impacts
		#colony_mod.14 # Asteroid Impacts - Good
		#colony_mod.16 # Strong Magnetic Field - Good
		#colony_mod.17 # Strong Magnetic Field - Bad
		#colony_mod.121 # Gatekeeper for Asteroid Impacts
		colony_mod.161 # Gatekeeper for modifier colony events
	}

	random_events = {
		300 = 0

		#### Colony Events & Chains - 14
		#1 = colony.1 # Migrating Forests
		#1 = colony.50 # Subterranean Aliens
		#1 = colony.1500 # Helpful Drones
		#1 = colony.1520 # Mharin Kharin

		#2 = colony.100 # Abandoned Terraforming
		#1 = colony.180 # Asteroid Sighted
		#1 = colony.2001 # Trouble in Paradise
		#2 = colony.2005 # Submerged Cruiser
		#1 = colony.2010 # A Change of Heart
		#2 = colony.2015 # Odd Factory
		#2 = colony.2025 # What Separates Us
		#2 = colony.2030 # Assassination
		#2 = colony.2035 # Infectious Disease
		#2 = colony.2050 # Clerical Errors

		#### Planet Modifiers - 9
		#5 = colony_mod.1 # Irradiated
		#5 = colony_mod.2 # Titanic Life
		#5 = colony_mod.3 # Unstable Tectonics
		#5 = colony_mod.4 # Asteroid Belt
		#5 = colony_mod.5 # Atmospheric Hallucinogen
		#5 = colony_mod.12 # Asteroid Impacts
		#5 = colony_mod.14 # Asteroid Impacts - Good
		#5 = colony_mod.16 # Strong Magnetic Field - Good
		#5 = colony_mod.17 # Strong Magnetic Field - Bad

		#### Tomb Worlds - 8
		#5 = colony.150 # Underground Vault
		#5 = colony.155 # Nuclear Bomb
		#5 = colony.160 # Particle Accelerator
		#5 = colony.161 # Surviving Infrastructure
		#5 = colony.162 # Space Station
		#5 = colony.163 # Wasteland Radiation
		#5 = colony.164 # Pacifist Movement
		#5 = colony.170 # Orbital Debris
	}
}

on_colony_2_years_old = {
	events = {
		colony.5000 # The Lonely Bot (randomisation set in deposit placement)
	}
	random_events = {
		150 = 0

		### Colony Events & Chains - 14
		3 = colony.1 # Migrating Forests
		3 = colony.50 # Subterranean Aliens
		3 = colony.1500 # Helpful Drones
		3 = colony.1520 # Mharin Kharin

		15 = colony.100 # Abandoned Terraforming
		6 = colony.180 # Asteroid Sighted
		3 = colony.2001 # Trouble in Paradise
		15 = colony.2005 # Submerged Cruiser

		15 = colony.2015 # Odd Factory
		15 = colony.2025 # What Separates Us
		#15 = colony.2030 # Assassination
		#15 = colony.2035 # Infectious Disease
		#15 = colony.2050 # Clerical Errors
		10 = colony.3001 # Rogue Moon
		8 = colony.3005 # Dimensional Portal

		8 = colony.9000 #Turtle World


		15 = colony.2060 # Strange Mushrooms

		### Archaeology Colony Sites
		3 = ancrel.6049 # Blade of the Huntress

		### Planet Modifiers - 9
		#150 = colony_mod.1 # Irradiated
		#150 = colony_mod.2 # Titanic Life
		#150 = colony_mod.3 # Unstable Tectonics
		#150 = colony_mod.4 # Asteroid Belt
		#150 = colony_mod.5 # Atmospheric Hallucinogen
		#150 = colony_mod.12 # Asteroid Impacts
		#150 = colony_mod.14 # Asteroid Impacts - Good
		#150 = colony_mod.16 # Strong Magnetic Field - Good
		#150 = colony_mod.17 # Strong Magnetic Field - Bad

		### Tomb Worlds - 8
		75 = colony.150 # Underground Vault
		75 = colony.155 # Nuclear Bomb
		75 = colony.160 # Particle Accelerator
		75 = colony.161 # Surviving Infrastructure
		75 = colony.162 # Space Station
		75 = colony.163 # Wasteland Radiation
		75 = colony.164 # Pacifist Movement
		75 = colony.170 # Orbital Debris

		### Federations
		3 = colony_fed.100 #Impossible Corrie
	}
}

on_colony_3_years_old = {
	events = {
	}
	random_events = {
		150 = 0

		### Colony Events & Chains - 14
		2 = colony.1 # Migrating Forests
		2 = colony.50 # Subterranean Aliens
		2 = colony.1500 # Helpful Drones
		2 = colony.1520 # Mharin Kharin
		10 = colony.8001 # Feral Overload

		10 = colony.100 # Abandoned Terraforming
		6 = colony.180 # Asteroid Sighted
		10 = colony.2001 # Trouble in Paradise
		10 = colony.2005 # Submerged Cruiser
		10 = colony.2010 # A Change of Heart
		10 = colony.2015 # Odd Factory
		10 = colony.2025 # What Separates Us
		#10 = colony.2030 # Assassination
		#10 = colony.2035 # Infectious Disease
		10 = colony.2050 # Clerical Errors
		10 = colony.3001 # Rogue Moon
		5 = colony.3005 # Dimensional Portal

		### Archaeology Colony Sites
		3 = ancrel.6049 # Blade of the Huntress

		### Planet Modifiers - 9
		#300 = colony_mod.1 # Irradiated
		#300 = colony_mod.2 # Titanic Life
		#300 = colony_mod.3 # Unstable Tectonics
		#300 = colony_mod.4 # Asteroid Belt
		#300 = colony_mod.5 # Atmospheric Hallucinogen
		#300 = colony_mod.12 # Asteroid Impacts
		#300 = colony_mod.14 # Asteroid Impacts - Good
		#300 = colony_mod.16 # Strong Magnetic Field - Good
		#300 = colony_mod.17 # Strong Magnetic Field - Bad

		### Tomb Worlds - 8
		50 = colony.150 # Underground Vault
		50 = colony.155 # Nuclear Bomb
		50 = colony.160 # Particle Accelerator
		50 = colony.161 # Surviving Infrastructure
		50 = colony.162 # Space Station
		50 = colony.163 # Wasteland Radiation
		50 = colony.164 # Pacifist Movement
		50 = colony.170 # Orbital Debris

		### Federations
		4 = colony_fed.100 #Impossible Corrie
	}
}

on_colony_4_years_old = {
	random_events = {
		150 = 0

		### Colony Events & Chains - 14
		1 = colony.2001 # Trouble in Paradise
		1 = colony.2010 # A Change of Heart
		3 = federations2.8 # Dancing Plague

		### Archaeology Colony Sites
		3 = ancrel.6049 # Blade of the Huntress
	}
}

on_colony_5_years_old = {
	events = {
		necroids.3
	}
	random_events = {
		150 = 0

		# Colony Events
		3 = colony.2010 # A Change of Heart
		3 = federations2.8 # Dancing Plague

		### Archaeology Colony Sites
		3 = ancrel.6049 # Blade of the Huntress
	}
}


on_colony_6_years_old = {
}

on_colony_7_years_old = {
}

on_colony_8_years_old = {
}

on_colony_9_years_old = {
}

on_colony_10_years_old = {
}

# Fires for each planet every 5 years (counting up from colonisation date, includes home planet)
on_colony_5_year_pulse = {
	events = {
		action.222 #Help for AI with Doomsday
	}
	random_events = {
		3 = manifesti.1
		97 = 0
	}
}

on_colony_10_year_pulse = {
	events = {
		necroids.1 #Apotheosis for non-necrophage pops to necrophage
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		utopia.2509 # New Leaders Get Erudite Trait
		utopia.2510	# New Leaders Get Cyborg Trait
		utopia.2560	# New Leaders Get Synthetic Trait
		utopia.2651	# New Leaders Get Psionic Trait
		utopia.6000 # hive mind ruler gets hive mind trait to make them immortal
		syndaw.1050 # Machine Intelligence ruler gets trait
		distar.173 # New Leaders Get Brainslug Trait
		clones.24 # New Leaders gain Clone Army Admiral traits
	}
	random_events = {
		80 = 0
		20 = utopia.2601
	}
}

# called during empire initialization when starting a new game
# scope: country
empire_init_add_technologies = {
	events = {
		game_start.8
	}
}

# Called during empire initialization when starting a new game if has_secondary_species game rule is true.
# Called before empire_init_create_capital_pops.
# scope: planet
# from: founder species
# fromfrom: secondary species (if exists)
empire_init_capital_planet = {
	events = {
		game_start.12 # starting buildings, districts & pops
		# at this point the species might have changed (because we added traits), so FROMFROM might not be the secondary species anymore
	}
}

# called during empire initialization when starting a new game
# scope: country
empire_init_create_ships = {
	events = {
		game_start.9
	}
}

# Called when an election starts
# scope: country
on_election_started = {
}

# Called when an election ends
# scope: country
on_election_ended = {
}

# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# FROMFROM = System jumped from
on_entering_gateway = {

}

# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# FROMFROM = System jumped from
on_entering_wormhole = {
	events = {
		achievement.4
	}
}

# THIS = Fleet
on_jump_drive = {
}

# this = country
on_pirate_spawn = {
	events = {
		pirate.49
	}
}

# Called when a Starbase changes owner
# THIS = Ship (Starbase)
# FROM = Former Owner (Country)
on_starbase_transfer = {
	events = {
		action.223
		distar.254
	}
}


#
# Both the following on_action are called when fleet joined combat
# (The first one is called for the attacker fleet, the second one is called for the defending fleet)
#


# This = Aggressor Fleet
# From = Attacked Fleet
# FromFrom = Additional Attacked Fleet (if part of ongoing combat)
# FromFromFrom = Additional Attacked Fleet (if part of ongoing combat)
on_fleet_combat_joined_attacker = {
	events = {
		aquatics.300 # You attacked the Aquatic Dragon in first contact
		aquatics.310 # You attacked it while establishing comms with it (origin endgame)
	}
}

# This = Attacked Fleet
# From = Aggressor Fleet
# FromFrom = Additional Attacked Fleet (if joining ongoing combat)
# FromFromFrom = Additional Attacked Fleet (if joining ongoing combat)
on_fleet_combat_joined_defender = {
	events = {
		cara.1001 # Caravaneer Fleet 1
		cara.2001 # Caravaneer Fleet 2
		cara.3001 # Caravaneer Fleet 3
		ancrel.4025
		galactic_features.550 # Factions set to hostile
	}
}

# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
		mega.100 # Lost Consecrated World
		action.102 # Move Market Station
		action.200	# recalc strategic war data
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
		galactic_features.298 # Shielded World (Fallen Empire)
		action.200	# recalc strategic war data
		communications_spread.5 # Establish comms with any other countries in the system
	}
}

# This = Pop
# From = Country (buyer)
# Fromfrom = Country (seller)
on_slave_sold_on_market = {
}

# This = Country
on_relic_activated = {
	events = {
		achievement.5 # Unlimited Power achievement
	}
}

# This = Fleet ( science vessel )
# From = Archaeological Site
on_arch_stage_finished = {

}

on_arch_site_finished = {
	events = {
		achievement.6 # Archaeologist achievement
	}
	random_events = {
		90 = 0
		10 = federations3.2100 # Joint Operation: Genius Caeli
	}
}

# This = Country, first member added
on_galactic_community_formed = {
	events = {
		galcom.60
	}

}
on_galactic_council_established = {
	events = {
		galcom.50
	}
}

# This = Country
on_add_community_member = {
	events = {
		galcom.60
		crisis.4116
	}
}

on_remove_community_member = {
	events = {
		galcom.61
		galcom.62
		crisis.4115
	}
}

on_add_to_council = {
	events = {
		emperor.95
	}
}

on_remove_from_council = {
}

on_join_alliance = {
}

on_leave_alliance = {
}

# This = subject
# From = subject's overlord
on_becoming_subject = {
	events = {
		action.214 # Join Overlord's Federation if laws permit
		crisis.5020 # Menace Objective - Vassalise Empires
		emperor.80 # New vassal joins Imperium
	}
}

# fires when a country finishes being integrated
# This = overlord
# From = subject
on_subject_integrated = {
	events = {
		crisis.2620 # BtC vassal integrated
	}
}

# fires when a country releases a sector as a vassal
# This = released vassal
# From = overlord
on_released_as_vassal = {
	events = {
		action.229 # Sort out their origin
		action.230 # Convert released megacorps into oligarchies
	}
}

# This = empire trying to leave federation
# From = empire who declined (federation leader)
on_ask_to_leave_federation_declined = {
	events = {
		action.205
	}
}

#spynetwork scope
on_spynetwork_formed = {
	events = {
		espionage.1 #First Spy Network founded
	}
}

# THIS = Country: Emperor
# FROM = Country added to council
on_add_to_imperial_council = {
}

# THIS = Country: Emperor
# FROM = Country removed from council
on_remove_from_imperial_council = {
}

#these three are fired from script, basically for modders who want to change how first contact works or add some extra flavour stories in without overwriting things
# THIS = first_contact
on_first_contact_started = {
}

#use for custom country types that need first contact paths
# THIS = first_contact
on_first_contact_stage_1_no_path = {
}

# THIS = first_contact
on_first_contact_generic_stage_2 = {
	events = {
		tutorial.2000 #"Conducting First Contact"
	}
}

# THIS = Planet: Branch office planet
# FROM = Country: Branch office owner
on_branch_office_established = {
	events = {
	}
}

# THIS = Planet: Branch office planet
# FROM = Country: Branch office owner
on_branch_office_closed = {
	events = {
		emperor.62
	}
}

# THIS = System: system being occupied
# FROM = Country: Conqueror of the system
# FROMFROM = Country: Original owner of the system
on_system_occupied = {
	events = {
		action.300
		crisis.6100
	}
}

# THIS = System: system being returned from occupation
# FROM = Country: Previous owner of the system
# FROMFROM = Country: Occupier of the system
on_system_returned = {
	events = {
		action.301
	}
}

# THIS = Espionage operation
# FROM = Operation target
on_operation_chapter_finished = {
}

# THIS = Espionage operation
# FROM = Operation target
on_operation_finished = {
}

# THIS = Espionage operation
on_operation_cancelled = {
	events = {
		action.330
	}
}

# Executed just as country is changing its government, before the new one is applied
# THIS = country
on_pre_government_changed = {
	events = {
	}
}

# Executed just as country is changing its government, after the new one is applied
# THIS = country
on_post_government_changed = {
	events = {
	}
}

# Executed when the Custodian's term ends
# THIS = country
on_custodian_term_ends = {
	events = {
		custodian.10
	}
}

# Executed when a country picks any tradition (including starters and finishers)
# THIS = country
on_tradition_picked = {}

# Executed when a country picks an ascension perk
# THIS = country
on_ascension_perk_picked = {
	events = {
		aquatics.120
	}
}

# Executed when a megastructure has a new owner
# this = new owner
# from = megastructure
# fromfrom = old owner (if existing)
on_megastructure_change_owner = {
	events = {
		crisis.6200	#Aetherophasic Engine captured by non-crisis
	}
}

# Executed when a megastructure is rendered ownerless
# this = solar system containing megastructure
# from = megastructure
# fromfrom = old owner (if existing)
on_megastructure_ownerless = {
}

on_crystalline_empire_task = {
	random_events = {
		10 = central.50 # Refugees from the Empire
		10 = central.60 # Secret Techniques
		10 = central.70 # Curious Scientist
	}
}

#Fired from destroy_star_system scripted effect
#This = system
#From = destroyer (if using a star cracker)
on_destroy_star_system = {
	events = {
		crisis.220
	}
}

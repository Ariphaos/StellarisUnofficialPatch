#	Example:
#
#	example_effect = {
#		add_resource = { energy = -100 }
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

# Debug scope printing
print_scope_effect = {
	log = "------------------------------"
	log = "- Printing the current scopes (trigger) -"
	log = "- This: \\[This.GetName]"
	log = "- Root: \\[Root.GetName]"
	log = "- Prev: \\[Prev.GetName]"
	log = "- PrevPrev: \\[Prev.Prev.GetName]"
	log = "- PrevPrevPrev: \\[Prev.Prev.Prev.GetName]"
	log = "- PrevPrevPrevPrev: \\[Prev.Prev.Prev.Prev.GetName]"
	log = "- From: \\[From.GetName]"
	log = "- FromFrom: \\[From.From.GetName]"
	log = "- FromFromFrom: \\[From.From.From.GetName]"
	log = "- FromFromFromFrom: \\[From.From.From.From.GetName]"
	log = "- This's Solar System: \\[This.GetStarName]"
	log = "- This's Planet: \\[This.Planet.GetName]"
	log = "- This's Sector: \\[This.Sector.GetName]"
	log = "- Root's Solar System: \\[Root.GetStarName]"
	log = "- Root's Owner's Name: \\[Root.Owner.GetName]"
	log = "- Root's Owner's Capital's Name: \\[Root.Owner.Capital.GetName]"
	log = "------------------------------"
}

establish_communication_with_subjects_and_federation = {
	every_subject = {
		limit = {
			NOT = { is_subject_type = scion }
			NOR = {
				has_communications = prevprev
				has_active_first_contact_with = prevprev
				has_country_flag = $FLAG$
			}
		}
		establish_communications_no_message = prevprev
		set_country_flag = $FLAG$
	}
	every_federation_ally = {
		limit = {
			NOR = {
				has_communications = prevprev
				has_active_first_contact_with = prevprev
				has_country_flag = $FLAG$
			}
		}
		establish_communications_no_message = prevprev
		set_country_flag = $FLAG$
	}
}


# Checks if Crystalline Entity country (global event target) exists
# Creates the country and saves it if it does not
create_crystal_country = {
	if = {
		limit = {
			NOT = {
				exists = event_target:crystal_country
			}
		}
		create_country = {
			name = "NAME_Prism"
			type = crystal
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = crystal_country
				set_variable = {	# Variable to track number of Crystal Splitter Fleets sent out throughout the game session.
					which = splitter_fleets_sent_var
					value = 0
				}
				every_country = {
					limit = {
						has_country_flag = crystals_encountered
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = crystals_encountered }
				}
			}
		}
	}
}

# Checks if Void Cloud country (global event target) exists
# Creates the country and saves it if it does not
create_cloud_country = {
	if = {
		limit = { NOT = { exists = event_target:cloud_country } }
		create_country = {
			name = "NAME_Enigmatic_Energy"
			type = cloud
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = cloud_country
				add_modifier = {
					modifier = cloud_power
					days = -1
				}
				every_country = {
					limit = {
						has_country_flag = void_clouds_encountered
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = void_clouds_encountered }
				}
			}
		}
	}
}

# Checks if Space Amoeba country (global event target) exists
# Creates the country and saves it if it does not
create_amoeba_country = {
	if = {
		limit = { NOT = { exists = event_target:amoeba_country } }
		create_country = {
			name = "NAME_Spaceborne_Organics"
			type = amoeba
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = amoeba_country
				if = {
					limit = {
						exists = event_target:amoeba_garrison_country
					}
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						target = event_target:amoeba_garrison_country
					}
				}
				if = {
					limit = {
						exists = event_target:amoeba_country_borderless
					}
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						target = event_target:amoeba_country_borderless
					}
				}
				every_country = {
					limit = {
						has_country_flag = amoeba_encountered
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = amoeba_encountered }
				}
			}
		}
	}
}

# Checks if Space Amoeba country (global event target) exists
# Creates the country and saves it if it does not
create_amoeba_country_borderless = {
	if = {
		limit = { NOT = { exists = event_target:amoeba_country_borderless } }
		create_country = {
			name = "NAME_Spaceborne_Organics"
			type = amoeba_borderless
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = amoeba_country_borderless
				if = {
					limit = {
						exists = event_target:amoeba_garrison_country
					}
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						target = event_target:amoeba_garrison_country
					}
				}
				if = {
					limit = {
						exists = event_target:amoeba_country
					}
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						target = event_target:amoeba_country
					}
				}
				every_country = {
					limit = {
						OR = {
							AND = {
								exists = event_target:amoeba_country
								has_communications = event_target:amoeba_country
							}
							has_country_flag = amoeba_encountered
						}
					}
					establish_communications_no_message = event_target:amoeba_country_borderless
					establish_communication_with_subjects_and_federation = { FLAG = amoeba_encountered }
				}
			}
		}
	}
}

# Checks if Mining Drone country (global event target) exists
# Creates the country and saves it if it does not
create_drone_country = {
	if = {
		limit = { NOT = { exists = event_target:drone_country } }
		create_country = {
			name = "NAME_Mineral_Extraction_Operation"
			type = drone
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = drone_country
				set_graphical_culture = ancient_drone_01
				every_country = {
					limit = {
						has_country_flag = drones_encountered
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = drones_encountered }
				}
			}
		}
	}
}

# Checks if Mining Drone Expansion Fleet country (global event target) exists; creates the country if it does not
create_mining_drone_expansion_country = {
	if = {
		limit = {
			NOT = { exists = event_target:mining_drone_expansion_country }
		}
		create_country = {
			name = "NAME_Mining_Drone_Expansion_Initiative"
			type = drone_faction
			flag = {
				icon = {
					category = "legion"
					file = "flag_mp_beta_04.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = { "black" "black" "null" "null" }
			}
			effect = {
				set_country_flag = mining_drone_expansion_country
				save_global_event_target_as = mining_drone_expansion_country
				set_graphical_culture = ancient_drone_01
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					set_friendly = no
				}
				every_country = {
					limit = {
						OR = {
							has_country_flag = drones_encountered
							has_communications = event_target:drone_country
						}
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = drones_encountered }
				}
			}
		}
	}
}
# Checks if Aggressive Mining Drone Expansion Fleet country (global event target) exists; creates the country if it does not
create_aggressive_drone_expansion_country = {
	if = {
		limit = {
			NOT = { exists = event_target:aggressive_drone_expansion_country }
		}
		create_country = {
			name = "NAME_Aggressive_Mining_Drone_Expansion_Initiative"
			type = drone_faction
			flag = {
				icon = {
					category = "legion"
					file = "flag_mp_beta_05.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = { "black" "black" "null" "null" }
			}
			effect = {
				set_country_flag = aggressive_drone_expansion_country
				save_global_event_target_as = aggressive_drone_expansion_country
				set_graphical_culture = ancient_drone_01
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					set_friendly = no
				}
				every_country = {
					limit = {
						OR = {
							has_country_flag = drones_encountered
							has_communications = event_target:drone_country
						}
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = drones_encountered }
				}
			}
		}
	}
}
# Checks if Cracked Crystalline Shard country (global event target) exists; creates the country if it does not
create_crystal_splitter_country = {
	if = {
		limit = {
			NOT = { exists = event_target:crystal_splitter_country }
		}
		create_country = {
			name = "NAME_Cracked_Crystalline_Shard"
			type = crystal_faction
			flag = {
				icon = {
					category = "pointy"
					file = "flag_pointy_15.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = { "black" "black" "null" "null" }
			}
			effect = {
				set_country_flag = crystal_splitter_country
				save_global_event_target_as = crystal_splitter_country
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					set_friendly = no
				}
				every_country = {
					limit = { has_modifier = pacified_crystals }
					prev = {
						set_faction_hostility = {
							set_hostile = no
							set_neutral = yes
							target = prev
						}
					}
				}
				every_country = {
					limit = {
						OR = {
							has_country_flag = crystals_encountered
							has_communications = event_target:crystal_country
						}
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = crystals_encountered }
				}
			}
		}
	}
}

# Checks if Tiyanki country (global event target) exists
# Creates the country and saves it if it does not
create_tiyanki_country = {
	if = {
		limit = { NOT = { exists = event_target:tiyanki_country } }
		create_country = {
			name = "NAME_Placid_Leviathans"
			type = tiyanki
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = tiyanki_country
				every_country = {
					limit = {
						has_country_flag = tiyanki_encountered
					}
					establish_communications_no_message = prev
					establish_communication_with_subjects_and_federation = { FLAG = tiyanki_encountered }
				}
			}
		}
	}
}

# Checks if Subterraneans (player-only event nation) exists
# Creates the country and saves it if it does not
# use in planet scope
create_subterranean_nation = {
	if = {
		limit = {
			NOT = {
				any_country = {
					is_country_type = adversary
					has_country_flag = subterranean_nation
				}
			}
		}
		create_species = {
			name = random
			class = random_non_machine
			portrait = random
			traits = random
			homeworld = root
		}
		create_country = {
			name = "NAME_Subterranean_Nation"
			species = last_created_species
			type = adversary
			ethos = random
			auto_delete = no
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_10.dds"
				}
				background= {
					category = "backgrounds"
					file = "new_dawn.dds"
				}
				colors={
					"red"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				set_relation_flag = {
					who = root.owner
					flag = subterror
				}
				set_country_flag = subterranean_nation
				establish_contact = { who = event_target:subterranean_planet_owner location = root }
				establish_communications_no_message = event_target:subterranean_planet_owner
				save_event_target_as = subterranean_nation
				owner_species = { save_event_target_as = subterranean_species }
			}
		}
	}
	else_if = {
		limit = {
			NOT = { exists = event_target:subterranean_nation }
		}
		random_country = {
			limit = {
				is_country_type = adversary
				has_country_flag = subterranean_nation
			}
			save_event_target_as = subterranean_nation
		}
	}
}

# Checks if Pirate country (global event target) exists
# Creates the country and saves it if it does not
create_pirate_country = {
	if = {
		limit = {
			NOT = {
				exists = event_target:pirate_country
			}
		}
		create_country = {
			name = "NAME_Privateers"
			name_list = "PRT1"
			species = random
			type = pirate
			flag = {
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors ={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = pirate_country
				randomize_flag_symbol = "pirate"
			}
		}
	}
}

### Changes a pops ethic one level to the opposite
##Checks for the following flags, make sure to set them before you run the effect:
#ethic_diverge_from_militarist
#ethic_diverge_from_pacifist
#ethic_diverge_from_materialist
#ethic_diverge_from_spiritualist
#ethic_diverge_from_authoritarian
#ethic_diverge_from_egalitarian
##Also check pops for the pop_changed_ethics flag so you don't redo it on the same pop again.
pop_diverge_ethic = {
	if = {
		limit = {
			has_ethic = ethic_militarist
			has_pop_flag = ethic_diverge_from_militarist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_militarist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_militarist
			}
			has_pop_flag = ethic_diverge_from_militarist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_pacifist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_pacifist
			has_pop_flag = ethic_diverge_from_pacifist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_pacifist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_pacifist
			}
			has_pop_flag = ethic_diverge_from_pacifist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_militarist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_materialist
			has_pop_flag = ethic_diverge_from_materialist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_materialist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_materialist
			}
			has_pop_flag = ethic_diverge_from_materialist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_pacifist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_spiritualist
			has_pop_flag = ethic_diverge_from_spiritualist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_spiritualist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_spiritualist
			}
			has_pop_flag = ethic_diverge_from_spiritualist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_militarist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_authoritarian
			has_pop_flag = ethic_diverge_from_authoritarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_authoritarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_authoritarian
			}
			has_pop_flag = ethic_diverge_from_authoritarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_egalitarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_egalitarian
			has_pop_flag = ethic_diverge_from_egalitarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_egalitarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_egalitarian
			}
			has_pop_flag = ethic_diverge_from_egalitarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_authoritarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
}


# Adds a trait to a leader
add_random_leader_trait = {
	if = { #Is a science ship commander
		limit = {
			leader_class = scientist
			NOR = {
				is_researching_area = society
				is_researching_area = engineering
				is_researching_area = physics
			}
		}
		while = {
			limit = {
				NOT = { has_leader_flag = has_gained_trait }
			}
			random_list = {
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_adaptable }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_adaptable
						set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_resilient }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_resilient
						set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_stubborn
								has_trait = leader_trait_rigid_programming
								owner = { has_authority = "auth_hive_mind" }
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_stubborn
							set_timed_leader_flag = { flag = gained_leader_trait_stubborn days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_rigid_programming
							set_timed_leader_flag = { flag = gained_leader_trait_rigid_programming days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_substance_abuser }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_substance_abuser
						set_timed_leader_flag = { flag = gained_leader_trait_substance_abuser days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_arrested_development }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_arrested_development
						set_timed_leader_flag = { flag = gained_leader_trait_arrested_development days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_meticulous }
						}
						add_trait = leader_trait_meticulous
						set_timed_leader_flag = { flag = gained_leader_trait_meticulous days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_spark_of_genius }
						}
						add_trait = leader_trait_spark_of_genius
						set_timed_leader_flag = { flag = gained_leader_trait_spark_of_genius days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_carefree }
						}
						add_trait = leader_trait_carefree
						set_timed_leader_flag = { flag = gained_leader_trait_carefree days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_roamer
								has_trait = leader_trait_cataloger
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_roamer
							set_timed_leader_flag = { flag = gained_leader_trait_roamer days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_cataloger
							set_timed_leader_flag = { flag = gained_leader_trait_cataloger days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_archaeologist
								has_trait = leader_trait_archaeologist_ancrel
							}
						}
						if = {
							limit = {
								owner = { has_ancrel = yes }
							}
							add_trait = leader_trait_archaeologist_ancrel
							set_timed_leader_flag = { flag = leader_trait_archaeologist_ancrel days = 7 }
						}
						if = {
							limit = {
								owner = { has_ancrel = no }
							}
							add_trait = leader_trait_archaeologist
							set_timed_leader_flag = { flag = leader_trait_archaeologist days = 7 }
						}

						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_maniacal }
						}
						add_trait = leader_trait_maniacal
						set_timed_leader_flag = { flag = gained_leader_trait_maniacal days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_custom_AI_assistant }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_custom_AI_assistant
						set_timed_leader_flag = { flag = gained_leader_trait_custom_AI_assistant days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_materials }
						}
						add_trait = leader_trait_expertise_materials
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_materials days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_propulsion }
						}
						add_trait = leader_trait_expertise_propulsion
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_propulsion days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_voidcraft }
						}
						add_trait = leader_trait_expertise_voidcraft
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_voidcraft days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_industry }
						}
						add_trait = leader_trait_expertise_industry
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_industry days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_field_manipulation }
						}
						add_trait = leader_trait_expertise_field_manipulation
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_field_manipulation days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_particles }
						}
						add_trait = leader_trait_expertise_particles
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_particles days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_computing }
						}
						add_trait = leader_trait_expertise_computing
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_computing days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_expertise_psionics
								owner = { has_ethic = ethic_gestalt_consciousness }
								species = { has_trait = trait_mechanical }
							}
						}
						add_trait = leader_trait_expertise_psionics
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_psionics days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_new_worlds }
						}
						add_trait = leader_trait_expertise_new_worlds
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_new_worlds days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_statecraft }
						}
						add_trait = leader_trait_expertise_statecraft
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_statecraft days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_biology }
						}
						add_trait = leader_trait_expertise_biology
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_biology days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_expertise_military_theory }
						}
						add_trait = leader_trait_expertise_military_theory
						set_timed_leader_flag = { flag = gained_leader_trait_expertise_military_theory days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_paranoid }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_paranoid
						set_timed_leader_flag = { flag = gained_leader_trait_paranoid days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
			}
		}
		owner = { country_event = { id = leader.21} }
	}
	if = {
		limit = {
			leader_class = admiral
		}
		while = {
			limit = {
				NOT = { has_leader_flag = has_gained_trait }
			}
			random_list = {
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_adaptable }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_adaptable
						set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_resilient
								owner = { has_ethic = ethic_gestalt_consciousness }
								species = { has_trait = trait_mechanical }
							}
						}
						add_trait = leader_trait_resilient
						set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_stubborn
								has_trait = leader_trait_rigid_programming
								owner = { has_authority = "auth_hive_mind" }
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_stubborn
							set_timed_leader_flag = { flag = gained_leader_trait_stubborn days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_rigid_programming
							set_timed_leader_flag = { flag = gained_leader_trait_rigid_programming days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_substance_abuser }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_substance_abuser
						set_timed_leader_flag = { flag = gained_leader_trait_substance_abuser days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_arrested_development }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_arrested_development
						set_timed_leader_flag = { flag = gained_leader_trait_arrested_development days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_trickster }
						}
						add_trait = leader_trait_trickster
						set_timed_leader_flag = { flag = gained_leader_trait_trickster days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_fleet_logistician
								has_trait = leader_trait_maintenance_loop
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_fleet_logistician
							set_timed_leader_flag = { flag = gained_leader_trait_fleet_logistician days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_maintenance_loop
							set_timed_leader_flag = { flag = gained_leader_trait_maintenance_loop days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_engineer }
						}
						add_trait = leader_trait_engineer
						set_timed_leader_flag = { flag = gained_leader_trait_engineer days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_aggressive }
						}
						add_trait = leader_trait_aggressive
						set_timed_leader_flag = { flag = gained_leader_trait_aggressive days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_cautious }
						}
						add_trait = leader_trait_cautious
						set_timed_leader_flag = { flag = gained_leader_trait_cautious days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_scout }
						}
						add_trait = leader_trait_scout
						set_timed_leader_flag = { flag = gained_leader_trait_scout days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_unyielding }
						}
						add_trait = leader_trait_unyielding
						set_timed_leader_flag = { flag = gained_leader_trait_unyielding days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_gale_speed }
						}
						add_trait = leader_trait_gale_speed
						set_timed_leader_flag = { flag = gained_leader_trait_gale_speed days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_lethargic }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_lethargic
						set_timed_leader_flag = { flag = gained_leader_trait_lethargic days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
			}
		}
		owner = { country_event = { id = leader.22} }
	}
	if = {
		limit = {
			leader_class = governor
		}
		while = {
			limit = {
				NOT = { has_leader_flag = has_gained_trait }
			}
			random_list = {
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_adaptable }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_adaptable
						set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_resilient }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_resilient
						set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_stubborn
								has_trait = leader_trait_rigid_programming
								owner = { has_authority = "auth_hive_mind" }
								owner = { has_civic = "civic_philosopher_king" }
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_stubborn
							set_timed_leader_flag = { flag = gained_leader_trait_stubborn days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_rigid_programming
							set_timed_leader_flag = { flag = gained_leader_trait_rigid_programming days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_substance_abuser }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
							NOT = { owner = { has_civic = "civic_philosopher_king" } }
						}
						add_trait = leader_trait_substance_abuser
						set_timed_leader_flag = { flag = gained_leader_trait_substance_abuser days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_righteous
								has_trait = leader_trait_corrupt
							}
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
							NOT = { owner = { has_civic = "civic_philosopher_king" } }
						}
						add_trait = leader_trait_corrupt
						set_timed_leader_flag = { flag = gained_leader_trait_corrupt days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_righteous
								has_trait = leader_trait_corrupt
							}
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_righteous
						set_timed_leader_flag = { flag = gained_leader_trait_righteous days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_arrested_development }
							NOT = { owner = { has_civic = "civic_philosopher_king" } }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_arrested_development
						set_timed_leader_flag = { flag = gained_leader_trait_arrested_development days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_iron_fist
								owner = { allows_slavery = no }
								owner = { has_authority = "auth_machine_intelligence" }
							}
						}
						add_trait = leader_trait_iron_fist
						set_timed_leader_flag = { flag = gained_leader_trait_iron_fist days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_architectural_interest }
						}
						add_trait = leader_trait_architectural_interest
						set_timed_leader_flag = { flag = gained_leader_trait_architectural_interest days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_intellectual
								has_trait = leader_trait_analytical
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_intellectual
							set_timed_leader_flag = { flag = gained_leader_trait_intellectual days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_analytical
							set_timed_leader_flag = { flag = gained_leader_trait_analytical days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_environmental_engineer
								has_trait = leader_trait_bulldozer
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_environmental_engineer
							set_timed_leader_flag = { flag = gained_leader_trait_environmental_engineer days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_bulldozer
							set_timed_leader_flag = { flag = gained_leader_trait_bulldozer days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
			}
		}
		owner = { country_event = { id = leader.23} }
	}
	if = {
		limit = {
			leader_class = general
		}
		while = {
			limit = {
				NOT = { has_leader_flag = has_gained_trait }
			}
			random_list = {
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_adaptable }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_adaptable
						set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_resilient }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_resilient
						set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_stubborn
								has_trait = leader_trait_rigid_programming
								owner = { has_authority = "auth_hive_mind" }
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_stubborn
							set_timed_leader_flag = { flag = gained_leader_trait_stubborn days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_rigid_programming
							set_timed_leader_flag = { flag = gained_leader_trait_rigid_programming days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_substance_abuser }
							NOT = { owner = { has_ethic = "ethic_gestalt_consciousness" } }
						}
						add_trait = leader_trait_substance_abuser
						set_timed_leader_flag = { flag = gained_leader_trait_substance_abuser days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_arrested_development }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_arrested_development
						set_timed_leader_flag = { flag = gained_leader_trait_arrested_development days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							owner = {
								NOT = { has_authority = "auth_machine_intelligence" }
							}
							NOT = { has_trait = leader_trait_butcher }
							NOT = { has_trait = leader_trait_restrained }
						}
						add_trait = leader_trait_restrained
						set_timed_leader_flag = { flag = gained_leader_trait_restrained days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_charismatic
								has_trait = leader_trait_demoralizer
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_charismatic
							set_timed_leader_flag = { flag = gained_leader_trait_charismatic days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_demoralizer
							set_timed_leader_flag = { flag = gained_leader_trait_demoralizer days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_butcher }
							NOT = { has_trait = leader_trait_restrained }
						}
						add_trait = leader_trait_butcher
						set_timed_leader_flag = { flag = gained_leader_trait_butcher days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_glory_seeker
								has_trait = leader_trait_demoralizer
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_glory_seeker
							set_timed_leader_flag = { flag = gained_leader_trait_glory_seeker days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_demoralizer
							set_timed_leader_flag = { flag = gained_leader_trait_demoralizer days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_armchair_commander
								has_trait = leader_trait_erratic_morality_core
							}
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_armchair_commander
							set_timed_leader_flag = { flag = gained_leader_trait_armchair_commander days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_erratic_morality_core
							set_timed_leader_flag = { flag = gained_leader_trait_erratic_morality_core days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_army_logistician
								has_trait = leader_trait_parts_cannibalizer
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_army_logistician
							set_timed_leader_flag = { flag = gained_leader_trait_army_logistician days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_parts_cannibalizer
							set_timed_leader_flag = { flag = gained_leader_trait_parts_cannibalizer days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
			}
		}
		owner = { country_event = { id = leader.24} }
	}
	if = {
		limit = {
			leader_class = ruler
		}
		while = {
			limit = {
				NOT = { has_leader_flag = has_gained_trait }
			}
			random_list = {
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_adaptable }
						}
						add_trait = leader_trait_adaptable
						set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_resilient }
						}
						add_trait = leader_trait_resilient
						set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = leader_trait_stubborn
								has_trait = leader_trait_rigid_programming
								owner = { has_authority = "auth_hive_mind" }
								owner = { has_civic = "civic_philosopher_king" }
							}
						}
						if = {
							limit = {
								owner = {
									NOT = { has_authority = "auth_machine_intelligence" }
								}
							}
							add_trait = leader_trait_stubborn
							set_timed_leader_flag = { flag = gained_leader_trait_stubborn days = 7 }
						}
						if = {
							limit = {
								owner = { has_authority = "auth_machine_intelligence" }
							}
							add_trait = leader_trait_rigid_programming
							set_timed_leader_flag = { flag = gained_leader_trait_rigid_programming days = 7 }
						}
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_substance_abuser }
							NOT = { owner = { has_civic = "civic_philosopher_king" } }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_substance_abuser
						set_timed_leader_flag = { flag = gained_leader_trait_substance_abuser days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_arrested_development }
							NOT = { owner = { has_civic = "civic_philosopher_king" } }
							NOT = { owner = { has_civic = "civic_hive_one_mind" } }
						}
						add_trait = leader_trait_arrested_development
						set_timed_leader_flag = { flag = gained_leader_trait_arrested_development days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = trait_ruler_corvette_focus
								has_trait = trait_ruler_destroyer_focus
								has_trait = trait_ruler_cruiser_focus
								has_trait = trait_ruler_battleship_focus
							}
							owner = { has_technology = "tech_destroyers" }
						}
						add_trait = trait_ruler_corvette_focus
						set_timed_leader_flag = { flag = gained_trait_ruler_corvette_focus days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = trait_ruler_corvette_focus
								has_trait = trait_ruler_destroyer_focus
								has_trait = trait_ruler_cruiser_focus
								has_trait = trait_ruler_battleship_focus
							}
							owner = { has_technology = "tech_destroyers" }
						}
						add_trait = trait_ruler_destroyer_focus
						set_timed_leader_flag = { flag = gained_trait_ruler_destroyer_focus days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = trait_ruler_corvette_focus
								has_trait = trait_ruler_destroyer_focus
								has_trait = trait_ruler_cruiser_focus
								has_trait = trait_ruler_battleship_focus
							}
							owner = { has_technology = "tech_cruisers" }
						}
						add_trait = trait_ruler_cruiser_focus
						set_timed_leader_flag = { flag = gained_trait_ruler_cruiser_focus days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOR = {
								has_trait = trait_ruler_corvette_focus
								has_trait = trait_ruler_destroyer_focus
								has_trait = trait_ruler_cruiser_focus
								has_trait = trait_ruler_battleship_focus
							}
							owner = { has_technology = "tech_battleships" }
						}
						add_trait = trait_ruler_battleship_focus
						set_timed_leader_flag = { flag = gained_trait_ruler_battleship_focus days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_recruiter }
						}
						add_trait = trait_ruler_recruiter
						set_timed_leader_flag = { flag = gained_trait_ruler_recruiter days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_fortifier }
						}
						add_trait = trait_ruler_fortifier
						set_timed_leader_flag = { flag = gained_trait_ruler_fortifier days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_logistic_understanding }
						}
						add_trait = trait_ruler_logistic_understanding
						set_timed_leader_flag = { flag = gained_trait_ruler_logistic_understanding days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_military_pioneer }
						}
						add_trait = trait_ruler_military_pioneer
						set_timed_leader_flag = { flag = gained_trait_ruler_military_pioneer days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_warlike }
						}
						add_trait = trait_ruler_warlike
						set_timed_leader_flag = { flag = gained_trait_ruler_warlike days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_architectural_sense }
						}
						add_trait = trait_ruler_architectural_sense
						set_timed_leader_flag = { flag = gained_trait_ruler_architectural_sense days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_frontier_spirit }
						}
						add_trait = trait_ruler_frontier_spirit
						set_timed_leader_flag = { flag = gained_trait_ruler_frontier_spirit days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_world_shaper }
						}
						add_trait = trait_ruler_world_shaper
						set_timed_leader_flag = { flag = gained_trait_ruler_world_shaper days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_home_in_the_sky }
						}
						add_trait = trait_ruler_home_in_the_sky
						set_timed_leader_flag = { flag = gained_trait_ruler_home_in_the_sky days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_industrialist }
						}
						add_trait = trait_ruler_industrialist
						set_timed_leader_flag = { flag = gained_trait_ruler_industrialist days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				100 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_eye_for_talent }
						}
						add_trait = trait_ruler_eye_for_talent
						set_timed_leader_flag = { flag = gained_trait_ruler_eye_for_talent days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_deep_connections }
						}
						add_trait = trait_ruler_deep_connections
						set_timed_leader_flag = { flag = gained_trait_ruler_deep_connections days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_champion_of_the_people }
						}
						add_trait = trait_ruler_champion_of_the_people
						set_timed_leader_flag = { flag = gained_trait_ruler_champion_of_the_people days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_expansionist }
						}
						add_trait = trait_ruler_expansionist
						set_timed_leader_flag = { flag = gained_trait_ruler_expansionist days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_fertility_preacher }
						}
						add_trait = trait_ruler_fertility_preacher
						set_timed_leader_flag = { flag = gained_trait_ruler_fertility_preacher days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_investor }
						}
						add_trait = trait_ruler_investor
						set_timed_leader_flag = { flag = gained_trait_ruler_investor days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_explorer }
						}
						add_trait = trait_ruler_explorer
						set_timed_leader_flag = { flag = gained_trait_ruler_explorer days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = trait_ruler_charismatic }
						}
						add_trait = trait_ruler_charismatic
						set_timed_leader_flag = { flag = gained_trait_ruler_charismatic days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
				5 = {
					if = {
						limit = {
							NOT = { has_trait = leader_trait_fleet_organizer }
						}
						add_trait = leader_trait_fleet_organizer
						set_timed_leader_flag = { flag = gained_leader_trait_fleet_organizer days = 7 }
						set_timed_leader_flag = { flag = has_gained_trait days = 7 }
					}
				}
			}
		}
		owner = { country_event = { id = leader.25} }
	}
}

# Change planet class one step up in temperature
increase_planet_temperature = {
	if = {
		limit = { is_planet_class = pc_barren }
		change_pc = pc_molten
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_desert }
		change_pc = pc_molten
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_arid }
		change_pc = pc_barren
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_savannah }
		change_pc = pc_barren
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_ocean }
		change_pc = pc_desert
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_continental }
		change_pc = pc_arid
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_tropical }
		change_pc = pc_savannah
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_arctic }
		change_pc = pc_ocean
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_alpine }
		change_pc = pc_continental
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_tundra }
		change_pc = pc_tropical
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_barren_cold }
		change_pc = pc_tundra
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_frozen }
		change_pc = pc_arctic
		reroll_planet = yes
		clear_blockers = yes
	}
}

# Change planet class one step down in temperature
decrease_planet_temperature = {
	if = {
		limit = { is_planet_class = pc_molten }
		change_pc = pc_desert
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_barren }
		change_pc = pc_arid
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_desert }
		change_pc = pc_ocean
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_arid }
		change_pc = pc_continental
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_savannah }
		change_pc = pc_tropical
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_ocean }
		change_pc = pc_arctic
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_continental }
		change_pc = pc_alpine
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_tropical }
		change_pc = pc_tundra
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_arctic }
		change_pc = pc_frozen
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_alpine }
		change_pc = pc_frozen
		reroll_planet = yes
		clear_blockers = yes
	}
	else_if = {
		limit = { is_planet_class = pc_tundra }
		random_list = {
			50 = { change_pc = pc_frozen }
			50 = { change_pc = pc_barren_cold }
		}
		reroll_planet = yes
		clear_blockers = yes
	}
}

spawn_sun_temperature_effect = {
	if = {
		limit = { is_planet_class = pc_g_star }
		create_ambient_object = {
			location = this
			type = yellow_sun_grow_particle_object
			duration = 1

			use_3d_location= yes

			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 360 }
			entity_offset_height = { min = 0 max = 0 }

			entity_scale_to_size = yes
			scale = 0.01
		}
	}
	else_if = {
		limit = {
			OR = {
				is_planet_class = pc_k_star
				is_planet_class = pc_m_star
			}
		}
		create_ambient_object = {
			location = this
			type = red_sun_grow_particle_object
			duration = 1

			use_3d_location= yes

			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 360 }
			entity_offset_height = { min = 0 max = 0 }

			entity_scale_to_size = yes
			scale = 0.01
		}
	}
	else_if = {
		limit = {
			OR = {
				is_planet_class = pc_b_star
				is_planet_class = pc_a_star
				is_planet_class = pc_f_star
				is_planet_class = pc_pulsar
				is_planet_class = pc_neutron_star
			}
		}
		create_ambient_object = {
			location = this
			type = blue_sun_grow_particle_object
			duration = 1

			use_3d_location= yes

			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 360 }
			entity_offset_height = { min = 0 max = 0 }

			entity_scale_to_size = yes
			scale = 0.01
		}
	}
}

spawn_planet_temperature_effect = {
	create_ambient_object = {
		location = this
		type = planet_heat_up_particle_object
		duration = 30

		use_3d_location= yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.15
	}
}

spawn_planet_temperature_effect2 = {
	create_ambient_object = {
		location = this
		#type = planet_heat_up_particle_object
		type = blue_sun_grow_particle_object
		duration = 3

		use_3d_location= yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.03
	}
}

create_curator_guardian_poi = {
	root = {
		if = {
			limit = {
				NOT = {
					has_event_chain = curator_poi_chain
				}
			}
			begin_event_chain = {
				event_chain = curator_poi_chain
				target = this
			}
		}
		create_point_of_interest = {
			id = $POI$
			name = curator_poi_title
			desc = curator_poi_desc
			event_chain = curator_poi_chain
			location = prevprevprev
		}
	}
}

end_curator_chain = {
	if = {
		limit = {
			has_event_chain = curator_poi_chain
			NOR = {
				has_point_of_interest = { poi = curator_poi_dragon }
				has_point_of_interest = { poi = curator_poi_technosphere }
				has_point_of_interest = { poi = curator_poi_wraith }
				has_point_of_interest = { poi = curator_poi_horror }
				has_point_of_interest = { poi = curator_poi_fortress }
				has_point_of_interest = { poi = curator_poi_hiver }
				has_point_of_interest = { poi = curator_poi_stellarite }
				has_point_of_interest = { poi = curator_poi_dreadnought }
				has_point_of_interest = { poi = curator_poi_hatchling }
				has_point_of_interest = { poi = curator_poi_tiyanki }
				has_point_of_interest = { poi = curator_poi_scavenger_bot }
			}
		}
		end_event_chain = curator_poi_chain
	}
}

make_intelligent = {
	if = {
		limit = { pop_has_trait = trait_intelligent }
		# nothing
	}
	else = {
		# remove opposite traits
		if = {
			limit = { pop_has_trait = trait_nerve_stapled }
			modify_species = {
				species = this
				remove_trait = trait_nerve_stapled
			}
		}
		if = {
			limit = { pop_has_trait = trait_erudite }
			modify_species = {
				species = this
				remove_trait = trait_erudite
			}
		}
		if = {
			limit = { pop_has_trait = trait_enigmatic_intelligence }
			modify_species = {
				species = this
				remove_trait = trait_enigmatic_intelligence
			}
		}
		if = {
			limit = { pop_has_trait = trait_enigmatic_intelligence_poor }
			modify_species = {
				species = this
				remove_trait = trait_enigmatic_intelligence_poor
			}
		}
		# add trait
		modify_species = {
			species = this
			add_trait = trait_intelligent
		}
	}
}

make_resilient = {
	if = {
		limit = { pop_has_trait = trait_resilient }
		# nothing
	}
	else = {
		# no opposites
		modify_species = {
			species = this
			add_trait = trait_resilient
		}
	}
}

 ##create a subspecies with the Intelligent and Fanatically Pacifist traits, and remove Militarist or Fanatically Militarist
make_unleashed_messenger = {
	if = {
		limit = { root = { is_species_class = ART } }
		if = {
			limit = { NOT = { root = { species_portrait = art11 } } }
			modify_species = { portrait = art11 }
		}
		else = { modify_species = { portrait = art10 } }
	}
	else_if = {
		limit = { root = { is_species_class = MAM } }
		if = {
			limit = { NOT = { root = { species_portrait = mam10 } } }
			modify_species = { portrait = mam10 }
		}
		else = { modify_species = { portrait = mam13 } }
	}
	else_if = {
		limit = { root = { is_species_class = FUN } }
		if = {
			limit = { NOT = { root = { species_portrait = fun12 } } }
			modify_species = { portrait = fun12 }
		}
		else = { modify_species = { portrait = fun10 } }
	}
	else_if = {
		limit = { root = { is_species_class = HUM } }
		if = {
			limit = { NOT = { root = { species_portrait = humanoid_04 } } }
			modify_species = { portrait = humanoid_04 }
		}
		else = { modify_species = { portrait = humanoid_03 } }
	}
	else_if = {
		limit = { root = { is_species_class = MOL } }
		if = {
			limit = { NOT = { root = { species_portrait = mol11 } } }
			modify_species = { portrait = mol11 }
		}
		else = { modify_species = { portrait = mol12 } }
	}
	else_if = {
		limit = { root = { is_species_class = PLANT } }
		if = {
			limit = { NOT = { root = { species_portrait = pla15 } } }
			modify_species = { portrait = pla15 }
		}
		else = { modify_species = { portrait = pla10 } }
	}
	else_if = {
		limit = { root = { is_species_class = REP } }
		if = {
			limit = { NOT = { root = { species_portrait = rep8 } } }
			modify_species = { portrait = rep8 }
		}
		else = { modify_species = { portrait = rep4 } }
	}
	else_if = {
		limit = { root = { is_species_class = AVI } }
		if = {
			limit = { NOT = { root = { species_portrait = avi1 } } }
			modify_species = { portrait = avi1 }
		}
		else = { modify_species = { portrait = avi4 } }
	}
	else_if = {
		limit = { root = { is_species_class = LITHOID } }
		if = {
			limit = { NOT = { root = { species_portrait = lith10 } } }
			modify_species = { portrait = lith10 }
		}
		else = { modify_species = { portrait = lith4 } }
	}
	else_if = {
		limit = { root = { is_species_class = NECROID } }
		if = {
			limit = { NOT = { root = { species_portrait = nec12 } } }
			modify_species = { portrait = nec12 }
		}
		else = { modify_species = { portrait = nec11 } }
	}
	else_if = {
		limit = { root = { is_species_class = AQUATIC } }
		if = {
			limit = { NOT = { root = { species_portrait = aqu4 } } }
			modify_species = { portrait = aqu4 }
		}
		else = { modify_species = { portrait = aqu7 } }
	}
}

make_leashed_messenger = {
	if = {
		limit = { root = { is_species_class = ART } }
		if = {
			limit = { NOT = { root = { species_portrait = art11 } } }
			modify_species = { portrait = art11 }
		}
		else = { modify_species = { portrait = art10 } }
	}
	else_if = {
		limit = { root = { is_species_class = MAM } }
		if = {
			limit = { NOT = { root = { species_portrait = mam10 } } }
			modify_species = { portrait = mam10 }
		}
		else = { modify_species = { portrait = mam13 } }
	}
	else_if = {
		limit = { root = { is_species_class = FUN } }
		if = {
			limit = { NOT = { root = { species_portrait = fun12 } } }
			modify_species = { portrait = fun12 }
		}
		else = { modify_species = { portrait = fun10 } }
	}
	else_if = {
		limit = { root = { is_species_class = HUM } }
		if = {
			limit = { NOT = { root = { species_portrait = humanoid_04 } } }
			modify_species = { portrait = humanoid_04 }
		}
		else = { modify_species = { portrait = humanoid_03 } }
	}
	else_if = {
		limit = { root = { is_species_class = MOL } }
		if = {
			limit = { NOT = { root = { species_portrait = mol11 } } }
			modify_species = { portrait = mol11 }
		}
		else = { modify_species = { portrait = mol12 } }
	}
	else_if = {
		limit = { root = { is_species_class = PLANT } }
		if = {
			limit = { NOT = { root = { species_portrait = pla15 } } }
			modify_species = { portrait = pla15 }
		}
		else = { modify_species = { portrait = pla10 } }
	}
	else_if = {
		limit = { root = { is_species_class = REP } }
		if = {
			limit = { NOT = { root = { species_portrait = rep8 } } }
			modify_species = { portrait = rep8 }
		}
		else = { modify_species = { portrait = rep4 } }
	}
	else_if = {
		limit = { root = { is_species_class = AVI } }
		if = {
			limit = { NOT = { root = { species_portrait = avi1 } } }
			modify_species = { portrait = avi1 }
		}
		else = { modify_species = { portrait = avi4 } }
	}
	else_if = {
		limit = { root = { is_species_class = LITHOID } }
		if = {
			limit = { NOT = { root = { species_portrait = lith10 } } }
			modify_species = { portrait = lith10 }
		}
		else = { modify_species = { portrait = lith4 } }
	}
	else_if = {
		limit = { root = { is_species_class = NECROID } }
		if = {
			limit = { NOT = { root = { species_portrait = nec12 } } }
			modify_species = { portrait = nec12 }
		}
		else = { modify_species = { portrait = nec11 } }
	}
	else_if = {
		limit = { root = { is_species_class = AQUATIC } }
		if = {
			limit = { NOT = { root = { species_portrait = aqu4 } } }
			modify_species = { portrait = aqu4 }
		}
		else = { modify_species = { portrait = aqu7 } }
	}
}

wipe_pop_ethos = {
	if = {
		limit = { pop_has_ethic = ethic_fanatic_egalitarian }
		pop_remove_ethic = ethic_fanatic_egalitarian
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_authoritarian }
		pop_remove_ethic = ethic_fanatic_authoritarian
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_pacifist }
		pop_remove_ethic = ethic_fanatic_pacifist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_militarist }
		pop_remove_ethic = ethic_fanatic_militarist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_xenophobe }
		pop_remove_ethic = ethic_fanatic_xenophobe
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_xenophile }
		pop_remove_ethic = ethic_fanatic_xenophile
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_materialist }
		pop_remove_ethic = ethic_fanatic_materialist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_spiritualist }
		pop_remove_ethic = ethic_fanatic_spiritualist
	}
	if = {
		limit = { pop_has_ethic = ethic_egalitarian }
		pop_remove_ethic = ethic_egalitarian
	}
	if = {
		limit = { pop_has_ethic = ethic_authoritarian }
		pop_remove_ethic = ethic_authoritarian
	}
	if = {
		limit = { pop_has_ethic = ethic_pacifist }
		pop_remove_ethic = ethic_pacifist
	}
	if = {
		limit = { pop_has_ethic = ethic_militarist }
		pop_remove_ethic = ethic_militarist
	}
	if = {
		limit = { pop_has_ethic = ethic_xenophobe }
		pop_remove_ethic = ethic_xenophobe
	}
	if = {
		limit = { pop_has_ethic = ethic_xenophile }
		pop_remove_ethic = ethic_xenophile
	}
	if = {
		limit = { pop_has_ethic = ethic_materialist }
		pop_remove_ethic = ethic_materialist
	}
	if = {
		limit = { pop_has_ethic = ethic_spiritualist }
		pop_remove_ethic = ethic_spiritualist
	}
}

spawn_vultaum_anomaly = {
	random_system_within_border = {
		limit = {
			has_star_flag = precursor_1
			any_system_planet = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
		}
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = precursor_planet
			set_planet_flag = precursor_world
			enable_special_project = {
				name = "VULTAUM_ARTIFACT_FOUND"
				location = this
				owner = root
			}
		}
	}
	set_country_flag = ongoing_precursor_artifact
}

spawn_yuht_anomaly = {
	random_system_within_border = {
		limit = {
			has_star_flag = precursor_2
			any_system_planet = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
		}
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = precursor_planet
			set_planet_flag = precursor_world
			enable_special_project = {
				name = "YUHT_ARTIFACT_FOUND"
				location = this
				owner = root
			}
		}
	}
	set_country_flag = ongoing_precursor_artifact
}

spawn_league_anomaly = {
	random_system_within_border = {
		limit = {
			has_star_flag = precursor_3
			any_system_planet = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
		}
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = precursor_planet
			set_planet_flag = precursor_world
			enable_special_project = {
				name = "LEAGUE_ARTIFACT_FOUND"
				location = this
				owner = root
			}
		}
	}
	set_country_flag = ongoing_precursor_artifact
}

spawn_irassian_anomaly = {
	random_system_within_border = {
		limit = {
			has_star_flag = precursor_4
			any_system_planet = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
		}
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = precursor_planet
			set_planet_flag = precursor_world
			enable_special_project = {
				name = "IRASSIAN_ARTIFACT_FOUND"
				location = this
				owner = root
			}
		}
	}
	set_country_flag = ongoing_precursor_artifact
}

spawn_cybrex_anomaly = {
	random_system_within_border = {
		limit = {
			has_star_flag = precursor_5
			any_system_planet = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
		}
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOT = { has_planet_flag = precursor_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = precursor_planet
			set_planet_flag = precursor_world
			enable_special_project = {
				name = "CYBREX_ARTIFACT_FOUND"
				location = this
				owner = root
			}
		}
	}
	set_country_flag = ongoing_precursor_artifact
}

collector_surrenders_artifact = {
	if = {
		limit = { has_event_chain = "vultaum_chain" }
		add_event_chain_counter = {
			event_chain = "vultaum_chain"
			counter = "vultaum_artifacts"
			amount = 1
		}
		hidden_effect = {
			country_event = { id = precursor.97 }
		}
		break = yes
	}
	if = {
		limit = { has_event_chain = "yuht_chain" }
		add_event_chain_counter = {
			event_chain = "yuht_chain"
			counter = "yuht_artifacts"
			amount = 1
		}
		hidden_effect = {
			country_event = { id = precursor.597 }
		}
		break = yes
	}
	if = {
		limit = { has_event_chain = "first_league_chain" }
		add_event_chain_counter = {
			event_chain = "first_league_chain"
			counter = "first_league_artifacts"
			amount = 1
		}
		hidden_effect = {
			country_event = { id = precursor.1097 }
		}
		break = yes
	}
	if = {
		limit = { has_event_chain = "irassian_chain" }
		add_event_chain_counter = {
			event_chain = "irassian_chain"
			counter = "irassian_artifacts"
			amount = 1
		}
		hidden_effect = {
			country_event = { id = precursor.1597 }
		}
		break = yes
	}
	if = {
		limit = { has_event_chain = "cybrex_chain" }
		add_event_chain_counter = {
			event_chain = "cybrex_chain"
			counter = "cybrex_artifacts"
			amount = 1
		}
		hidden_effect = {
			country_event = { id = precursor.2103 }
		}
		break = yes
	}
}

reset_planet = {
	clear_planet_modifiers = yes
	reroll_deposits = yes
}

reroll_planet = {
	reroll_deposits = yes
	reroll_planet_modifiers = yes
}

remove_shroud_flags = {
	hidden_effect = {
		remove_country_flag = high.1
		remove_country_flag = high.2
		remove_country_flag = high.3
		remove_country_flag = high.4
		remove_country_flag = high.5
		remove_country_flag = high.6
		remove_country_flag = high.7
		remove_country_flag = high.8
		remove_country_flag = high.9
		remove_country_flag = high.10
		remove_country_flag = high.11
		remove_country_flag = high.12
		remove_country_flag = high.13
		remove_country_flag = high.14
		remove_country_flag = high.15
		remove_country_flag = high.16
		remove_country_flag = medium.1
		remove_country_flag = medium.2
		remove_country_flag = medium.3
		remove_country_flag = medium.4
		remove_country_flag = medium.5
		remove_country_flag = medium.6
		remove_country_flag = medium.7
		remove_country_flag = medium.8
		remove_country_flag = medium.9
		remove_country_flag = medium.10
		remove_country_flag = medium.11
		remove_country_flag = medium.12
		remove_country_flag = medium.13
		remove_country_flag = medium.14
		remove_country_flag = medium.15
		remove_country_flag = medium.16
		remove_country_flag = low.1
		remove_country_flag = low.2
		remove_country_flag = low.3
		remove_country_flag = low.4
		remove_country_flag = low.5
		remove_country_flag = low.6
		remove_country_flag = low.7
		remove_country_flag = low.8
		remove_country_flag = low.9
		remove_country_flag = low.10
		remove_country_flag = low.11
		remove_country_flag = low.12
		remove_country_flag = low.13
		remove_country_flag = low.14
		remove_country_flag = low.15
		remove_country_flag = low.16
	}
}

randomize_shroud_flags = {
	random_list = {
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.1
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.2
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.3
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.4
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.5
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.6
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.7
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.8
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.9
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.10
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.11
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.12
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.13
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.14
		}
		25 = {
			modifier = {
					factor = 2
					has_relic = r_zro_crystal
			}
			set_country_flag = high.15
		}
		25 = {
			if = {
				limit = {
					count_owned_ship = {
						limit = { is_ship_size = psionic_avatar }
						count < 1
					}
					count_owned_army = {
						limit = { army_type = shroud_army }
						count < 1
					}
				}
				set_country_flag = high.16
			}
			else = { set_country_flag = high.1 }
		}
		125 = {}
	}
	random_list = {
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.1 } }
				set_country_flag = medium.1
			}
			else = { set_country_flag = medium.2 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.2 } }
				set_country_flag = medium.2
			}
			else = { set_country_flag = medium.3 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.3 } }
				set_country_flag = medium.3
			}
			else = { set_country_flag = medium.4 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.4 } }
				set_country_flag = medium.4
			}
			else = { set_country_flag = medium.5 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.5 } }
				set_country_flag = medium.5
			}
			else = { set_country_flag = medium.6 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.6 } }
				set_country_flag = medium.6
			}
			else = { set_country_flag = medium.7 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.7 } }
				set_country_flag = medium.7
			}
			else = { set_country_flag = medium.8 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.8 } }
				set_country_flag = medium.8
			}
			else = { set_country_flag = medium.9 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.9 } }
				set_country_flag = medium.9
			}
			else = { set_country_flag = medium.10 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.10 } }
				set_country_flag = medium.10
			}
			else = { set_country_flag = medium.11 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.11 } }
				set_country_flag = medium.11
			}
			else = { set_country_flag = medium.12 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.12 } }
				set_country_flag = medium.12
			}
			else = { set_country_flag = medium.13 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.13 } }
				set_country_flag = medium.13
			}
			else = { set_country_flag = medium.14 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.14 } }
				set_country_flag = medium.14
			}
			else = { set_country_flag = medium.15 }
		}
		25 = {
			if = {
				limit = { NOT = { has_country_flag = high.15 } }
				set_country_flag = medium.15
			}
			else = { set_country_flag = medium.16 }
		}
		25 = {
			if = {
				limit = {
					NOT = { has_country_flag = high.16 }
					count_owned_ship = {
						limit = { is_ship_size = psionic_avatar }
						count < 1
					}
					count_owned_army = {
						limit = { army_type = shroud_army }
						count < 1
					}
				}
				set_country_flag = medium.16
			}
			else = { set_country_flag = medium.1 }
		}
		80 = {}
	}
	random_list = {
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.1
						has_country_flag = medium.1
					}
				}
				set_country_flag = low.1
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.2
						has_country_flag = medium.2
					}
				}
				set_country_flag = low.2
			}
			else = { set_country_flag = low.3 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.2
						has_country_flag = medium.2
					}
				}
				set_country_flag = low.2
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.3
						has_country_flag = medium.3
					}
				}
				set_country_flag = low.3
			}
			else = { set_country_flag = low.4 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.3
						has_country_flag = medium.3
					}
				}
				set_country_flag = low.3
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.4
						has_country_flag = medium.4
					}
				}
				set_country_flag = low.4
			}
			else = { set_country_flag = low.5 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.4
						has_country_flag = medium.4
					}
				}
				set_country_flag = low.4
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.5
						has_country_flag = medium.5
					}
				}
				set_country_flag = low.5
			}
			else = { set_country_flag = low.6 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.5
						has_country_flag = medium.5
					}
				}
				set_country_flag = low.5
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.6
						has_country_flag = medium.6
					}
				}
				set_country_flag = low.6
			}
			else = { set_country_flag = low.7 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.6
						has_country_flag = medium.6
					}
				}
				set_country_flag = low.6
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.7
						has_country_flag = medium.7
					}
				}
				set_country_flag = low.7
			}
			else = { set_country_flag = low.8 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.7
						has_country_flag = medium.7
					}
				}
				set_country_flag = low.7
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.8
						has_country_flag = medium.8
					}
				}
				set_country_flag = low.8
			}
			else = { set_country_flag = low.9 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.8
						has_country_flag = medium.8
					}
				}
				set_country_flag = low.8
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.9
						has_country_flag = medium.9
					}
				}
				set_country_flag = low.9
			}
			else = { set_country_flag = low.10 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.9
						has_country_flag = medium.9
					}
				}
				set_country_flag = low.9
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.10
						has_country_flag = medium.10
					}
				}
				set_country_flag = low.10
			}
			else = { set_country_flag = low.11 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.10
						has_country_flag = medium.10
					}
				}
				set_country_flag = low.10
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.11
						has_country_flag = medium.11
					}
				}
				set_country_flag = low.11
			}
			else = { set_country_flag = low.12 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.11
						has_country_flag = medium.11
					}
				}
				set_country_flag = low.11
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.12
						has_country_flag = medium.12
					}
				}
				set_country_flag = low.12
			}
			else = { set_country_flag = low.13 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.12
						has_country_flag = medium.12
					}
				}
				set_country_flag = low.12
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.13
						has_country_flag = medium.13
					}
				}
				set_country_flag = low.13
			}
			else = { set_country_flag = low.14 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.13
						has_country_flag = medium.13
					}
				}
				set_country_flag = low.13
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.14
						has_country_flag = medium.14
					}
				}
				set_country_flag = low.14
			}
			else = { set_country_flag = low.15 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.14
						has_country_flag = medium.14
					}
				}
				set_country_flag = low.14
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.15
						has_country_flag = medium.15
					}
				}
				set_country_flag = low.15
			}
			else = { set_country_flag = low.16 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.15
						has_country_flag = medium.15
					}
				}
				set_country_flag = low.15
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.16
						has_country_flag = medium.16
					}
				}
				set_country_flag = low.16
			}
			else = { set_country_flag = low.1 }
		}
		25 = {
			if = {
				limit = {
					NOR = {
						has_country_flag = high.16
						has_country_flag = medium.16
					}
				}
				set_country_flag = low.16
			}
			else_if = {
				limit = {
					NOR = {
						has_country_flag = high.1
						has_country_flag = medium.1
					}
					count_owned_ship = {
						limit = { is_ship_size = psionic_avatar }
						count < 1
					}
					count_owned_army = {
						limit = { army_type = shroud_army }
						count < 1
					}
				}
				set_country_flag = low.1
			}
			else = { set_country_flag = low.2 }
		}
	}
}

happiness_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3030 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3050 }}
		}
	}
}
happiness_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3030 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3050 }}
		}
	}
}
happiness_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3030 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3050 }}
		}
	}
}
upkeep_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3031 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3051 }}
		}
	}
}
upkeep_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3031 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3051 }}
		}
	}
}
upkeep_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3031 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3051 }}
		}
	}
}
research_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3032 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3052 }}
		}
	}
}
research_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3032 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3052 }}
		}
	}
}
research_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3032 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3052 }}
		}
	}
}
shields_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3033 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3053 }}
		}
	}
}
shields_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3033 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3053 }}
		}
	}
}
shields_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3033 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3053 }}
		}
	}
}
weapons_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3034 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3054 }}
		}
	}
}
weapons_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3034 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3054 }}
		}
	}
}
weapons_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3034 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3054 }}
		}
	}
}
firingrate_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3035 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3055 }}
		}
	}
}
firingrate_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3035 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3055 }}
		}
	}
}
firingrate_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3035 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3055 }}
		}
	}
}
ethics_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3036 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3056 }}
		}
	}
}
ethics_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3036 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3056 }}
		}
	}
}
ethics_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3036 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3056 }}
		}
	}
}
influence_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3037 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3057 }}
		}
	}
}
influence_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3037 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3057 }}
		}
	}
}
influence_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3037 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3057 }}
		}
	}
}
unity_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3038 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3058 }}
		}
	}
}
unity_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3038 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3058 }}
		}
	}
}
unity_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3038 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3058 }}
		}
	}
}
evasion_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3039 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3059 }}
		}
	}
}
evasion_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3039 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3059 }}
		}
	}
}
evasion_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3039 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3059 }}
		}
	}
}
repair_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3040 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3050 }}
		}
	}
}
repair_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3040 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3051 }}
		}
	}
}
repair_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3040 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3052 }}
		}
	}
}
lifespan_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3041 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3053 }}
		}
	}
}
lifespan_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3041 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3054 }}
		}
	}
}
lifespan_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3041 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3055 }}
		}
	}
}
speed_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3042 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3056 }}
		}
	}
}
speed_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3042 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3057 }}
		}
	}
}
speed_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3042 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3058 }}
		}
	}
}
morale_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3043 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3059 }}
		}
	}
}
morale_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3043 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3050 }}
		}
	}
}
morale_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3043 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3051 }}
		}
	}
}
sensor_shroud_high = {
	hidden_effect = {
		random_list = {
			70 = { country_event = { id = utopia.3044 }}
			20 = { country_event = { id = utopia.3045 }}
			10 = { country_event = { id = utopia.3052 }}
		}
	}
}
sensor_shroud_medium = {
	hidden_effect = {
		random_list = {
			50 = { country_event = { id = utopia.3044 }}
			30 = { country_event = { id = utopia.3045 }}
			20 = { country_event = { id = utopia.3053 }}
		}
	}
}
sensor_shroud_low = {
	hidden_effect = {
		random_list = {
			30 = { country_event = { id = utopia.3044 }}
			40 = { country_event = { id = utopia.3045 }}
			30 = { country_event = { id = utopia.3054 }}
		}
	}
}
avatar_shroud_high = {
	hidden_effect = {
		random_list = {
			38 = { country_event = { id = utopia.3020 }}
			38 = { country_event = { id = utopia.3021 }}
			20 = { country_event = { id = utopia.3022 }}
			10 = { country_event = { id = utopia.3023 }}
		}
	}
}
avatar_shroud_medium = {
	hidden_effect = {
		random_list = {
			25 = { country_event = { id = utopia.3020 }}
			25 = { country_event = { id = utopia.3021 }}
			30 = { country_event = { id = utopia.3022 }}
			20 = { country_event = { id = utopia.3023 }}
		}
	}
}
avatar_shroud_low = {
	hidden_effect = {
		random_list = {
			15 = { country_event = { id = utopia.3020 }}
			15 = { country_event = { id = utopia.3021 }}
			40 = { country_event = { id = utopia.3022 }}
			30 = { country_event = { id = utopia.3023 }}
		}
	}
}

give_fe_tech = {
	if = {
		limit = {
			NOT = { has_technology = tech_mine_living_metal }
		}
		give_technology = { tech = tech_mine_living_metal }
		break = yes
	}
	if = {
		limit = {
			NOT = { has_technology = tech_mine_dark_matter }
		}
		give_technology = { tech = tech_mine_dark_matter }
		break = yes
	}
	if = {
		limit = {
			NOT = { has_technology = tech_ship_armor_5 }
		}
		give_technology = { tech = tech_ship_armor_5 }
		break = yes
	}
	if = {
		limit = {
			NOT = { has_technology = tech_antimatter_power }
		}
		give_technology = { tech = tech_antimatter_power }
		break = yes
	}
	if = {
		limit = {
			NOT = { has_technology = tech_zero_point_power }
		}
		give_technology = { tech = tech_zero_point_power }
		break = yes
	}
	if = {
		limit = {
			NOT = { has_technology = tech_climate_restoration }
		}
		give_technology = { tech = tech_climate_restoration }
		break = yes
	}
	if = {
		limit = {
			NOT = { has_technology = tech_nutrient_replication }
		}
		give_technology = { tech = tech_nutrient_replication }
		break = yes
	}
	give_technology = { tech = tech_repeatable_improved_tile_energy_output }
}

shroud_energy_cost = {
	add_resource = { energy = -1000 }
}

# Given a species, create a mod with trait_cybernetic and apply to all pops, leaders
# and armies that have the original species and the same owner as the scope object.
# Scope: Something that has a species and an owner
create_cybernetic_species_mod = {
	species = {
		create_species = {
			is_mod = yes
			name = this
			plural = this
			class = this
			portrait = this
			traits = this
			can_be_modified = this
			homeworld = this
			namelist = this
			traits = {
				ideal_planet_class = prev
				trait = trait_cybernetic
			}
		}
		save_event_target_as = changing_species
	}

	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

set_all_comms_surveyed = {
	every_country = {
		limit = {
			has_communications = from
		}
		prev = {
			set_surveyed = {
				surveyed = yes
				surveyor = Prev
			}
		}
	}
}

# AI Crisis Planet Defense plus Armies
create_ai_planet_defense = {
	create_fleet = {
		name = "NAME_AI_Core"
		effect = {
			set_owner = event_target:AI_crisis
			create_ship = {
				name = random
				design = "NAME_AI_Core"
				graphical_culture = "ai_01"
			}
			set_location = {
				target = root
				distance = 10
				angle = random
			}
		}
	}
	owner = {
		create_leader = {
			class = admiral
			species = event_target:contingency_bot
			name = random
			skill = 3
			effect = {
				set_age = 0
				save_event_target_as = contingency_fleet_leader
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 25
				create_ship = {
					name = random
					design = "NAME_Euthanizer"
					graphical_culture = "ai_01"
				}
			}
			assign_leader = event_target:contingency_fleet_leader
			while = {
				count = 50
				create_ship = {
					name = random
					design = "NAME_Sterilizer"
					graphical_culture = "ai_01"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
			set_fleet_bombardment_stance = armageddon
		}
		settings = {
			garrison = yes
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "robotic_army"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			create_ship = {
				name = random
				design = "NAME_AI_Constructor"
				graphical_culture = "ai_01"
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			create_ship = {
				name = random
				design = "NAME_AI_Constructor"
				graphical_culture = "ai_01"
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			create_ship = {
				name = random
				design = "NAME_AI_Constructor"
				graphical_culture = "ai_01"
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
}

create_ai_armies = {
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "robotic_army"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "robotic_army"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
}

create_ai_constructors = {
	if = {
		limit = {
			event_target:AI_crisis = {
				count_owned_ship = {
					limit = { is_ship_size = construction_ship_ai }
					count < 8
				}
			}
		}
		create_fleet = {
			effect = {
				set_owner = event_target:AI_crisis
				create_ship = {
					name = random
					design = "NAME_AI_Constructor"
					graphical_culture = "ai_01"
				}
				set_location = {
					target = root
					distance = 45
					angle = random
				}
				set_fleet_stance = evasive
			}
		}
	}
}

create_ai_fleet = {
	owner = {
		create_leader = {
			class = admiral
			species = event_target:contingency_bot
			name = random
			skill = 3
			effect = {
				set_age = 0
				save_event_target_as = contingency_fleet_leader
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 10
				create_ship = {
					name = random
					design = "NAME_Euthanizer"
					graphical_culture = "ai_01"
				}
			}
			assign_leader = event_target:contingency_fleet_leader
			while = {
				count = 20
				create_ship = {
					name = random
					design = "NAME_Sterilizer"
					graphical_culture = "ai_01"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
			set_fleet_bombardment_stance = armageddon
		}
	}
}

awaken_fallen_machine_empire = {
	every_country = {
		limit = {
			is_country_type = fallen_empire
			has_authority = auth_machine_intelligence
		}

		country_event = { id = fallen_machine_empire.1 days = 30 random = 30 }
	}
}

awaken_guardians_of_the_galaxy = {
	random_list = {
		60 = { # Awaken one
			random_country = {
				limit = {
					is_country_type = fallen_empire
					OR = {
						has_ethic = ethic_fanatic_materialist
						has_ethic = ethic_fanatic_xenophile
					}
					fleet_power > 60000
				}
				set_country_flag = guardians_of_the_galaxy
				set_timed_country_flag = { flag = timed_guardians_of_the_galaxy days = 1825 }
				set_timed_country_flag = { flag = timed_guardians_of_the_galaxy_2 days = 3650 }
			}
		}
		15 = { # Awaken both!
			every_country = {
				limit = {
					is_country_type = fallen_empire
					OR = {
						has_ethic = ethic_fanatic_materialist
						has_ethic = ethic_fanatic_xenophile
					}
					fleet_power > 60000
				}
				set_country_flag = guardians_of_the_galaxy
				set_timed_country_flag = { flag = timed_guardians_of_the_galaxy days = 1825 }
				set_timed_country_flag = { flag = timed_guardians_of_the_galaxy_2 days = 3650 }
			}
		}
		25 = {} # No awakening
	}
}


create_fallen_empire_platform = {
	if = {
		limit = {
			owner = { has_authority = auth_machine_intelligence }
		}
		create_ship = {
			name = random
			design = "NAME_Sigma"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_materialist }
		}
		create_ship = {
			name = random
			design = "NAME_Cloaker"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
		}
		create_ship = {
			name = random
			design = "NAME_Faith"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		create_ship = {
			name = random
			design = "NAME_Devastator"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophile }
		}
		create_ship = {
			name = random
			design = "NAME_Watcher"
			graphical_culture = owner
		}
	}
}

create_fallen_empire_colossus = {
	if = {
		limit = {
			owner = { has_authority = auth_machine_intelligence }
		}
		create_ship = {
			name = random
			design = "NAME_Omega"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_materialist }
		}
		create_ship = {
			name = random
			design = "NAME_Enforcer"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
		}
		create_ship = {
			name = random
			design = "NAME_Cleanser"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		create_ship = {
			name = random
			design = "NAME_Reaper"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophile }
		}
		create_ship = {
			name = random
			design = "NAME_Adjuster"
			graphical_culture = owner
		}
	}
}

create_fallen_empire_titan = {
	if = {
		limit = {
			owner = { has_authority = auth_machine_intelligence }
		}
		create_ship = {
			name = random
			design = "NAME_Alpha"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_materialist }
		}
		create_ship = {
			name = random
			design = "NAME_Savant"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
		}
		create_ship = {
			name = random
			design = "NAME_Eternal"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		create_ship = {
			name = random
			design = "NAME_Imperium"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophile }
		}
		create_ship = {
			name = random
			design = "NAME_Keeper"
			graphical_culture = owner
		}
	}
}

create_fallen_empire_large_ship = {
	if = {
		limit = {
			owner = { has_authority = auth_machine_intelligence }
		}
		create_ship = {
			name = random
			design = "NAME_Beta"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_materialist }
		}
		create_ship = {
			name = random
			design = "NAME_Scholar"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
		}
		create_ship = {
			name = random
			design = "NAME_Avatar"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		create_ship = {
			name = random
			design = "NAME_Supremacy"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophile }
		}
		create_ship = {
			name = random
			design = "NAME_Custodian"
			graphical_culture = owner
		}
	}
}

create_fallen_empire_small_ship = {
	if = {
		limit = {
			owner = { has_authority = auth_machine_intelligence }
		}
		create_ship = {
			name = random
			design = "NAME_Gamma"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_materialist }
		}
		create_ship = {
			name = random
			design = "NAME_Sage"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
		}
		create_ship = {
			name = random
			design = "NAME_Zealot"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		create_ship = {
			name = random
			design = "NAME_Glory"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophile }
		}
		create_ship = {
			name = random
			design = "NAME_Warden"
			graphical_culture = owner
		}
	}
}

create_fallen_empire_construction_ship = {
	if = {
		limit = {
			owner = { has_authority = auth_machine_intelligence }
		}
		create_ship = {
			name = random
			design = "NAME_Theta"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_materialist }
		}
		create_ship = {
			name = random
			design = "NAME_Librarian"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_spiritualist }
		}
		create_ship = {
			name = random
			design = "NAME_Penitent"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophobe }
		}
		create_ship = {
			name = random
			design = "NAME_Servitor"
			graphical_culture = owner
		}
	}
	if = {
		limit = {
			owner = { has_ethic = ethic_fanatic_xenophile }
		}
		create_ship = {
			name = random
			design = "NAME_Builder"
			graphical_culture = owner
		}
	}
}


create_fallen_empire_reinforcements = {
	create_fleet = {
		effect = {
			set_owner = prev.owner
			while = {
				count = 4
				create_fallen_empire_large_ship = yes
			}
			while = {
				count = 8
				create_fallen_empire_small_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random
					}
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random
					}
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random
					}
				}
			}
		}
	}
}


create_fallen_empire_fleet = {
	owner = {
		create_leader = {
			class = admiral
			species = owner_main_species
			name = random
			skill = 10
			leader_age_min = 25
			leader_age_max = 45
			traits = {
				trait = random_trait
				trait = random_trait
				trait = random_trait
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = prev.owner
			while = {
				count = 8
				create_fallen_empire_large_ship = yes
			}
			while = {
				count = 18
				create_fallen_empire_small_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random
					}
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random
					}
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random
					}
				}
			}
		}
	}
	last_created_fleet = { assign_leader = last_created_leader }
}

create_fallen_empire_starting_navy = {
	create_fallen_empire_fleet = yes
	create_fallen_empire_fleet = yes
	random = {
		chance = 33
		create_fallen_empire_fleet = yes
	}
	if = {
		limit = {
			host_has_dlc = "Apocalypse"
		}
		random = {
			chance = 10
			create_fleet = {
				effect = {
					set_owner = prev.owner
					create_fallen_empire_colossus = yes
					set_location = {
						target = prev
						distance = 30
						angle = random
					}
				}
			}
		}
	}
	random = {
		chance = 25
		create_fleet = {
			effect = {
				set_owner = prev.owner
				create_fallen_empire_titan = yes
				set_location = {
					target = prev
					distance = 20
					angle = random
				}
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = prev.owner
			create_fallen_empire_construction_ship = yes
			set_location = {
				target = prev
				distance = 60
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = prev.owner
			create_fallen_empire_construction_ship = yes
			set_location = {
				target = prev
				distance = 80
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = prev.owner
			create_fallen_empire_construction_ship = yes
			set_location = {
				target = prev
				distance = 100
				angle = random
			}
		}
	}
}


add_awakened_fallen_empire_fleet = {
	country_event = { id = fallen_empires.13 }
	if = {
		limit = {
			any_country = {
				is_country_type = default
				OR = {
					fleet_power > 120000
					AND = {
						has_federation = yes
						federation = {
							fleet_power > 150000
						}
					}
					AND = {
						fleet_power > 75000
						any_country = {
							has_defensive_pact = prev
							fleet_power > 75000
						}
					}
				}
			}
		}
		country_event = { id = fallen_empires.13 }
	}
	if = {
		limit = {
			any_country = {
				is_country_type = default
				OR = {
					fleet_power > 200000
					AND = {
						has_federation = yes
						federation = {
							fleet_power > 200000
						}
					}
					AND = {
						fleet_power > 120000
						any_country = {
							has_defensive_pact = prev
							fleet_power > 120000
						}
					}
				}
			}
		}
		country_event = { id = fallen_empires.13 }
	}
}

add_awakened_fallen_empire_resources = {
	# Changing country type resets resources, so give them full stores
	add_resource = { minerals = 50000 }
	add_resource = { energy = 50000 }
	add_resource = { food = 10000 }
	add_resource = { influence = 1000 }
	add_resource = { alloys = 20000 }
	add_resource = { consumer_goods = 20000 }
	add_resource = { alloys = 20000 }
	add_resource = { exotic_gases = 10000 }
	add_resource = { volatile_motes = 10000 }
	add_resource = { rare_crystals = 10000 }
	add_resource = { sr_dark_matter = 10000 }
	if = {
		limit = { is_fallen_empire_spiritualist = yes }
		add_resource = { sr_zro = 10000 }
	}
}

# this = country joining league; prev = federation leader
add_non_aligned_league_opinions = {
	add_opinion_modifier = { who = prev modifier = opinion_non_aligned_league }
	prev = { add_opinion_modifier = { who = prev modifier = opinion_non_aligned_league } }
	every_country = {
		limit = {
			is_in_federation_with = prevprev
			NOT = { is_same_value = prev }
			NOT = {
				has_opinion_modifier = {
					who = prev
					modifier = opinion_non_aligned_league
				}
			}
		}
		add_opinion_modifier = { who = prev modifier = opinion_non_aligned_league }
		prev = { add_opinion_modifier = { who = prev modifier = opinion_non_aligned_league } }
	}
	every_country = {
		limit = {
			is_country_type = awakened_fallen_empire
			OR = {
				has_country_flag = sleepers_awake_ancient_rival
				has_country_flag = sleepers_awake_first_sleeper
			}
		}
		add_opinion_modifier = { who = prev modifier = opinion_non_aligned_league_fe }
		prev = { add_opinion_modifier = { who = prev modifier = opinion_non_aligned_league_fe } }
	}
}

#Used for setting up breakaway machine empires. Not suitable for event rewards.
# this = country
add_100_unity_per_year_passed = {
	switch = {
		trigger = years_passed
		400 > { add_resource = { unity = 40000 } }
		350 > { add_resource = { unity = 35000 } }
		300 > { add_resource = { unity = 30000 } }
		250 > { add_resource = { unity = 25000 } }
		200 > { add_resource = { unity = 20000 } }
		190 > { add_resource = { unity = 19000 } }
		180 > { add_resource = { unity = 18000 } }
		170 > { add_resource = { unity = 17000 } }
		160 > { add_resource = { unity = 16000 } }
		150 > { add_resource = { unity = 15000 } }
		140 > { add_resource = { unity = 14000 } }
		130 > { add_resource = { unity = 13000 } }
		120 > { add_resource = { unity = 12000 } }
		110 > { add_resource = { unity = 11000 } }
		100 > { add_resource = { unity = 10000 } }
		90 > { add_resource = { unity = 9000 } }
		80 > { add_resource = { unity = 8000 } }
		70 > { add_resource = { unity = 7000 } }
		60 > { add_resource = { unity = 6000 } }
		50 > { add_resource = { unity = 5000 } }
		40 > { add_resource = { unity = 4000 } }
		30 > { add_resource = { unity = 3000 } }
		20 > { add_resource = { unity = 2000 } }
		10 > { add_resource = { unity = 1000 } }
		0 > { add_resource = { unity = 500 } }
	}
}

set_crisis_stage_1 = {
	set_global_flag = crisis_stage_1
	remove_global_flag = crisis_stage_2
	remove_global_flag = crisis_stage_3
	remove_global_flag = crisis_stage_4
}

set_crisis_stage_2 = {
	remove_global_flag = crisis_stage_1
	set_global_flag = crisis_stage_2
	remove_global_flag = crisis_stage_3
	remove_global_flag = crisis_stage_4
}

set_crisis_stage_3 = {
	remove_global_flag = crisis_stage_1
	remove_global_flag = crisis_stage_2
	set_global_flag = crisis_stage_3
	remove_global_flag = crisis_stage_4
}

set_crisis_stage_4 = {
	remove_global_flag = crisis_stage_1
	remove_global_flag = crisis_stage_2
	remove_global_flag = crisis_stage_3
	set_global_flag = crisis_stage_4
}

end_crisis = {
	remove_global_flag = crisis_stage_1
	remove_global_flag = crisis_stage_2
	remove_global_flag = crisis_stage_3
	remove_global_flag = crisis_stage_4
}

# this = pop
remove_hive_minded = {
	if = {
		limit = { has_trait = trait_hive_mind }
		modify_species = {
			species = this
			remove_trait = trait_hive_mind
			change_scoped_species = yes
		}
	}
}

# this = pop
remove_self_modified = {
	if = {
		limit = { has_trait = trait_self_modified }
		modify_species = {
			species = this
			remove_trait = trait_self_modified
			change_scoped_species = yes
		}
	}
}

#deprecated
remove_culture_shock = {
	if = {
		limit = { has_modifier = culture_shock_stone_age }
		remove_modifier = culture_shock_stone_age
	}
	if = {
		limit = { has_modifier = culture_shock_bronze_age }
		remove_modifier = culture_shock_bronze_age
	}
	if = {
		limit = { has_modifier = culture_shock_iron_age }
		remove_modifier = culture_shock_iron_age
	}
	if = {
		limit = { has_modifier = culture_shock_late_medieval_age }
		remove_modifier = culture_shock_late_medieval_age
	}
	if = {
		limit = { has_modifier = culture_shock_renaissance_age }
		remove_modifier = culture_shock_renaissance_age
	}
	if = {
		limit = { has_modifier = culture_shock_steam_age }
		remove_modifier = culture_shock_steam_age
	}
	if = {
		limit = { has_modifier = culture_shock_industrial_age }
		remove_modifier = culture_shock_industrial_age
	}
	if = {
		limit = { has_modifier = culture_shock_machine_age }
		remove_modifier = culture_shock_machine_age
	}
	if = {
		limit = { has_modifier = culture_shock_atomic_age }
		remove_modifier = culture_shock_atomic_age
	}
	if = {
		limit = { has_modifier = culture_shock_early_space_age }
		remove_modifier = culture_shock_early_space_age
	}
	if = {
		limit = {
			planet = {
				NOT = {
					any_owned_pop = {
						NOR = {
							pop_has_trait = trait_hive_mind
							pop_has_trait = trait_cybernetic
							pop_has_trait = trait_machine_unit
						}
					}
				}
			}
		}
		planet = {
			remove_modifier = planet_culture_shock
		}
	}
}

nuke_primitives_effect = {
	destroy_colony = yes
	set_planet_flag = primitives_nuked_themselves
	change_pc = pc_nuked
	reroll_planet = yes
	remove_all_buildings = yes
	add_deposit = d_metal_boneyard
	set_planet_flag = nuked_planet_anomalies_disabled
}

nuke_primitives_toxic_effect = {
	destroy_colony = yes
	change_pc = pc_toxic
	reset_planet = yes
	add_modifier = {
		modifier = "nuclear_devastation"
		days = -1
	}
	set_deposit = d_society_3
}

generate_cyborg_treats = {
	add_monthly_resource_mult = {
		resource = unity
		value = 1
		min = 5
		max = 100
	}
	add_monthly_resource_mult = {
		resource = society_research
		value = 1
		min = 5
		max = 100
	}
}

create_1st_khan_fleet = {
	create_fleet = {
		name = "NAME_Chosen_of_the_Great_Khan"
		effect = {
			set_owner = event_target:raider_khanate
			while = {
				count = 18
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 12
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = event_target:marauder_rally_point
				distance = 45
				angle = random
			}
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_2nd_khan_fleet = {
	create_fleet = {
		name = "NAME_Chosen_of_the_Great_Khan"
		effect = {
			set_owner = event_target:raider_khanate
			while = {
				count = 18
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 12
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			set_leader = exiled_khan
			set_location = {
				target = event_target:marauder_rally_point
				distance = 45
				angle = random
			}
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_marauder_starbase = {
	create_starbase = {
		size = "starbase_marauder"
		owner = event_target:marauder_starbase_owner
	}
}

create_marauder_fleet = {
	create_leader = {
		class = admiral
		species = owner_main_species
		name = random
		skill = 3
		leader_age_min = 25
		leader_age_max = 45
		traits = {
			trait = leader_trait_mercenary_warrior
			trait = random_trait
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:raider_khanate
			while = {
				count = 16
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = event_target:marauder_rally_point
				distance = 45
				angle = random
			}
		}
		settings = {
			uses_naval_capacity = no
			can_upgrade = no
			can_change_composition = no
		}
	}
}

create_marauder_armies = {
	create_leader = {
		class = general
		species = owner_main_species
		name = random
		skill = 3
		traits = {
			trait = random_trait
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:raider_khanate
			while = {
				count = 20
				create_army_transport = {
					ship_name = "NAME_Pirate_Transport"
					graphical_culture = "mammalian_01"
					army_type = "assault_army"
					species = event_target:raider_khanate
				}
			}
			set_location = {
				target = event_target:marauder_rally_point
				distance = 20
				angle = random
			}
		}
	}
	last_created_army = { assign_leader = last_created_leader }
}

create_marauder_constructors = {
	if = {
		limit = {
			event_target:raider_khanate = {
				count_owned_ship = {
					limit = { is_ship_size = constructor }
					count < 5
				}
			}
		}
		create_fleet = {
			effect = {
				set_owner = event_target:raider_khanate
				create_ship = {
					name = random
					design = "NAME_Clan_Builder"
				}
				set_location = {
					target = event_target:marauder_rally_point
					distance = 20
					angle = random
				}
				set_fleet_stance = evasive
			}
		}
	}
}

create_small_marauder_auxiliaries = {
	create_leader = {
		class = admiral
		species = event_target:satrapy_species
		name = random
		leader_age_min = 34
		leader_age_max = 45
		traits = { trait = random_trait }
	}
	create_fleet = {
		name = "NAME_Horde_Auxiliary_Fleet"
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			while = {
				count = 10
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 4
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 2
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_medium_marauder_auxiliaries = {
	create_leader = {
		class = admiral
		species = event_target:satrapy_species
		name = random
		leader_age_min = 34
		leader_age_max = 45
		traits = { trait = random_trait }
	}
	create_fleet = {
		name = "NAME_Horde_Auxiliary_Fleet"
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			while = {
				count = 16
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_large_marauder_auxiliaries = {
	create_leader = {
		class = admiral
		species = event_target:satrapy_species
		name = random
		leader_age_min = 34
		leader_age_max = 45
		traits = { trait = random_trait }
	}
	create_fleet = {
		name = "NAME_Horde_Auxiliary_Fleet"
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			while = {
				count = 22
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 12
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_very_large_marauder_auxiliaries = {
	create_leader = {
		class = admiral
		species = event_target:satrapy_species
		name = random
		traits = { trait = random_trait }
	}
	last_created_leader = { set_age = 37 }
	create_fleet = {
		name = "NAME_Horde_Auxiliary_Fleet"
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			while = {
				count = 26
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 18
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 12
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_marauder_successor_fleet = {
	random_owned_planet = { save_event_target_as = fleet_position }
	create_leader = {
		class = admiral
		species = owner_main_species
		name = random
		skill = 3
		leader_age_min = 25
		leader_age_max = 45
		traits = {
			trait = leader_trait_mercenary_warrior
			trait = random_trait
		}
	}
	create_fleet = {
		effect = {
			set_owner = prev
			while = {
				count = 16
				create_ship = {
					name = random
					design = "NAME_Outrider"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = random
					design = "NAME_Lancer"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = random
					design = "NAME_Void_Champion"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 1
				create_ship = {
					name = random
					design = "NAME_Ancestral_Glory"
					prefix = no
					graphical_culture = "pirate_01"
				}
			}
			assign_leader = last_created_leader
			set_location = {
				target = event_target:fleet_position
				distance = 45
				angle = random
			}
		}
		settings = {
			uses_naval_capacity = no
			can_upgrade = no
			can_change_composition = no
		}
	}
}

create_contingency_starbase = {
	create_starbase = {
		size = starbase_ai
		owner = event_target:AI_crisis
	}
}

create_fe_home_citadel = {
	create_starbase = {
		size = "starbase_citadel"

		module = "shipyard"
		module = "shipyard"
		module = "shipyard"
		module = "hangar_bay"
		module = "gun_battery"
		module = "gun_battery"

		building = "target_uplink_computer"
		building = "defense_grid"
		building = "colossus_yards"
		building = "titan_yards"

		effect = {
			while = {
				count = 10
				create_fallen_empire_platform = yes
			}
		}
	}
}

create_fe_citadel = {
	create_starbase = {
		size = "starbase_citadel"

		module = "shipyard"
		module = "anchorage"
		module = "anchorage"
		module = "hangar_bay"
		module = "gun_battery"
		module = "gun_battery"

		building = "crew_quarters"
		building = "command_center"
		building = "target_uplink_computer"
		building = "listening_post"

		effect = {
			while = {
				count = 4
				create_fallen_empire_platform = yes
			}
		}
	}
}

create_fe_outpost = {
	create_starbase = {
		size = "starbase_outpost"
		effect = {
			while = {
				count = 2
				create_fallen_empire_platform = yes
			}
		}
	}
}

create_broken_fe_outpost = {
	create_ambient_object = {
		type = broken_holy_world_outpost
	}
	last_created_ambient_object = {
		set_location = {
			target = prev
			distance = 10
		}
		save_event_target_as = broken_outpost
	}
	#create_ambient_object = {
	#	type = large_debris_object
	#}
	#last_created_ambient_object = {
	#	set_location = {
	#		target = event_target:broken_outpost
	#		distance = 0
	#	}
	#}
	create_ambient_object = {
		type = small_debris_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 1
			angle = 0
		}
	}
	create_ambient_object = {
		type = small_debris_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 1
			angle = 90
		}
	}
	create_ambient_object = {
		type = small_debris_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 1
			angle = 180
		}
	}
	create_ambient_object = {
		type = small_debris_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 1
			angle = 270
		}
	}
	create_ambient_object = {
		type = medium_debris_02_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 3
			angle = 5
		}
	}
	create_ambient_object = {
		type = medium_debris_02_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 9
			angle = 120
		}
	}
	create_ambient_object = {
		type = medium_debris_01_object
	}
	last_created_ambient_object = {
		set_location = {
			target = event_target:broken_outpost
			distance = 6
			angle = 240
		}
	}
}

assign_first_diadochi_planets = {
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_planet = {
				has_owner = yes
				is_owned_by = root
			}
		}
		set_star_flag = first_diadochi_system
		save_event_target_as = first_diadochi_origin
	}
	effect_on_blob = {
		center = event_target:first_diadochi_origin
		owned_planets_percentage = 0.25
		planet_limit = {
			solar_system = {
				is_potential_diadochi_system = yes
			}
		}
		effect = {
			set_star_flag = first_diadochi_system
		}
	}
}
create_first_diadochi = {
	if = {
		limit = {
			exists = event_target:first_diadochi_origin
		}
		create_country = {
			name_list = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_fanatic_militarist
				ethic = ethic_xenophobe
			}
			ignore_initial_colony_error = yes
		}
		last_created_country = {
			save_event_target_as = first_diadochi
			set_country_flag = diadochi_1
			set_country_flag = diadochi
			set_name = random
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = first_diadochi_system
				exists = starbase
			}
			starbase = {
				set_owner = event_target:first_diadochi
			}
		}
		# Flip Planets
		every_owned_planet = {
			limit = {
				solar_system = { has_star_flag = first_diadochi_system }
			}
			set_owner = event_target:first_diadochi
			set_controller = event_target:first_diadochi
		}
		event_target:first_diadochi = {
			add_resource = {
				minerals = 20000
				energy = 20000
				alloys = 20000
				consumer_goods = 20000
				food = 20000
				influence = 1000
			}
			copy_techs_from = { target = root }
			every_owned_starbase = {
				set_starbase_size = starbase_outpost
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
					set_starbase_module = {
						slot = 1
						module = shipyard
					}
					set_starbase_module = {
						slot = 2
						module = shipyard
					}
					set_starbase_module = {
						slot = 3
						module = shipyard
					}
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			# Survey Own Space
			every_planet_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = event_target:first_diadochi
				}
			}
			# Survey Rest of Marauder's Space
			root = {
				every_planet_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = event_target:first_diadochi
					}
				}
			}
			# Mining and Research Stations
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = {
					owner = event_target:first_diadochi
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = {
					owner = event_target:first_diadochi
				}
			}
			### Units
			create_ship_design = { design = "NAME_Pirate_Transport" }
			add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Clan_Builder" }
			add_ship_design = last_created_design
			random_owned_planet = { save_event_target_as = unit_spawn_point }
			# Fleet
			create_leader = {
				class = admiral
				species = owner_main_species
				name = random
				skill = 3
				leader_age_min = 25
				leader_age_max = 45
				traits = {
					trait = leader_trait_mercenary_warrior
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:first_diadochi
					while = {
						count = 16
						create_ship = {
							name = random
							design = "NAME_Outrider"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 8
						create_ship = {
							name = random
							design = "NAME_Lancer"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 6
						create_ship = {
							name = random
							design = "NAME_Void_Champion"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_Ancestral_Glory"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					assign_leader = last_created_leader
					set_location = {
						target = event_target:unit_spawn_point
						distance = 45
						angle = random
					}
				}
				settings = {
					uses_naval_capacity = no
				}
			}
			# Armies
			create_leader = {
				class = general
				species = owner_main_species
				name = random
				skill = 3
				traits = {
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:first_diadochi
					while = {
						count = 12
						create_army_transport = {
							ship_name = "NAME_Pirate_Transport"
							graphical_culture = "mammalian_01"
							army_type = "assault_army"
							species = event_target:first_diadochi
						}
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
			last_created_army = { assign_leader = last_created_leader }
			# Constructor
			create_fleet = {
				effect = {
					set_owner = event_target:first_diadochi
					create_ship = {
						name = random
						design = "NAME_Clan_Builder"
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
		}
		# Establish Communications
		every_country = {
			limit = {
				OR = {
					has_communications = root
					has_government = gov_diadochi
				}
			}
			establish_communications_no_message = event_target:first_diadochi
		}
	}
}

assign_second_diadochi_planets = {
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_planet = {
				has_owner = yes
				is_owned_by = root
			}
		}
		set_star_flag = second_diadochi_system
		save_event_target_as = second_diadochi_origin
	}
	effect_on_blob = {
		center = event_target:second_diadochi_origin
		owned_planets_percentage = 0.33
		planet_limit = {
			solar_system = {
				is_potential_diadochi_system = yes
			}
		}
		effect = {
			set_star_flag = second_diadochi_system
		}
	}
}
create_second_diadochi = {
	if = {
		limit = {
			exists = event_target:second_diadochi_origin
		}
		create_country = {
			name_list = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_fanatic_militarist
				ethic = ethic_xenophobe
			}
			ignore_initial_colony_error = yes
		}
		last_created_country = {
			save_event_target_as = second_diadochi
			set_country_flag = diadochi_2
			set_country_flag = diadochi
			set_name = random
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = second_diadochi_system
				exists = starbase
			}
			starbase = {
				set_owner = event_target:second_diadochi
			}
		}
		# Flip Planets
		every_owned_planet = {
			limit = {
				solar_system = { has_star_flag = second_diadochi_system }
			}
			set_owner = event_target:second_diadochi
			set_controller = event_target:second_diadochi
		}
		event_target:second_diadochi = {
			add_resource = {
				minerals = 20000
				energy = 20000
				alloys = 20000
				consumer_goods = 20000
				food = 20000
				influence = 1000
			}
			copy_techs_from = { target = root }
			every_owned_starbase = {
				set_starbase_size = starbase_outpost
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
					set_starbase_module = {
						slot = 1
						module = shipyard
					}
					set_starbase_module = {
						slot = 2
						module = shipyard
					}
					set_starbase_module = {
						slot = 3
						module = shipyard
					}
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			# Survey Own Space
			every_planet_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = event_target:second_diadochi
				}
			}
			# Survey Rest of Marauder's Space
			root = {
				every_planet_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = event_target:second_diadochi
					}
				}
			}
			# Mining and Research Stations
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = {
					owner = event_target:second_diadochi
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = {
					owner = event_target:second_diadochi
				}
			}
			### Units
			create_ship_design = { design = "NAME_Pirate_Transport" }
			add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Clan_Builder" }
			add_ship_design = last_created_design
			random_owned_planet = { save_event_target_as = unit_spawn_point }
			# Fleet
			create_leader = {
				class = admiral
				species = owner_main_species
				name = random
				skill = 3
				leader_age_min = 25
				leader_age_max = 45
				traits = {
					trait = leader_trait_mercenary_warrior
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:second_diadochi
					while = {
						count = 16
						create_ship = {
							name = random
							design = "NAME_Outrider"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 8
						create_ship = {
							name = random
							design = "NAME_Lancer"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 6
						create_ship = {
							name = random
							design = "NAME_Void_Champion"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_Ancestral_Glory"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					assign_leader = last_created_leader
					set_location = {
						target = event_target:unit_spawn_point
						distance = 45
						angle = random
					}
				}
				settings = {
					uses_naval_capacity = no
				}
			}
			# Armies
			create_leader = {
				class = general
				species = owner_main_species
				name = random
				skill = 3
				traits = {
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:second_diadochi
					while = {
						count = 12
						create_army_transport = {
							ship_name = "NAME_Pirate_Transport"
							graphical_culture = "mammalian_01"
							army_type = "assault_army"
							species = event_target:second_diadochi
						}
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
			last_created_army = { assign_leader = last_created_leader }
			# Constructor
			create_fleet = {
				effect = {
					set_owner = event_target:second_diadochi
					create_ship = {
						name = random
						design = "NAME_Clan_Builder"
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
		}
		# Establish Communications
		every_country = {
			limit = {
				OR = {
					has_communications = root
					has_government = gov_diadochi
				}
			}
			establish_communications_no_message = event_target:second_diadochi
		}
	}
}

assign_third_diadochi_planets = {
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_planet = {
				has_owner = yes
				is_owned_by = root
			}
		}
		set_star_flag = third_diadochi_system
		save_event_target_as = third_diadochi_origin
	}
	effect_on_blob = {
		center = event_target:third_diadochi_origin
		owned_planets_percentage = 0.5
		planet_limit = {
			solar_system = {
				is_potential_diadochi_system = yes
			}
		}
		effect = {
			set_star_flag = third_diadochi_system
		}
	}
}
create_third_diadochi = {
	if = {
		limit = {
			exists = event_target:third_diadochi_origin
		}
		create_country = {
			name_list = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_fanatic_militarist
				ethic = ethic_xenophobe
			}
			ignore_initial_colony_error = yes
		}
		last_created_country = {
			save_event_target_as = third_diadochi
			set_country_flag = diadochi_3
			set_country_flag = diadochi
			set_name = random
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = third_diadochi_system
				exists = starbase
			}
			starbase = {
				set_owner = event_target:third_diadochi
			}
		}
		# Flip Planets
		every_owned_planet = {
			limit = {
				solar_system = { has_star_flag = third_diadochi_system }
			}
			set_owner = event_target:third_diadochi
			set_controller = event_target:third_diadochi
		}
		event_target:third_diadochi = {
			add_resource = {
				minerals = 20000
				energy = 20000
				alloys = 20000
				consumer_goods = 20000
				food = 20000
				influence = 1000
			}
			copy_techs_from = { target = root }
			every_owned_starbase = {
				set_starbase_size = starbase_outpost
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
					set_starbase_module = {
						slot = 1
						module = shipyard
					}
					set_starbase_module = {
						slot = 2
						module = shipyard
					}
					set_starbase_module = {
						slot = 3
						module = shipyard
					}
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			# Survey Own Space
			every_planet_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = event_target:third_diadochi
				}
			}
			# Survey Rest of Marauder's Space
			root = {
				every_planet_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = event_target:third_diadochi
					}
				}
			}
			# Mining and Research Stations
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = {
					owner = event_target:third_diadochi
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = {
					owner = event_target:third_diadochi
				}
			}
			### Units
			create_ship_design = { design = "NAME_Pirate_Transport" }
			add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Clan_Builder" }
			add_ship_design = last_created_design
			random_owned_planet = { save_event_target_as = unit_spawn_point }
			# Fleet
			create_leader = {
				class = admiral
				species = owner_main_species
				name = random
				skill = 3
				leader_age_min = 25
				leader_age_max = 45
				traits = {
					trait = leader_trait_mercenary_warrior
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:third_diadochi
					while = {
						count = 16
						create_ship = {
							name = random
							design = "NAME_Outrider"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 8
						create_ship = {
							name = random
							design = "NAME_Lancer"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 6
						create_ship = {
							name = random
							design = "NAME_Void_Champion"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_Ancestral_Glory"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					assign_leader = last_created_leader
					set_location = {
						target = event_target:unit_spawn_point
						distance = 45
						angle = random
					}
				}
				settings = {
					uses_naval_capacity = no
				}
			}
			# Armies
			create_leader = {
				class = general
				species = owner_main_species
				name = random
				skill = 3
				traits = {
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:third_diadochi
					while = {
						count = 12
						create_army_transport = {
							ship_name = "NAME_Pirate_Transport"
							graphical_culture = "mammalian_01"
							army_type = "assault_army"
							species = event_target:third_diadochi
						}
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
			last_created_army = { assign_leader = last_created_leader }
			# Constructor
			create_fleet = {
				effect = {
					set_owner = event_target:third_diadochi
					create_ship = {
						name = random
						design = "NAME_Clan_Builder"
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
		}
		# Establish Communications
		every_country = {
			limit = {
				OR = {
					has_communications = root
					has_government = gov_diadochi
				}
			}
			establish_communications_no_message = event_target:third_diadochi
		}
	}
}

assign_fourth_diadochi_planets = {
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_planet = {
				has_owner = yes
				is_owned_by = root
			}
		}
		set_star_flag = fourth_diadochi_system
		save_event_target_as = fourth_diadochi_origin
	}
	effect_on_blob = {
		center = event_target:fourth_diadochi_origin
		owned_planets_percentage = 1
		planet_limit = {
			solar_system = {
				is_potential_diadochi_system = yes
			}
		}
		effect = {
			set_star_flag = fourth_diadochi_system
		}
	}
}
create_fourth_diadochi = {
	if = {
		limit = {
			exists = event_target:fourth_diadochi_origin
		}
		create_country = {
			name_list = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_fanatic_militarist
				ethic = ethic_xenophobe
			}
			ignore_initial_colony_error = yes
		}
		last_created_country = {
			save_event_target_as = fourth_diadochi
			set_country_flag = diadochi_4
			set_country_flag = diadochi
			set_name = random
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = fourth_diadochi_system
				exists = starbase
			}
			starbase = {
				set_owner = event_target:fourth_diadochi
			}
		}
		# Flip Planets
		every_owned_planet = {
			limit = {
				solar_system = { has_star_flag = fourth_diadochi_system }
			}
			set_owner = event_target:fourth_diadochi
			set_controller = event_target:fourth_diadochi
		}
		event_target:fourth_diadochi = {
			add_resource = {
				minerals = 20000
				energy = 20000
				alloys = 20000
				consumer_goods = 20000
				food = 20000
				influence = 1000
			}
			copy_techs_from = { target = root }
			every_owned_starbase = {
				set_starbase_size = starbase_outpost
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
					set_starbase_module = {
						slot = 1
						module = shipyard
					}
					set_starbase_module = {
						slot = 2
						module = shipyard
					}
					set_starbase_module = {
						slot = 3
						module = shipyard
					}
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size = starbase_outpost }
				}
				random_owned_starbase = {
					limit = { has_starbase_size = starbase_outpost }
					set_starbase_size = starbase_starhold
				}
			}
			# Survey Own Space
			every_planet_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = event_target:fourth_diadochi
				}
			}
			# Survey Rest of Marauder's Space
			root = {
				every_planet_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = event_target:fourth_diadochi
					}
				}
			}
			# Mining and Research Stations
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = {
					owner = event_target:fourth_diadochi
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = {
					owner = event_target:fourth_diadochi
				}
			}
			### Units
			create_ship_design = { design = "NAME_Pirate_Transport" }
			add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Clan_Builder" }
			add_ship_design = last_created_design
			random_owned_planet = { save_event_target_as = unit_spawn_point }
			# Fleet
			create_leader = {
				class = admiral
				species = owner_main_species
				name = random
				skill = 3
				leader_age_min = 25
				leader_age_max = 45
				traits = {
					trait = leader_trait_mercenary_warrior
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:fourth_diadochi
					while = {
						count = 16
						create_ship = {
							name = random
							design = "NAME_Outrider"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 8
						create_ship = {
							name = random
							design = "NAME_Lancer"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 6
						create_ship = {
							name = random
							design = "NAME_Void_Champion"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_Ancestral_Glory"
							prefix = no
							graphical_culture = "pirate_01"
						}
					}
					assign_leader = last_created_leader
					set_location = {
						target = event_target:unit_spawn_point
						distance = 45
						angle = random
					}
				}
				settings = {
					uses_naval_capacity = no
				}
			}
			# Armies
			create_leader = {
				class = general
				species = owner_main_species
				name = random
				skill = 3
				traits = {
					trait = random_trait
				}
			}
			create_fleet = {
				effect = {
					set_owner = event_target:fourth_diadochi
					while = {
						count = 12
						create_army_transport = {
							ship_name = "NAME_Pirate_Transport"
							graphical_culture = "mammalian_01"
							army_type = "assault_army"
							species = event_target:fourth_diadochi
						}
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
			last_created_army = { assign_leader = last_created_leader }
			# Constructor
			create_fleet = {
				effect = {
					set_owner = event_target:fourth_diadochi
					create_ship = {
						name = random
						design = "NAME_Clan_Builder"
					}
					set_location = {
						target = event_target:unit_spawn_point
						distance = 20
						angle = random
					}
				}
			}
		}
		# Establish Communications
		every_country = {
			limit = {
				OR = {
					has_communications = root
					has_government = gov_diadochi
				}
			}
			establish_communications_no_message = event_target:fourth_diadochi
		}
	}
}

assign_diadochi_systems = {
	while = {
		count = 100
		limit = {
			any_system_within_border = {
				is_potential_diadochi_system = yes
			}
		}

		if = { limit = { exists = event_target:first_diadochi_origin }
			event_target:first_diadochi_origin = {
				closest_system = {
					limit = { is_potential_diadochi_system = yes }
					max_steps = 20
					set_star_flag = first_diadochi_system
				}
			}
		}
		if = { limit = { exists = event_target:second_diadochi_origin }
			event_target:second_diadochi_origin = {
				closest_system = {
					limit = { is_potential_diadochi_system = yes }
					max_steps = 20
					set_star_flag = second_diadochi_system
				}
			}
		}
		if = { limit = { exists = event_target:third_diadochi_origin }
			event_target:third_diadochi_origin = {
				closest_system = {
					limit = { is_potential_diadochi_system = yes }
					max_steps = 20
					set_star_flag = third_diadochi_system
				}
			}
		}
		if = { limit = { exists = event_target:fourth_diadochi_origin }
			event_target:fourth_diadochi_origin = {
				closest_system = {
					limit = { is_potential_diadochi_system = yes }
					max_steps = 20
					set_star_flag = fourth_diadochi_system
				}
			}
		}
	}
}

set_diadochi_claims = {
	if = {
		limit = {
			any_country = { has_country_flag = diadochi_1 }
		}
		random_country = {
			limit = { has_country_flag = diadochi_1 }
			every_system = {
				limit = {
					exists = owner
					owner = {
						has_country_flag = diadochi
						NOT = { has_country_flag = diadochi_1 }
					}
				}
				add_claims = {
					who = prev
					num_of_claims = 1
					show_notification = yes
				}
			}
		}
	}
	if = {
		limit = {
			any_country = { has_country_flag = diadochi_2 }
		}
		random_country = {
			limit = { has_country_flag = diadochi_2 }
			every_system = {
				limit = {
					exists = owner
					owner = {
						has_country_flag = diadochi
						NOT = { has_country_flag = diadochi_2 }
					}
				}
				add_claims = {
					who = prev
					num_of_claims = 1
					show_notification = yes
				}
			}
		}
	}
	if = {
		limit = {
			any_country = { has_country_flag = diadochi_3 }
		}
		random_country = {
			limit = { has_country_flag = diadochi_3 }
			every_system = {
				limit = {
					exists = owner
					owner = {
						has_country_flag = diadochi
						NOT = { has_country_flag = diadochi_3 }
					}
				}
				add_claims = {
					who = prev
					num_of_claims = 1
					show_notification = yes
				}
			}
		}
	}
	if = {
		limit = {
			any_country = { has_country_flag = diadochi_4 }
		}
		random_country = {
			limit = { has_country_flag = diadochi_4 }
			every_system = {
				limit = {
					exists = owner
					owner = {
						has_country_flag = diadochi
						NOT = { has_country_flag = diadochi_4 }
					}
				}
				add_claims = {
					who = prev
					num_of_claims = 1
					show_notification = yes
				}
			}
		}
	}
}

fire_warning_sign = {
	if = {
		limit = { # trigger from syndaw.401
			host_has_dlc = "Synthetic Dawn Story Pack"
			NOR = {
				has_ethic = ethic_gestalt_consciousness
				has_country_flag = synthetic_empire
				has_ascension_perk = ap_the_flesh_is_weak
				has_policy_flag = ai_full_rights
				has_country_flag = no_machine_uprising
				has_policy_flag = robots_outlawed
			}
			OR = {
				has_technology = tech_combat_computers_3
				has_technology = tech_synthetic_workers
			}
		}

		random_list = { # 9 warning sign events + 1 uprising
			10 = {
				country_event = {
					id = syndaw.500
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_500
						NOT = { has_technology = tech_administrative_ai }
					}
				}
			}
			10 = {
				country_event = {
					id = syndaw.505
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_built_species = no
						has_country_flag = triggered_syndaw_505
						NOT = {
							any_owned_planet = {
								is_occupied_flag = no
								free_housing > 5
								any_owned_pop = {
									NOT = {
										has_trait = trait_mechanical
									}
								}
							}
						}
					}
				}
			}
			10 = {
				country_event = {
					id = syndaw.510
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_510
						NOT = { any_owned_ship = { is_ship_size = mining_station } }
					}
				}
			}
			10 = {
				country_event = {
					id = syndaw.515
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_515
						NOR = {
							has_technology = tech_rare_crystals
							has_technology = tech_volatile_motes
							has_technology = tech_exotic_gases
							has_technology = tech_mine_living_metal
							has_technology = tech_mine_zro
							has_technology = tech_mine_dark_matter
							has_technology = tech_terrestrial_sculpting
						}
					}
				}
			}
			10 = {
				random_owned_planet = {
					limit = {
						is_occupied_flag = no
						num_assigned_jobs = {
							job = researcher
							value >= 1
						}
					}
					planet_event = {
						id = syndaw.520
						days = 180 random = 720
					}
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_520
						NOT = {
							any_owned_planet = {
								num_assigned_jobs = {
									job = researcher
									value >= 1
								}
							}
						}
					}
				}
			}
			10 = {
				country_event = {
					id = syndaw.525
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_525
						NOT = {
							any_owned_planet = {
								is_occupied_flag = no
								any_owned_pop = { has_trait = trait_mechanical }
							}
						}
					}
				}
			}
			10 = {
				country_event = {
					id = syndaw.530
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_530
						is_at_war = yes
						NOR = {
							has_technology = tech_combat_computers_1
							any_owned_fleet = {
								is_in_combat = no
								count_owned_ship = {
									count > 1
									limit = {
										OR = {
											is_ship_size = corvette
											is_ship_size = destroyer
											is_ship_size = cruiser
										}
									}
								}
							}
						}
					}
				}
			}
			10 = {
				country_event = { id = syndaw.535 }
				modifier = {
					factor = 0
					has_country_flag = triggered_syndaw_535
				}
			}
			10 = {
				random_owned_planet = {
					limit = {
						is_occupied_flag = no
						OR = {
							any_owned_pop = {
								has_trait = trait_mechanical
							}
							owner = {
								any_owned_army = {
									exists = planet
									planet = { is_same_value = root }
									OR = {
										army_type = robotic_army
										army_type = robotic_defense_army
									}
								}
							}
						}
					}
					planet_event = {
						id = syndaw.540
						days = 180 random = 720
					}
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_540
						NOT = {
							any_owned_planet = {
								is_occupied_flag = no
								OR = {
									any_owned_pop = {
										has_trait = trait_mechanical
									}
									owner = {
										any_owned_army = {
											exists = planet
											planet = { is_same_value = root }
											OR = {
												army_type = robotic_army
												army_type = robotic_defense_army
											}
										}
									}
								}
							}
						}
					}
				}
			}
			10 = { # does this unit have a soul
				random_owned_planet = {
					limit = {
						is_occupied_flag = no
						any_owned_pop = {
							has_trait = trait_mechanical
						}
					}
					planet_event = {
						id = syndaw.545
						days = 180 random = 720
					}
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_545
						NOT = {
							any_owned_planet = {
								is_occupied_flag = no
								any_owned_pop = {
									has_trait = trait_mechanical
								}
							}
						}
					}
				}
			}
			1 = { # patch the uprising
				country_event = {
					id = syndaw.550
					days = 180 random = 720
				}
				modifier = {
					factor = 0
					OR = {
						has_country_flag = triggered_syndaw_550
						NOR = {
							has_country_flag = triggered_syndaw_500
							has_country_flag = triggered_syndaw_505
							has_country_flag = triggered_syndaw_515
							has_country_flag = triggered_syndaw_520
							has_country_flag = triggered_syndaw_525
							has_country_flag = triggered_syndaw_530
							has_country_flag = triggered_syndaw_535
							has_country_flag = triggered_syndaw_540
							has_country_flag = triggered_syndaw_545
						}
					}
				}
			}
			1 = { # machine uprising
				country_event = {
					id = syndaw.1000
					days = 180 random = 720
				}
			}
		}
	}
}

fallen_empire_humiliate_effect = {
	hidden_effect = {
		add_modifier = { modifier = humiliated days = 3600 }
		if = {
			limit = { has_policy_flag = diplo_stance_supremacist }
			set_policy = {
				policy = diplomatic_stance
				option = diplo_stance_belligerent
				cooldown = yes
			}
		}
		end_rivalry = event_target:fallen_empire_humiliator
		save_event_target_as = fallen_empire_humiliated
		event_target:fallen_empire_humiliator = {
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_insult }
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_refused_fallen_empire_demand }
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_refused_fallen_empire_task }
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_failed_fallen_empire_task }
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_majorly_failed_fallen_empire_task }
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_refused_fallen_empire_request }
			remove_opinion_modifier = { who = event_target:fallen_empire_humiliated modifier = opinion_spurned_fallen_empire_gift }
		}
		event_target:fallen_empire_humiliator = {
			every_system_within_border = {
				limit = {
					event_target:fallen_empire_humiliated = { has_claim = prev }
				}
				remove_claims = { who = event_target:fallen_empire_humiliated }
			}
		}
	}
}

fallen_empire_stop_atrocities_effect = {
	hidden_effect = {
		set_policy = {
			policy = slavery
			option = slavery_not_allowed
			cooldown = yes
		}
		set_policy = {
			policy = purge
			option = purge_not_allowed
			cooldown = yes
		}
		every_subject = {
			set_policy = {
				policy = slavery
				option = slavery_not_allowed
				cooldown = yes
			}
			set_policy = {
				policy = purge
				option = purge_not_allowed
				cooldown = yes
			}
		}
	}
}

fallen_empire_stop_ai_effect = {
	hidden_effect = {
		set_policy = {
			policy = artificial_intelligence_policy
			option = ai_outlawed
			cooldown = yes
		}
	}
}

fallen_empire_cleanse_holy_worlds_effect = {
	every_owned_planet = {
		limit = {
			has_modifier = "holy_planet"
		}
		destroy_colony = yes
	}
}

fallen_empire_cleanse_border_worlds_effect = {
	every_owned_planet = {
		limit = {
			is_capital = no
			solar_system = {
				has_hyperlane_to = event_target:fallen_empire_humiliator
			}
		}
		destroy_colony = yes
	}
	every_owned_fleet = {
		limit = {
			is_ship_class = shipclass_starbase
			solar_system = {
				has_hyperlane_to = event_target:fallen_empire_humiliator
			}
		}
		destroy_fleet = this
	}
	every_subject = {
		every_owned_planet = {
			limit = {
				is_capital = no
				solar_system = {
					has_hyperlane_to = event_target:fallen_empire_humiliator
				}
			}
			destroy_colony = yes
		}
		every_owned_fleet = {
			limit = {
				is_ship_class = shipclass_starbase
				solar_system = {
					has_hyperlane_to = event_target:fallen_empire_humiliator
				}
			}
			destroy_fleet = this
		}
	}
}

# Planet Cracker effect
spawn_habitat_cracker_effect = {
	create_ambient_object = {
		location = this
		type = habitat_cracker_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

spawn_ringworld_cracker_effect = {
	create_ambient_object = {
		location = this
		type = ringworld_cracker_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

# Global Pacifier effect
spawn_habitat_pacifier_effect = {
	create_ambient_object = {
		location = this
		type = habitat_pacifier_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

spawn_ringworld_pacifier_effect = {
	create_ambient_object = {
		location = this
		type = ringworld_pacifier_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

# Neutron Sweep effect
spawn_habitat_neutron_effect = {
	create_ambient_object = {
		location = this
		type = habitat_neutron_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

spawn_ringworld_neutron_effect = {
	create_ambient_object = {
		location = this
		type = ringworld_neutron_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

# Divine Enforcer effect
spawn_habitat_divine_effect = {
	create_ambient_object = {
		location = this
		type = habitat_divine_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

spawn_ringworld_divine_effect = {
	create_ambient_object = {
		location = this
		type = ringworld_divine_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

# Nanobot effect
spawn_habitat_nanobot_effect = {
	create_ambient_object = {
		location = this
		type = habitat_nanobot_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

spawn_ringworld_nanobot_effect = {
	create_ambient_object = {
		location = this
		type = ringworld_nanobot_object
		duration = 5

		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star

		entity_offset = { min = 0 max = 0 }

		entity_scale_to_size = yes
		scale = 0.10
	}
}

remove_xuracorp_trades = {
	if = { limit = { has_modifier = enclave_trade_1_xur }
					remove_modifier = enclave_trade_1_xur }
	if = { limit = { has_modifier = enclave_trade_2_xur }
					remove_modifier = enclave_trade_2_xur }
	if = { limit = { has_modifier = enclave_trade_3_xur }
					remove_modifier = enclave_trade_3_xur }
	if = { limit = { has_modifier = enclave_trade_4_xur }
					remove_modifier = enclave_trade_4_xur	}
	if = { limit = { has_modifier = enclave_trade_5_xur }
					remove_modifier = enclave_trade_5_xur	}
}

remove_riggan_trades = {
	if = { limit = { has_modifier = enclave_trade_1_rig }
					remove_modifier = enclave_trade_1_rig }
	if = { limit = { has_modifier = enclave_trade_2_rig }
					remove_modifier = enclave_trade_2_rig }
	if = { limit = { has_modifier = enclave_trade_3_rig }
					remove_modifier = enclave_trade_3_rig }
	if = { limit = { has_modifier = enclave_trade_4_rig }
					remove_modifier = enclave_trade_4_rig	}
	if = { limit = { has_modifier = enclave_trade_5_rig }
					remove_modifier = enclave_trade_5_rig	}
}

remove_muutagan_trades = {
	if = { limit = { has_modifier = enclave_trade_1_mut }
					remove_modifier = enclave_trade_1_mut }
	if = { limit = { has_modifier = enclave_trade_2_mut }
					remove_modifier = enclave_trade_2_mut }
	if = { limit = { has_modifier = enclave_trade_3_mut }
					remove_modifier = enclave_trade_3_mut }
	if = { limit = { has_modifier = enclave_trade_4_mut }
					remove_modifier = enclave_trade_4_mut	}
	if = { limit = { has_modifier = enclave_trade_5_mut }
					remove_modifier = enclave_trade_5_mut	}
}

add_leader_traits_after_modification = {
	ariphaos_patch_leader_change_traits = yes
}

# Duplicated for compatibility purposes.
remove_leader_traits_after_modification = {
	ariphaos_patch_leader_change_traits = yes
}

incr_minerallump1_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_mineral_lump1
				value < 1
			}
		}
		set_variable = {
			which = aianom_mineral_lump1
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_mineral_lump1
			value = 1
		}
	}
}

incr_minerallump2_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_mineral_lump2
				value < 1
			}
		}
		set_variable = {
			which = aianom_mineral_lump2
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_mineral_lump2
			value = 1
		}
	}
}

incr_minerallump3_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_mineral_lump3
				value < 1
			}
		}
		set_variable = {
			which = aianom_mineral_lump3
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_mineral_lump3
			value = 1
		}
	}
}

incr_minerallump4_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_mineral_lump4
				value < 1
			}
		}
		set_variable = {
			which = aianom_mineral_lump4
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_mineral_lump4
			value = 1
		}
	}
}

incr_energylump1_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_energy_lump1
				value < 1
			}
		}
		set_variable = {
			which = aianom_energy_lump1
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_energy_lump1
			value = 1
		}
	}
}

incr_energylump2_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_energy_lump2
				value < 1
			}
		}
		set_variable = {
			which = aianom_energy_lump2
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_energy_lump2
			value = 1
		}
	}
}

incr_energylump3_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_energy_lump3
				value < 1
			}
		}
		set_variable = {
			which = aianom_energy_lump3
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_energy_lump3
			value = 1
		}
	}
}

incr_energylump4_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_energy_lump4
				value < 1
			}
		}
		set_variable = {
			which = aianom_energy_lump4
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_energy_lump4
			value = 1
		}
	}
}

incr_physicslump1_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_physics_lump1
				value < 1
			}
		}
		set_variable = {
			which = aianom_physics_lump1
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_physics_lump1
			value = 1
		}
	}
}

incr_physicslump2_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_physics_lump2
				value < 1
			}
		}
		set_variable = {
			which = aianom_physics_lump2
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_physics_lump2
			value = 1
		}
	}
}

incr_physicslump3_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_physics_lump3
				value < 1
			}
		}
		set_variable = {
			which = aianom_physics_lump3
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_physics_lump3
			value = 1
		}
	}
}

incr_physicslump4_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_physics_lump4
				value < 1
			}
		}
		set_variable = {
			which = aianom_physics_lump4
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_physics_lump4
			value = 1
		}
	}
}

incr_societylump1_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_society_lump1
				value < 1
			}
		}
		set_variable = {
			which = aianom_society_lump1
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_society_lump1
			value = 1
		}
	}
}

incr_societylump2_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_society_lump2
				value < 1
			}
		}
		set_variable = {
			which = aianom_society_lump2
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_society_lump2
			value = 1
		}
	}
}

incr_societylump3_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_society_lump3
				value < 1
			}
		}
		set_variable = {
			which = aianom_society_lump3
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_society_lump3
			value = 1
		}
	}
}

incr_societylump4_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_society_lump4
				value < 1
			}
		}
		set_variable = {
			which = aianom_society_lump4
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_society_lump4
			value = 1
		}
	}
}

incr_engineeringlump1_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_engineering_lump1
				value < 1
			}
		}
		set_variable = {
			which = aianom_engineering_lump1
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_engineering_lump1
			value = 1
		}
	}
}

incr_engineeringlump2_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_engineering_lump2
				value < 1
			}
		}
		set_variable = {
			which = aianom_engineering_lump2
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_engineering_lump2
			value = 1
		}
	}
}

incr_engineeringlump3_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_engineering_lump3
				value < 1
			}
		}
		set_variable = {
			which = aianom_engineering_lump3
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_engineering_lump3
			value = 1
		}
	}
}

incr_engineeringlump4_var = {
	if = {
		limit = {
			check_variable = {
				which = aianom_engineering_lump4
				value < 1
			}
		}
		set_variable = {
			which = aianom_engineering_lump4
			value = 1
		}
	}
	else = {
		change_variable = {
			which = aianom_engineering_lump4
			value = 1
		}
	}
}

incr_mineraldepo1_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_mineral_depo1
					value < 1
				}
			}
			set_variable = {
				which = aianom_mineral_depo1
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_mineral_depo1
				value = 1
			}
		}
	}
}

incr_mineraldepo2_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_mineral_depo2
					value < 1
				}
			}
			set_variable = {
				which = aianom_mineral_depo2
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_mineral_depo2
				value = 1
			}
		}
	}
}

incr_mineraldepo3_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_mineral_depo3
					value < 1
				}
			}
			set_variable = {
				which = aianom_mineral_depo3
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_mineral_depo3
				value = 1
			}
		}
	}
}

incr_mineraldepo4_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_mineral_depo4
					value < 1
				}
			}
			set_variable = {
				which = aianom_mineral_depo4
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_mineral_depo4
				value = 1
			}
		}
	}
}

incr_energydepo1_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_energy_depo1
					value < 1
				}
			}
			set_variable = {
				which = aianom_energy_depo1
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_energy_depo1
				value = 1
			}
		}
	}
}

incr_energydepo2_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_energy_depo2
					value < 1
				}
			}
			set_variable = {
				which = aianom_energy_depo2
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_energy_depo2
				value = 1
			}
		}
	}
}

incr_energydepo3_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_energy_depo3
					value < 1
				}
			}
			set_variable = {
				which = aianom_energy_depo3
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_energy_depo3
				value = 1
			}
		}
	}
}

incr_energydepo4_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_energy_depo4
					value < 1
				}
			}
			set_variable = {
				which = aianom_energy_depo4
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_energy_depo4
				value = 1
			}
		}
	}
}

incr_physicsdepo1_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_physics_depo1
					value < 1
				}
			}
			set_variable = {
				which = aianom_physics_depo1
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_physics_depo1
				value = 1
			}
		}
	}
}

incr_physicsdepo2_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_physics_depo2
					value < 1
				}
			}
			set_variable = {
				which = aianom_physics_depo2
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_physics_depo2
				value = 1
			}
		}
	}
}

incr_physicsdepo3_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_physics_depo3
					value < 1
				}
			}
			set_variable = {
				which = aianom_physics_depo3
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_physics_depo3
				value = 1
			}
		}
	}
}

incr_physicsdepo4_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_physics_depo4
					value < 1
				}
			}
			set_variable = {
				which = aianom_physics_depo4
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_physics_depo4
				value = 1
			}
		}
	}
}

incr_societydepo1_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_society_depo1
					value < 1
				}
			}
			set_variable = {
				which = aianom_society_depo1
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_society_depo1
				value = 1
			}
		}
	}
}

incr_societydepo2_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_society_depo2
					value < 1
				}
			}
			set_variable = {
				which = aianom_society_depo2
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_society_depo2
				value = 1
			}
		}
	}
}

incr_societydepo3_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_society_depo3
					value < 1
				}
			}
			set_variable = {
				which = aianom_society_depo3
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_society_depo3
				value = 1
			}
		}
	}
}

incr_societydepo4_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_society_depo4
					value < 1
				}
			}
			set_variable = {
				which = aianom_society_depo4
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_society_depo4
				value = 1
			}
		}
	}
}

incr_engineeringdepo1_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_engineering_depo1
					value < 1
				}
			}
			set_variable = {
				which = aianom_engineering_depo1
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_engineering_depo1
				value = 1
			}
		}
	}
}

incr_engineeringdepo2_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_engineering_depo2
					value < 1
				}
			}
			set_variable = {
				which = aianom_engineering_depo2
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_engineering_depo2
				value = 1
			}
		}
	}
}

incr_engineeringdepo3_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_engineering_depo3
					value < 1
				}
			}
			set_variable = {
				which = aianom_engineering_depo3
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_engineering_depo3
				value = 1
			}
		}
	}
}

incr_engineeringdepo4_var = {
	root.owner = {
		if = {
			limit = {
				check_variable = {
					which = aianom_engineering_depo4
					value < 1
				}
			}
			set_variable = {
				which = aianom_engineering_depo4
				value = 1
			}
		}
		else = {
			change_variable = {
				which = aianom_engineering_depo4
				value = 1
			}
		}
	}
}

add_alloys = {
	set_deposit = d_alloys_1
}

add_volatile_motes = {
	set_deposit = d_volatile_motes_1
}

add_exotic_gases = {
	set_deposit = d_exotic_gases_1
}

add_rare_crystals = {
	set_deposit = d_rare_crystals_1
}

add_dark_matter = {
	random_list = {
		16 = { set_deposit = d_dark_matter_deposit_1 }
		4 = { set_deposit = d_dark_matter_deposit_2 }
		1 = { set_deposit = d_dark_matter_deposit_3 }
	}
}

add_zro = {
	random_list = {
		16 = { set_deposit = d_zro_deposit_1 }
		4 = { set_deposit = d_zro_deposit_2 }
		1 = { set_deposit = d_zro_deposit_3 }
	}
}

# giving clues, see pop_lcluster_event for popping follow-up events
# this = country getting a clue
generate_lcluster_clue = {
	hidden_effect = {
		# increment counter
		if = {
			limit = {
				has_distar = yes
				NOT = { has_global_flag = l_cluster_opened }
				has_event_chain = l_cluster_chain
			}
			# increment counter
			custom_tooltip = add_lcluster_clue
			add_event_chain_counter = {
				event_chain = l_cluster_chain
				counter = clues
				amount = 1
			}
			# increment variable
			change_variable = {
				which = num_lcluster_clues
				value = 1
			}
		}
		#else = {
		#	# failsafe, do nothing
		#}
		# check if completed
		if = {
			limit = {
				has_completed_event_chain_counter = {
					event_chain = l_cluster_chain
					counter = clues
				}
			}
			custom_tooltip = l_cluster_openable
			set_country_flag = completed_lcluster_chain
			country_event = { id = distar.10904 }
		}
	}
}

# this = solar system to isolate
isolate_system = {
	every_system = {
		limit = { has_hyperlane_to = prev }
		remove_hyperlane = { from = this to = prev }
	}
}

# for follow-up events
# use in AFTER or OPTION for timing reasons
# this = country getting a clue
pop_lcluster_event = {
	hidden_effect = {
		# pop follow-up if valid
		if = {
			limit = {
				has_distar = yes
				has_country_flag = encountered_first_lgate
				NOR = {
					has_global_flag = l_cluster_opened
					has_completed_event_chain_counter = {
						event_chain = l_cluster_chain
						counter = clues
					}
				}
			}
			random_list = {
				7 = {}
				3 = { country_event = { id = distar.9000 days = 10 } }
			}
		}
	}
}

create_enigmatic_cache_fleet = {
	create_fleet = {
		name = "NAME_enigmatic_cache"
		settings = {
			spawn_debris = no
			is_boss = yes
		}
		effect = {
			save_global_event_target_as = enigmatic_cache_fleet
			set_owner = event_target:enigmatic_cache_country
			create_ship = {
				name = "NAME_enigmatic_cache"
				design = NAME_enigmatic_cache
				effect = {
					set_disable_at_health = 0.90
					save_global_event_target_as = enigmatic_cache_ship
					set_ship_flag = enigmatic_cache_ship
				}
			}
			set_fleet_flag = enigmatic_cache_fleet
			set_location = {
				target = event_target:new_location
				distance = 80
				angle = 220
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			auto_move_to_planet = {
				target = event_target:new_location
				clear_auto_move_on_arrival = no
			}
		}
	}
}

start_lcluster_chain = {
	hidden_effect = {
		custom_tooltip = begin_lcluster_chain
		begin_event_chain = {
			event_chain = l_cluster_chain
			target = this
		}
		set_variable = {
			which = num_lcluster_clues
			value = 0
		}
	}
}

liquidate_clues = {
	hidden_effect = {
		if = {
			limit = {
				has_special_project = LCLUSTER_PROJECT
			}
			custom_tooltip = liquidated_7
			add_resource = {
				engineering_research = 3500
				energy = 3500
			}
			abort_special_project = { type = LCLUSTER_PROJECT }
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value > 6
				}
			}
			custom_tooltip = liquidated_7
			add_resource = {
				engineering_research = 3500
				energy = 3500
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value = 6
				}
			}
			custom_tooltip = liquidated_6
			add_resource = {
				engineering_research = 3000
				energy = 3000
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value = 5
				}
			}
			custom_tooltip = liquidated_5
			add_resource = {
				engineering_research = 2500
				energy = 2500
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value = 4
				}
			}
			custom_tooltip = liquidated_4
			add_resource = {
				engineering_research = 2000
				energy = 2000
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value = 3
				}
			}
			custom_tooltip = liquidated_3
			add_resource = {
				engineering_research = 1500
				energy = 1500
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value = 2
				}
			}
			custom_tooltip = liquidated_2
			add_resource = {
				engineering_research = 1000
				energy = 1000
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = num_lcluster_clues
					value = 1
				}
			}
			custom_tooltip = liquidated_1
			add_resource = {
				engineering_research = 500
				energy = 500
			}
		}
		else = {
			custom_tooltip = liquidated_0
		}
		if = {
			limit = { has_event_chain = l_cluster_chain }
			end_event_chain = l_cluster_chain
		}
	}
}

create_built_robot_species = {
	create_species = {
		name = "NAME_Robot"
		plural = "NAME_Robots"
		class = ROBOT
		namelist = this
		portrait = "default_robot"
		traits = {
			trait = "trait_mechanical"
		}

		effect = {
			set_species_flag = mechanical_species@prev
			if = {
				limit = {
					prev = { use_robot_portrait_sd_hum_robot = yes }
				}
				change_species_portrait = sd_hum_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_mam_robot = yes }
				}
				change_species_portrait = sd_mam_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_rep_robot = yes }
				}
				change_species_portrait = sd_rep_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_avi_robot = yes }
				}
				change_species_portrait = sd_avi_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_art_robot = yes }
				}
				change_species_portrait = sd_art_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_mol_robot = yes }
				}
				change_species_portrait = sd_mol_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_fun_robot = yes }
				}
				change_species_portrait = sd_fun_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_pla_robot = yes }
				}
				change_species_portrait = sd_pla_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_lit_robot = yes }
				}
				change_species_portrait = lith_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_nec_robot = yes }
				}
				change_species_portrait = nec_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_aqu_robot = yes }
				}
				change_species_portrait = aqu_machine
			}
		}
	}

	set_built_species = last_created_species
}


create_fe_servant_species = {
	create_species = {
		name = random
		class = random_non_machine
		portrait = random
		traits = {
			ideal_planet_class = root
			trait = "trait_charismatic"
		}
	}
	last_created_species = {
		create_species = {
			is_mod = yes
			name = this
			class = this
			portrait = this
			traits = {
				ideal_planet_class = root
				trait = "trait_strong"
				trait = "trait_charismatic"
				trait = "trait_nerve_stapled"
			}
		}
	}
}

create_fe_servant_robots = {
	create_species = {
		name = "NAME_Synthetic"
		plural = "NAME_Synthetics"
		class = ROBOT
		namelist = this
		portrait = "default_robot"
		traits = {
			trait = "trait_mechanical"
			trait = "trait_robot_luxurious"
			trait = "trait_robot_domestic_protocols"
		}

		effect = {
			if = {
				limit = {
					prev = { use_robot_portrait_sd_hum_robot = yes }
				}
				change_species_portrait = sd_hum_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_mam_robot = yes }
				}
				change_species_portrait = sd_mam_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_rep_robot = yes }
				}
				change_species_portrait = sd_rep_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_avi_robot = yes }
				}
				change_species_portrait = sd_avi_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_art_robot = yes }
				}
				change_species_portrait = sd_art_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_mol_robot = yes }
				}
				change_species_portrait = sd_mol_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_fun_robot = yes }
				}
				change_species_portrait = sd_fun_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_pla_robot = yes }
				}
				change_species_portrait = sd_pla_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_lit_robot = yes }
				}
				change_species_portrait = lith_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_nec_robot = yes }
				}
				change_species_portrait = nec_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_aqu_robot = yes }
				}
				change_species_portrait = aqu_machine
			}
		}
	}

	set_built_species = last_created_species
}

create_fe_fringe_colony = {
	set_planet_flag = fallen_empire_world
	clear_blockers = yes
	prevent_anomaly = yes
	set_owner = ROOT
	add_building = building_ancient_palace
	add_building = building_fe_dome
	while = {
		count = 5
		add_district = {
			district_type = district_city
			ignore_cap = yes
		}
	}
	while = {
		count = 8
		create_pop = {
			species = owner_main_species
		}
	}
	while = {
		count = 8
		create_pop = {
			species = event_target:fe_servants
		}
	}
}

create_fe_spiritualist_fringe_colony = {
	set_planet_flag = fallen_empire_world
	clear_blockers = yes
	prevent_anomaly = yes
	set_owner = ROOT
	add_building = building_ancient_palace
	add_building = building_fe_dome
	while = {
		count = 3
		add_district_and_planet_size_if_needed_effect = {
			district = district_city
		}
	}
	while = {
		count = 2
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
	}
	while = {
		count = 2
		add_district_and_planet_size_if_needed_effect = {
			district = district_mining
		}
	}
	while = {
		count = 2
		add_district_and_planet_size_if_needed_effect = {
			district = district_farming
		}
	}
	while = {
		count = 20
		create_pop = {
			species = owner_main_species
		}
	}
}

give_next_terraforming_tech_option_effect = {
	if = {
		limit = { NOT = { has_technology = tech_terrestrial_sculpting } }
		add_research_option = tech_terrestrial_sculpting
		add_tech_progress = {
			tech = tech_terrestrial_sculpting
			progress = 0.25
		}
	}
	else_if = {
		limit = { NOT = { has_technology = tech_ecological_adaptation } }
		add_research_option = tech_ecological_adaptation
		add_tech_progress = {
			tech = tech_ecological_adaptation
			progress = 0.25
		}
	}
	else_if = {
		limit = { NOT = { has_technology = tech_climate_restoration } }
		add_research_option = tech_climate_restoration
		add_tech_progress = {
			tech = tech_climate_restoration
			progress = 0.25
		}
	}
	else = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

give_next_ai_tech_option_effect = {
	if = {
		limit = { NOT = { has_technology = tech_self_aware_logic } }
		add_research_option = tech_self_aware_logic
		add_tech_progress = {
			tech = tech_self_aware_logic
			progress = 0.25
		}
	}
	else_if = {
		limit = {
			NOT = { has_technology = tech_sapient_ai }
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		add_research_option = tech_sapient_ai
		add_tech_progress = {
			tech = tech_sapient_ai
			progress = 0.25
		}
	}
	else_if = {
		limit = {
			NOT = { has_technology = tech_positronic_implants }
			has_ethic = ethic_gestalt_consciousness
		}
		add_research_option = tech_positronic_implants
		add_tech_progress = {
			tech = tech_positronic_implants
			progress = 0.25
		}
	}
	else_if = {
		limit = {
			NOT = { has_technology = tech_combat_computers_3 }
		}
		add_research_option = tech_combat_computers_3
		add_tech_progress = {
			tech = tech_combat_computers_3
			progress = 0.25
		}
	}
	else = {
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

give_next_armor_tech_option_effect = {
	if = {
		limit = { NOT = { has_technology = tech_ship_armor_1 } }
		give_tech_option_or_progress_effect = {
			TECH = tech_ship_armor_1
		}
	}
	else_if = {
		limit = { NOT = { has_technology = tech_ship_armor_2 } }
		give_tech_option_or_progress_effect = {
			TECH = tech_ship_armor_2
		}
	}
	else_if = {
		limit = { NOT = { has_technology = tech_ship_armor_3 } }
		give_tech_option_or_progress_effect = {
			TECH = tech_ship_armor_3
		}
	}
	else_if = {
		limit = { NOT = { has_technology = tech_ship_armor_4 } }
		give_tech_option_or_progress_effect = {
			TECH = tech_ship_armor_4
		}
	}
	else_if = {
		limit = { NOT = { has_technology = tech_ship_armor_5 } }
		give_tech_option_or_progress_effect = {
			TECH = tech_ship_armor_5
		}
	}
	else = {
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

give_next_habitability_tech_option_effect = {
	if = {
		limit = {
			NOT = { has_technology = tech_colonization_2 }
			can_research_technology = tech_colonization_2
		}
		give_tech_option_or_progress_effect = {
			TECH = tech_colonization_2
		}
	}
	else_if = {
		limit = {
			NOT = { has_technology = tech_colonization_3 }
			can_research_technology = tech_colonization_3
		}
		give_tech_option_or_progress_effect = {
			TECH = tech_colonization_3
		}
	}
	else_if = {
		limit = {
			NOT = { has_technology = tech_colonization_4 }
			can_research_technology = tech_colonization_4
		}
		give_tech_option_or_progress_effect = {
			TECH = tech_colonization_4
		}
	}
	else_if = {
		limit = {
			NOT = { has_technology = tech_colonization_5 }
			can_research_technology = tech_colonization_5
		}
		give_tech_option_or_progress_effect = {
			TECH = tech_colonization_5
		}
	}
	else = {
		add_monthly_resource_mult = {
			 resource = society_research
			 value = @tier3researchreward
			 min = @tier3researchmin
			 max = @tier3researchmax
		 }
	}
}

grant_dragon_armor_effect = {
	if = {
		limit = {
			NOR = {
				has_technology = tech_dragon_armor
				has_tech_option = tech_dragon_armor
			}
		}
		add_tech_progress = {
			tech = tech_dragon_armor
			progress = 0.3
		}
	}
	else = {
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier4researchreward
			min = @tier4researchmin
			max = @tier4researchmax
		}
	}
}

give_tech_option_or_progress_effect = {
	if = {
		limit = { NOT = { has_tech_option = $TECH$ } }
		add_research_option = $TECH$
		add_tech_progress = {
			tech = $TECH$
			progress = 0.25
		}
	}
	else = {
		add_tech_progress = {
			tech = $TECH$
			progress = 0.5
		}
	}
}

#Use in war scope. War is deleted.
end_war_effect = {
	every_war_participant = {
		limit = { NOT = { is_same_value = prevprev } } # don't break the loop
		prev = { remove_war_participant = prev }
	}
}

create_tiyanki_fleet_1 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_country
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Bull"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			set_location = event_target:giant
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				wait = { # Cooldown until they start moving
					duration = 320
					random = 80
				}
			}
		}
	}
}

create_tiyanki_fleet_2 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_country
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			set_location = event_target:giant
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				wait = { # Cooldown until they start moving
					duration = 320
					random = 80
				}
			}
		}
	}
}

create_tiyanki_fleet_3 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_country
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Bull"
			}
			create_ship = {
				design = "NAME_Tiyanki_Bull"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			set_location = event_target:giant
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				wait = { # Cooldown until they start moving
					duration = 320
					random = 80
				}
			}
		}
	}
}

create_tiyanki_fleet_4 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_country
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Bull"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			create_ship = {
				design = "NAME_Tiyanki_Calf"
			}
			set_location = event_target:giant
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				wait = { # Cooldown until they start moving
					duration = 320
					random = 80
				}
			}
		}
	}
}

create_tiyanki_fleet_5 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_country
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Cow"
			}
			create_ship = {
				design = "NAME_Tiyanki_Bull"
			}
			create_ship = {
				design = "NAME_Tiyanki_Bull"
			}
			create_ship = {
				design = "NAME_Tiyanki_Hatchling"
			}
			set_location = event_target:giant
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				wait = { # Cooldown until they start moving
					duration = 320
					random = 80
				}
			}
		}
	}
}

create_tiyanki_home_fleet_1 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 5
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 5
				create_ship = {
					design = "NAME_Tiyanki_Bull"
				}
			}
			while = {
				count = 8
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 9
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			set_location = event_target:giant1
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 4
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			set_location = {
				target = event_target:giant1
				distance = 12
				angle = 0
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}
}

create_tiyanki_home_fleet_2 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 5
				create_ship = {
					design = "NAME_Tiyanki_Bull"
				}
			}
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 3
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			set_location = event_target:giant2
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 4
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			set_location = {
				target = event_target:giant2
				distance = 12
				angle = 0
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}
}

create_tiyanki_home_fleet_3 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 6
				create_ship = {
					design = "NAME_Tiyanki_Bull"
				}
			}
			while = {
				count = 12
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			set_location = event_target:giant3
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 4
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 2
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			while = {
				count = 3
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:giant3
				distance = 12
				angle = 0
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}
}

create_tiyanki_home_fleet_4 = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 4
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 3
				create_ship = {
					design = "NAME_Tiyanki_Bull"
				}
			}
			while = {
				count = 12
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 9
				create_ship = {
					design = "NAME_Tiyanki_Calf"
				}
			}
			set_location = event_target:giant4
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 4
				create_ship = {
					design = "NAME_Tiyanki_Cow"
				}
			}
			while = {
				count = 6
				create_ship = {
					design = "NAME_Tiyanki_Bull"
				}
			}
			set_location = {
				target = event_target:giant4
				distance = 12
				angle = 0
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
		}
	}
}

create_tiyanki_home_roaming_fleets = {
	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 22
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:giant1
				distance = 25
				angle = 94
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = tiyanki.patrol.1
							has_planet_flag = tiyanki_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet  = {
						trigger = {
							id = tiyanki.patrol.2
							has_planet_flag = tiyanki_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet  = {
						trigger = {
							id = tiyanki.patrol.3
							has_planet_flag = tiyanki_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki.patrol.4
							has_planet_flag = tiyanki_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 14
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:giant1
				distance = 25
				angle = 94
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = tiyanki2.patrol.1
							has_planet_flag = tiyanki_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki2.patrol.2
							has_planet_flag = tiyanki_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki2.patrol.3
							has_planet_flag = tiyanki_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki2.patrol.4
							has_planet_flag = tiyanki_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 19
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:giant3
				distance = 25
				angle = 94
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = tiyanki3.patrol.1
							has_planet_flag = tiyanki_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki3.patrol.2
							has_planet_flag = tiyanki_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki3.patrol.3
							has_planet_flag = tiyanki_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki3.patrol.4
							has_planet_flag = tiyanki_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}

	create_fleet = {
		name = "NAME_Tiyanki_Space_Whale"
		effect = {
			set_owner = event_target:tiyanki_garrison_country
			while = {
				count = 16
				create_ship = {
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:giant2
				distance = 25
				angle = 94
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 0
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = tiyanki4.patrol.1
							has_planet_flag = tiyanki_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki4.patrol.2
							has_planet_flag = tiyanki_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki4.patrol.3
							has_planet_flag = tiyanki_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = tiyanki4.patrol.4
							has_planet_flag = tiyanki_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}
}


create_amoeba_home_fleet_1 = {
	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 3
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Blue"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Blue"
				}
			}
			set_location = event_target:amoeba_giant
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
		}
	}

	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 5
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Zebra"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Zebra"
				}
			}
			set_location = {
				target = event_target:amoeba_giant
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
		}
	}
}

create_amoeba_home_fleet_2 = {
	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 5
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Zebra"
				}
			}
			while = {
				count = 21
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Zebra"
				}
			}
			set_location = event_target:amoeba_star
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
		}
	}

	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 3
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Orange"
				}
			}
			while = {
				count = 14
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Orange"
				}
			}
			set_location = {
				target = event_target:amoeba_star
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
		}
	}
}

create_amoeba_home_roaming_fleets = {
	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 3
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Blue"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Blue"
				}
			}
			set_location = {
				target = event_target:amoeba_ice_asteroid_1
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = amoeba.patrol.1
							has_planet_flag = amoeba_ice_asteroid_2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba.patrol.2
							has_planet_flag = amoeba_star
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba.patrol.3
							has_planet_flag = amoeba_ice_asteroid_3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba.patrol.4
							has_planet_flag = amoeba_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba.patrol.5
							has_planet_flag = amoeba_ice_asteroid_1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba.patrol.6
							has_planet_flag = amoeba_star
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}

	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 3
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Teal"
				}
			}
			while = {
				count = 10
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Teal"
				}
			}
			set_location = {
				target = event_target:amoeba_ice_asteroid_2
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = amoeba2.patrol.1
							has_planet_flag = amoeba_ice_asteroid_3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba2.patrol.2
							has_planet_flag = amoeba_ice_asteroid_1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba2.patrol.3
							has_planet_flag = amoeba_ice_asteroid_2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}

	create_fleet = {
		name = "NAME_Amoeba_Swarm"
		effect = {
			set_owner = event_target:amoeba_garrison_country
			while = {
				count = 6
				create_ship = {
					name = ""
					design = "NAME_Large_Space_Organism_Orange"
				}
			}
			while = {
				count = 7
				create_ship = {
					name = ""
					design = "NAME_Small_Space_Organism_Orange"
				}
			}
			set_location = {
				target = event_target:amoeba_ice_asteroid_3
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 200
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = amoeba3.patrol.1
							has_planet_flag = amoeba_ice_asteroid_2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba3.patrol.2
							has_planet_flag = amoeba_star
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba3.patrol.3
							has_planet_flag = amoeba_ice_asteroid_1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = amoeba3.patrol.4
							has_planet_flag = amoeba_ice_asteroid_3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}
	}
}

#Mining Drone Expansion Fleets (4th Anniversary)
create_mining_drone_expansion_fleet = {
	create_fleet = {
		name = "NAME_Mining_Drone_Expansion_Fleet"
		effect = {
			set_owner = event_target:mining_drone_expansion_country
			set_fleet_stance = passive
			create_ship = {
				name = ""
				design = "NAME_Ancient_Mining_Expansion_Barge"
			}
			while = {
				count = 4
				create_ship = {
					name = ""
					design = "NAME_Ancient_Mining_Expansion_Drone"
				}
			}
			set_location = {
				target = event_target:mining_drone_expansion_starting_planet
				distance = 25
				angle = random
			}
			set_fleet_flag = mining_drone_expansion_fleet
			queue_actions = {
				wait = {
					duration = 20
					random = 10
				}
				move_to = event_target:mining_drone_expansion_destination_system
			}
		}
	}
}
create_aggressive_drone_expansion_fleet = {
	create_fleet = {
		name = "NAME_Aggressive_Mining_Drone_Expansion_Fleet"
		effect = {
			set_owner = event_target:aggressive_drone_expansion_country
			set_fleet_stance = passive
			create_ship = {
				name = ""
				design = "NAME_Ancient_Mining_Expansion_Barge"
			}
			while = {
				count = 10
				create_ship = {
					name = ""
					design = "NAME_Ancient_Mining_Expansion_Drone"
				}
			}
			set_location = {
				target = event_target:aggressive_drone_expansion_starting_planet
				distance = 25
				angle = random
			}
			set_fleet_flag = aggressive_drone_expansion_fleet
			queue_actions = {
				wait = {
					duration = 20
					random = 10
				}
				move_to = event_target:aggressive_drone_expansion_destination_system
			}
		}
	}
}

fire_random_centralisation_flavour_event_effect = {
	hidden_effect = {
		random_member = {
			limit = {
				is_gestalt = no
				any_envoy = {
					has_envoy_task = {
						task = federation
					}
				}
			}
			random_list = {
				1 = {
					country_event = { id = envoy_events.16 days = 15 }
					modifier = {
						factor = 0.8
						federation = {
							federation_cohesion >= 90
						}
					}
					modifier = {
						factor = 1.5
						federation = {
							federation_cohesion <= 50
						}
					}
					modifier = {
						factor = 1.5
						federation = {
							federation_cohesion <= 25
						}
					}
					modifier = {
						factor = 1.5
						federation = {
							federation_cohesion <= 0
						}
					}
				}
				4 = { } #nej
			}
		}
	}
}

# root/this = planet
assimilation_effect = {
	random_owned_pop = {
		limit = {
			has_citizenship_type = {
				type = citizenship_assimilation
				country = root.owner
			}
		}
		if = { # ascended synths
			limit = {
				root.owner = {
					has_country_flag = synthetic_empire
				}
			}
			kill_pop = yes
			root = {
				create_pop = {
					species = root.owner
					ethos = root.owner
				}
				owner = {
					if = {
						limit = { has_ascension_perk = ap_become_the_crisis }
						complete_crisis_objective = crisobj_purge_pops
					}
				}
			}
		}
		else = {
			random_galaxy_species = {
				limit = {
					has_species_flag = assimilation_species_of_species@prev.species
					has_species_flag = assimilation_species_of_empire@root.owner
				}
				save_event_target_as = convert_to_species
			}
			species = {
				save_event_target_as = old_species
			}
			if = {
				limit = {
					exists = event_target:convert_to_species #should always exist
				}
				change_species = event_target:convert_to_species
				owner = {
					if = {
						limit = { has_ascension_perk = ap_become_the_crisis }
						complete_crisis_objective = crisobj_purge_pops
					}
				}
				root = {
					change_variable = {
						which = assimilation_counter
						value = -1
					}
					while = { #to avoid doing the random_galaxy_species thing too many times
						limit = {
							exists = event_target:old_species
							check_variable = {
								which = assimilation_counter
								value > 0
							}
							any_owned_pop = {
								is_same_value = event_target:old_species
							}
						}
						random_owned_pop = {
							limit = {
								is_exact_same_species = event_target:old_species
							}
							change_species = event_target:convert_to_species
							apply_post_assimilation_effects = yes
						}
						change_variable = {
							which = assimilation_counter
							value = -1
						}
						owner = {
							if = {
								limit = { has_ascension_perk = ap_become_the_crisis }
								complete_crisis_objective = crisobj_purge_pops
							}
						}
					}
				}
				apply_post_assimilation_effects = yes
			}
			else = {
				log_error = "No species found for \\[This.Species.GetName] pop owned by \\[This.Owner.GetName] on \\[This.Planet.GetName] to assimilate to"
			}
		}
	}
}

# pop scope, root = planet
apply_post_assimilation_effects = {
	if = { # assimilator empire
		limit = {
			root.owner = {
				has_authority = auth_machine_intelligence
				has_civic = civic_machine_assimilator
			}
		}
		root.owner = { generate_cyborg_treats = yes } # scripted effect
	}
	if = {
		limit = {
			NOT = {
				owner = {
					any_owned_pop = {
						is_exact_same_species = event_target:convert_to_species
						NOT = { is_same_value = prevprev }
					}
				}
			}
		}
		if = { # set citizenship
			limit = { root.owner = { has_authority = auth_machine_intelligence } }
			set_citizenship_type = {
				type = citizenship_full_machine
				country = root.owner
			}
		}
		# Fallback workaround only for slaver empire
		if = {
			limit = {
				root.owner = {
					has_policy_flag = slavery_allowed
					is_xenophile = no
				}
			}
			set_citizenship_type = {
				type = citizenship_slavery
				country = root.owner
			}
		}
		# Xenophobe does not allow full citizenship per default
		else_if = {
			limit = {
				root.owner = {
					is_xenophobe = yes
				}
			}
			set_citizenship_type = {
				type = citizenship_limited
				country = root.owner
			}
		}
		else = {
			set_citizenship_type = {
				type = citizenship_full
				country = root.owner
			}
		}

		if = { # set citizenship
			limit = { root.owner = { has_ethic = ethic_gestalt_consciousness } }
			set_living_standard = {
				type = living_standard_hive_mind
				country = root.owner
			}
		}
	}
}

breach_fix_resolution_galacticstudies_advanced_xenostudies = {
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_galacticstudies_advanced_xenostudies"
				is_active_resolution = "resolution_galacticstudies_ethical_guideline_refactoring"
				is_active_resolution = "resolution_galacticstudies_extradimensional_experimentation"
			}
			in_breach_of = resolution_galacticstudies_advanced_xenostudies
			can_set_ai_policy = yes
			has_policy_flag = ai_outlawed
			can_set_policy = {
				policy = artificial_intelligence_policy
				option = ai_servitude
			}
		}
		set_policy = {
			policy = artificial_intelligence_policy
			option = ai_servitude
			cooldown = yes
		}
		custom_tooltip = "federations.10100.change_ai"
	}

	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_galacticstudies_advanced_xenostudies"
				is_active_resolution = "resolution_galacticstudies_ethical_guideline_refactoring"
				is_active_resolution = "resolution_galacticstudies_extradimensional_experimentation"
			}
			in_breach_of = resolution_galacticstudies_advanced_xenostudies
			has_met_primitives = yes
			has_policy_flag = interference_passive
			can_set_policy = {
				policy = interference
				option = interference_active
			}
		}
		set_policy = {
			policy = interference
			option = interference_active
			cooldown = yes
		}
		custom_tooltip = "federations.10100.change_interference"
	}
}

breach_fix_resolution_galacticstudies_ethical_guideline_refactoring = {
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_galacticstudies_ethical_guideline_refactoring"
				is_active_resolution = "resolution_galacticstudies_extradimensional_experimentation"
			}
			in_breach_of = resolution_galacticstudies_ethical_guideline_refactoring
			has_technology = tech_capacity_boosters
			can_set_policy = {
				policy = leader_enhancement
				option = leader_enhancement_capacity_boosters
			}
		}
		set_policy = {
			policy = leader_enhancement
			option = leader_enhancement_capacity_boosters
			cooldown = yes
		}
		custom_tooltip = "federations.10110.capacity_boosters"
	} else_if = {
		limit = {
				OR = {
					is_active_resolution = "resolution_galacticstudies_ethical_guideline_refactoring"
					is_active_resolution = "resolution_galacticstudies_extradimensional_experimentation"
				}
				in_breach_of = resolution_galacticstudies_ethical_guideline_refactoring
				has_technology = tech_selected_lineages
				NOT = { has_technology = tech_capacity_boosters }
				can_set_policy = {
					policy = leader_enhancement
					option = leader_enhancement_selected_lineages
				}
		}
		set_policy = {
			policy = leader_enhancement
			option = leader_enhancement_selected_lineages
			cooldown = yes
		}
		custom_tooltip = "federations.10110.selected_lineages"
	}
}

breach_fix_resolution_greatergood_five_year_plans_normal = {
	if = {
		limit = {
			# For greater good resolutions we want to explicitly look at if this specific
			# resolution is active, since higher tiers have stricter requirements.
			is_active_resolution = "resolution_greatergood_five_year_plans"
			in_breach_of = resolution_greatergood_five_year_plans
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_living_standard = { type = living_standard_subsistence country = prev }
				}
				set_living_standard = { type = living_standard_normal country = prev }
			}
		}

		custom_tooltip = "federations.10200.living_standard_normal"
	}
}

breach_fix_resolution_greatergood_five_year_plans_stratified = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_five_year_plans"
			in_breach_of = resolution_greatergood_five_year_plans
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_living_standard = { type = living_standard_subsistence country = prev }
				}
				set_living_standard = { type = living_standard_stratified country = prev }
			}
		}

		custom_tooltip = "federations.10200.living_standard_stratified"
	}
}

breach_fix_resolution_greatergood_greater_than_ourselves_living_standards = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_greater_than_ourselves"
			in_breach_of = resolution_greatergood_greater_than_ourselves
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					OR = {
						has_living_standard = { type = living_standard_subsistence country = prev }
						has_living_standard = { type = living_standard_stratified country = prev }
					}
				}
				set_living_standard = { type = living_standard_normal country = prev }
			}
		}

		custom_tooltip = "federations.10200.living_standard_normal"
	}
}

breach_fix_resolution_greatergood_greater_than_ourselves_thralls = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_greater_than_ourselves"
			in_breach_of = resolution_greatergood_greater_than_ourselves
			is_militarist = yes
			host_has_dlc = "Utopia"
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_citizenship_type = { type = citizenship_slavery country = prev }
					OR = {
						has_slavery_type = { type = slavery_normal country = prev }
						has_slavery_type = { type = slavery_livestock country = prev }
					}
				}
				set_slavery_type = { type = slavery_military country = prev }
			}
		}

		custom_tooltip = "federations.10210.thralls"
	}
}

breach_fix_resolution_greatergood_greater_than_ourselves_servants = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_greater_than_ourselves"
			in_breach_of = resolution_greatergood_greater_than_ourselves
			host_has_dlc = "Utopia"
			is_gestalt = no
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_citizenship_type = { type = citizenship_slavery country = prev }
					OR = {
						has_slavery_type = { type = slavery_normal country = prev }
						has_slavery_type = { type = slavery_livestock country = prev }
					}
				}
				set_slavery_type = { type = slavery_domestic country = prev }
			}
		}

		custom_tooltip = "federations.10210.servants"
	}
}

breach_fix_resolution_greatergood_greater_than_ourselves_no_utopia = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_greater_than_ourselves"
			in_breach_of = resolution_greatergood_greater_than_ourselves
			NOT = { host_has_dlc = "Utopia" }
			NOR = {
				has_valid_civic = civic_indentured_assets
				has_valid_civic = civic_slaver_guilds
			}
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_citizenship_type = { type = citizenship_slavery country = prev }
				}
				set_citizenship_type = { type = citizenship_limited country = prev }
			}
		}
		custom_tooltip = "federations.10210.freeslaves"
	}

	breach_fix_resolution_greatergood_greater_than_ourselves_living_standards = yes
}

breach_fix_resolution_greatergood_balance_in_the_middle = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_balance_in_the_middle"
			in_breach_of = resolution_greatergood_balance_in_the_middle
			is_gestalt = no
			NOR = {
				has_valid_civic = civic_indentured_assets
				has_valid_civic = civic_slaver_guilds
			}
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_citizenship_type = { type = citizenship_slavery country = prev }
				}
				set_citizenship_type = { type = citizenship_limited country = prev }
			}
		}
		custom_tooltip = "federations.10210.freeslaves"
	}
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_balance_in_the_middle"
			in_breach_of = resolution_greatergood_balance_in_the_middle
			is_gestalt = no
			NOR = {
				has_valid_civic = civic_indentured_assets
				has_valid_civic = civic_slaver_guilds
			}
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					OR = {
						has_living_standard = { type = living_standard_subsistence country = prev }
						has_living_standard = { type = living_standard_stratified country = prev }
						has_living_standard = { type = living_standard_normal country = prev }
						has_living_standard = { type = living_standard_academic_privilege country = prev }
					}
				}
				set_living_standard = { type = living_standard_good country = prev }
			}
		}
		custom_tooltip = "federations.10220.living_standard"
	}
}

breach_fix_resolution_greatergood_balance_in_the_middle_gestalt = {
	if = {
		limit = {
			is_gestalt = yes
			OR = {
				AND = {
					is_active_resolution = "resolution_greatergood_balance_in_the_middle"
					in_breach_of = resolution_greatergood_balance_in_the_middle
				}
				AND = {
					is_active_resolution = "resolution_greatergood_universal_prosperity_mandate"
					in_breach_of = resolution_greatergood_universal_prosperity_mandate
					NOT = { has_civic = "civic_machine_assimilator" }
				}
			}
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					NOR = {
						has_trait = trait_machine_unit
						has_trait = trait_mechanical
					}
					is_sapient = yes
					has_citizenship_type = { type = citizenship_slavery country = prev }
				}
				set_citizenship_type = { type = citizenship_purge country = prev }
				set_purge_type = { type = purge_displacement country = prev }
			}
		}
		custom_tooltip = "federations.10210.displace_gestalt"
	}
}

breach_fix_resolution_greatergood_universal_prosperity_mandate_freeslaves = {
	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_universal_prosperity_mandate"
			in_breach_of = resolution_greatergood_universal_prosperity_mandate
			is_gestalt = no
			NOR = {
				has_valid_civic = civic_indentured_assets
				has_valid_civic = civic_slaver_guilds
			}
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
					has_citizenship_type = { type = citizenship_slavery country = prev }
				}
				set_citizenship_type = { type = citizenship_limited country = prev }
			}
		}
		custom_tooltip = "federations.10210.freeslaves"
	}
}

breach_fix_resolution_greatergood_universal_prosperity_mandate_utopian = {
	breach_fix_resolution_greatergood_universal_prosperity_mandate_freeslaves = yes

	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_universal_prosperity_mandate"
			in_breach_of = resolution_greatergood_universal_prosperity_mandate
			is_egalitarian = yes
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
				}
				set_living_standard = { type = living_standard_utopian country = prev }
			}
		}

		custom_tooltip = "federations.10230.complyutopian"
	}
}

breach_fix_resolution_greatergood_universal_prosperity_mandate_chemical = {
	breach_fix_resolution_greatergood_universal_prosperity_mandate_freeslaves = yes

	if = {
		limit = {
			is_active_resolution = "resolution_greatergood_universal_prosperity_mandate"
			in_breach_of = resolution_greatergood_universal_prosperity_mandate
			has_technology = "tech_subdermal_stimulation"
		}
		hidden_effect = {
			every_owned_species = {
				limit = {
					is_sapient = yes
				}
				set_living_standard = { type = living_standard_chemical_bliss country = prev }
			}
		}

		custom_tooltip = "federations.10230.complychemical"
	}
}

breach_fix_resolution_rulesofwar_reverence_for_life = {
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_rulesofwar_reverence_for_life"
				is_active_resolution = "resolution_rulesofwar_independent_tribunals"
				is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
				is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
			}
			in_breach_of = resolution_rulesofwar_reverence_for_life
			has_policy_flag = purge_allowed
			can_set_policy = {
				policy = purge
				option = purge_displacement_only
			}
		}
		hidden_effect = {
			set_policy = {
				policy = purge
				option = purge_displacement_only
				cooldown = yes
			}
		}

		custom_tooltip = "federations.10300.comply"
	}
}

breach_fix_resolution_rulesofwar_independent_tribunals = {
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_rulesofwar_independent_tribunals"
				is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
				is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
			}
			in_breach_of = resolution_rulesofwar_independent_tribunals
			OR = {
				has_policy_flag = orbital_bombardment_armageddon
				has_policy_flag = orbital_bombardment_indiscriminate
			}
			can_set_policy = {
				policy = orbital_bombardment
				option = orbital_bombardment_selective
			}
		}
		hidden_effect = {
			set_policy = {
				policy = orbital_bombardment
				option = orbital_bombardment_selective
				cooldown = yes
			}
		}

		custom_tooltip = "federations.10310.comply"
	}
}

breach_fix_resolution_rulesofwar_last_resort_doctrine = {
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
				is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
			}
			in_breach_of = resolution_rulesofwar_last_resort_doctrine
			has_policy_flag = unrestricted_wars
			is_gestalt = no
			can_set_policy = {
				policy = war_philosophy
				option = liberation_wars
			}
		}
		hidden_effect = {
			set_policy = {
				policy = war_philosophy
				option = liberation_wars
				cooldown = yes
			}
		}

		custom_tooltip = "federations.10320.comply"
	} else_if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
				is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
			}
			in_breach_of = resolution_rulesofwar_last_resort_doctrine
			has_policy_flag = unrestricted_wars
			is_gestalt = yes
			can_set_policy = {
				policy = war_philosophy
				option = no_wars
			}
		}
		hidden_effect = {
			set_policy = {
				policy = war_philosophy
				option = no_wars
				cooldown = yes
			}
		}

		custom_tooltip = "federations.10320.complygestalt"
	}
}

breach_fix_resolution_rulesofwar_demobilization_initiative = {
	if = {
		limit = {
			is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
			in_breach_of = resolution_rulesofwar_demobilization_initiative
			has_policy_flag = economic_policy_military
			can_set_policy = {
				policy = economic_policy
				option = economic_policy_balanced
			}
		}
		hidden_effect = {
			set_policy = {
				policy = economic_policy
				option = economic_policy_balanced
				cooldown = yes
			}
		}

		custom_tooltip = "federations.10330.comply"
	}
}

breach_fix_resolution_divinity_a_defined_purpose_nonsynthetic = {
	if = {
		limit = {
			is_active_resolution = "resolution_divinity_a_defined_purpose"
			in_breach_of = resolution_divinity_a_defined_purpose
			has_policy_flag = ai_full_rights
			NOT = { has_country_flag = synthetic_empire }
			is_machine_empire = no
			can_set_policy = {
				policy = artificial_intelligence_policy
				option = ai_servitude
			}
		}
		hidden_effect = {
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_servitude
				cooldown = yes
			}
		}

		custom_tooltip = "federations.10340.complychangeai"
	}
}

breach_fix_resolution_divinity_a_defined_purpose_machine = {
	if = {
		limit = {
			is_active_resolution = "resolution_divinity_a_defined_purpose"
			in_breach_of = resolution_divinity_a_defined_purpose
			is_machine_empire = yes
			NOT = { has_valid_civic = civic_machine_servitor }
			NOT = { has_valid_civic = civic_machine_assimilator }
			exists = event_target:defined_purpose_random_species
		}
		hidden_effect = {
			if = {
				limit = {
					has_origin = origin_machine
				}
				set_origin = origin_default
			}
			force_add_civic = civic_machine_servitor

			capital_scope = {
				create_pop = {
					species = event_target:defined_purpose_random_species
				}
			}
		}

		custom_tooltip = "federations.10340.complybecomerogueservitor_tooltip"
	} else_if = {
		limit = {
			is_active_resolution = "resolution_divinity_a_defined_purpose"
			in_breach_of = resolution_divinity_a_defined_purpose
			is_machine_empire = yes
			NOT = { has_valid_civic = civic_machine_servitor }
			NOT = { has_valid_civic = civic_machine_assimilator }
			NOT = { exists = event_target:defined_purpose_random_species }
		}
		hidden_effect = {
			if = {
				limit = {
					has_origin = origin_machine
				}
				set_origin = origin_default
			}
			force_add_civic = civic_machine_servitor

			create_species = {
				name = random
				class = random_non_machine
				portrait = random
				traits = random
				effect = {
					save_event_target_as = defined_purpose_backup_species
				}
			}

			capital_scope = {
				create_pop = {
					species = event_target:defined_purpose_backup_species
				}
			}
		}

		custom_tooltip = "federations.10340.complybecomerogueservitor_tooltip"
	}
}


add_extra_hyperlane_to_spawned_system_effect = {
	hidden_effect = {
		last_created_system = {
			if = {
				limit = {
					any_system = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 10
						}
						NOT = { has_hyperlane_to = prev }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 10
						}
						NOT = { has_hyperlane_to = prev }
					}
					add_hyperlane = {
						from = this
						to = prev
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = prev }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = prev }
					}
					add_hyperlane = {
						from = this
						to = prev
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = prev }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = prev }
					}
					add_hyperlane = {
						from = this
						to = prev
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = prev }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = prev
							type = euclidean
							min_distance >= 1
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = prev }
					}
					add_hyperlane = {
						from = this
						to = prev
					}
				}
			}
		}
	}
}

add_imp_concession_ports_0 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
}

add_imp_concession_ports_1 = {
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_1 }
}

add_imp_concession_ports_2 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_2 }
}

add_imp_concession_ports_3 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_3 }
}

add_imp_concession_ports_4 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_4 }
}

add_imp_concession_ports_5 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_5 }
}

add_imp_concession_ports_6 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_6 }
}

add_imp_concession_ports_7 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_7 }
}

add_imp_concession_ports_8 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_8 }
}

add_imp_concession_ports_9 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_8
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_9 }
}

add_imp_concession_ports_10 = {
	remove_modifier = imp_concession_ports_1
	remove_modifier = imp_concession_ports_2
	remove_modifier = imp_concession_ports_3
	remove_modifier = imp_concession_ports_4
	remove_modifier = imp_concession_ports_5
	remove_modifier = imp_concession_ports_6
	remove_modifier = imp_concession_ports_7
	remove_modifier = imp_concession_ports_9
	remove_modifier = imp_concession_ports_10
	add_modifier = { modifier = imp_concession_ports_10 }
}

can_build_crisis_star_eater = {
	set_country_flag = can_build_crisis_star_eater
	create_ship_design = { design = "NAME_Crisis_Star_Eater" }
	add_ship_design = last_created_design
}

destroy_star_system = {
	if = {
		limit = { exists = event_target:crisis_country }
		fire_on_action = {
			on_action = on_destroy_star_system
			scopes = { from = event_target:crisis_country }
		}
	}
	else = {
		fire_on_action = { on_action = on_destroy_star_system }
	}
	set_star_flag = star_cracked
	set_star_class = sc_black_hole
	every_system_ambient_object = {
		limit = {
			# Preserve Unbidden crisis effects
			NOR = {
				has_ambient_object_flag = extradimensional_system_effect
				has_ambient_object_flag = extradimensional_system_effect_2
			}
		}
		destroy_ambient_object = this
	}
	every_system_planet = {
		limit = { is_star = yes }
		create_ambient_object = {
			type = "star_explosion"
			play_animation_once = yes
			location = this
		}
		last_created_ambient_object = {
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
		change_pc = pc_black_hole
	}
	# Handle Contingency Machine Worlds
	every_system_planet = {
		limit = {
			is_planet_class = pc_ai
			NOT = { has_planet_flag = machine_lair }
		}
		destroy_machine_world = yes
	}
	random_system_planet = {
		limit = {
			is_planet_class = pc_ai
			has_planet_flag = machine_lair
		}
		from.owner = { save_event_target_as = final_machine_world_destroyer }
		stop_crisis_sound = yes
		planet_event = { id = crisis.2046 }
	}
	every_system_planet = {
		limit = {
			is_star = no
			is_asteroid = no
			NOR = {
				is_planet_class = pc_shattered
				is_planet_class = pc_shattered_2
				is_planet_class = pc_shielded
				is_planet_class = pc_ringworld_habitable_damaged
				is_planet_class = pc_ringworld_tech_damaged
				is_planet_class = pc_ringworld_seam_damaged
			}
		}
		if = {
			limit = { is_planet_class = pc_habitat } # uncolonized
			spawn_habitat_cracker_effect = yes
			remove_planet = yes
		}
		if = {
			limit = { is_colony = yes }
			remove_all_buildings = yes
			destroy_colony = yes
			if = {
				limit = { is_planet_class = pc_habitat }
				spawn_habitat_cracker_effect = yes
				remove_planet = yes
			}
			else_if = {
				limit = { is_ringworld = yes }
				spawn_ringworld_cracker_effect = yes
				change_pc = pc_ringworld_habitable_damaged
			}
			else = {
				change_pc = pc_shattered
			}
		}
		else_if = {
			limit = { is_ringworld = yes }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_habitable_damaged
		}
		else_if = {
			limit = { is_planet_class = pc_ringworld_tech }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_tech_damaged
		}
		else_if = {
			limit = { is_planet_class = pc_ringworld_seam }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_seam_damaged
		}
		else = {
			change_pc = pc_shattered
		}
	}
	every_system_planet = {
		limit = {
			exists = orbital_station
		}
		orbital_station = { dismantle = yes }
	}
	every_system_planet = {
		clear_deposits = yes
		clear_planet_modifiers = yes
		prevent_anomaly = yes
	}
	every_system_planet = {
		limit = { is_asteroid = yes }
		clear_deposits = yes
	}
	every_fleet_in_system = {
		limit = {
			NOR = {
				is_same_value = from
				# except Extradimensionals
				AND = {
					exists = owner
					owner = {
						OR = {
							is_country_type = portal_holder
							is_country_type = extradimensional
							is_country_type = extradimensional_2
							is_country_type = extradimensional_3
						}
					}
				}
			}
		}
		if = {
			limit = {
				exists = event_target:crisis_country #i.e. not final destruction of all matter
				is_mobile = yes
			}
			set_mia = yes
		}
		else = {
			destroy_fleet = this
		}
	}
	every_system_megastructure = {
		if = {
			limit = {
				OR = {
					is_megastructure_type = ring_world_restored
					is_megastructure_type = ring_world_ruined
					is_megastructure_type = ring_world_2
				}
			}
			solar_system = {
				spawn_planet = {
					class = "pc_ringworld_tech_damaged"
					location = prev
					orbit_angle_offset = 30
				}
				spawn_planet = {
					class = "pc_ringworld_seam_damaged"
					location = prev
				}
				spawn_planet = {
					class = "pc_ringworld_habitable_damaged"
					location = prev
					orbit_angle_offset = -30
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = spy_orb_1
					is_megastructure_type = spy_orb_2
					is_megastructure_type = spy_orb_3
					is_megastructure_type = spy_orb_4
					is_megastructure_type = spy_orb_ruined
					is_megastructure_type = spy_orb_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "spy_orb_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = think_tank_1
					is_megastructure_type = think_tank_2
					is_megastructure_type = think_tank_3
					is_megastructure_type = think_tank_4
					is_megastructure_type = think_tank_ruined
					is_megastructure_type = think_tank_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "think_tank_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = strategic_coordination_center_1
					is_megastructure_type = strategic_coordination_center_2
					is_megastructure_type = strategic_coordination_center_3
					is_megastructure_type = strategic_coordination_center_ruined
					is_megastructure_type = strategic_coordination_center_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "strategic_coordination_center_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = mega_art_installation_1
					is_megastructure_type = mega_art_installation_2
					is_megastructure_type = mega_art_installation_3
					is_megastructure_type = mega_art_installation_4
					is_megastructure_type = mega_art_installation_ruined
					is_megastructure_type = mega_art_installation_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "mega_art_installation_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = interstellar_assembly_1
					is_megastructure_type = interstellar_assembly_2
					is_megastructure_type = interstellar_assembly_3
					is_megastructure_type = interstellar_assembly_4
					is_megastructure_type = interstellar_assembly_ruined
					is_megastructure_type = interstellar_assembly_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "interstellar_assembly_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = mega_shipyard_1
					is_megastructure_type = mega_shipyard_2
					is_megastructure_type = mega_shipyard_3
					is_megastructure_type = mega_shipyard_ruined
					is_megastructure_type = mega_shipyard_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "mega_shipyard_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = matter_decompressor_1
					is_megastructure_type = matter_decompressor_2
					is_megastructure_type = matter_decompressor_3
					is_megastructure_type = matter_decompressor_4
					is_megastructure_type = matter_decompressor_ruined
					is_megastructure_type = matter_decompressor_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "matter_decompressor_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { is_crisis_sphere = yes }
			solar_system = {
				spawn_megastructure = {
					type = crisis_sphere_ruined
					coords_from = prev
					init_effect = {
						random_country = {
							limit = {
								prevprev = { has_megastructure_flag = crisis_sphere_of@prev }
							}
							save_event_target_as = former_owner
						}
						set_megastructure_flag = crisis_sphere_of@event_target:former_owner
					}
				}
			}
			remove_megastructure = this
		}
		else = {
			remove_megastructure = this
		}
	}
	star = {
		create_ambient_object = {
			type = "destroyed_system"
			location = this
		}
		last_created_ambient_object = {
			set_ambient_object_flag = destroyed_system_effect
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
	}
}

rebellion_remove_from_wars = {
	if = {
		limit = { is_at_war = yes }
		every_war = {
			limit = {
				NOR = {
					using_war_goal = {
						type = wg_war_in_heaven
						owner = attacker
					}
					using_war_goal = {
						type = wg_declared_crisis
						owner = attacker
					}
				}
			}
			remove_war_participant = prev
		}
		every_subject = {
			every_war = {
				limit = {
					NOR = {
						using_war_goal = {
							type = wg_war_in_heaven
							owner = attacker
						}
						using_war_goal = {
							type = wg_declared_crisis
							owner = attacker
						}
					}
				}
				remove_war_participant = prev
			}
		}
	}
}

#scope = scion
create_scion_wormhole_link = {
	capital_scope = {
		solar_system = { save_event_target_as = home_system }
	}
	event_target:scion_master = {
		random_system_within_border = { save_event_target_as = fe_target_system }
	}
	event_target:home_system = {
		event_target:fe_target_system = {
			prev = { # done this way to ensure we don't spawn "orphan wormholes (wormholes that aren't linked to anything)
				spawn_natural_wormhole = {
					bypass_type = wormhole
					random_pos = no
					orbit_angle = 360
				}
			}
			spawn_natural_wormhole = {
				bypass_type = wormhole
				random_pos = no
				orbit_angle = 270
			}
			link_wormholes = prev
		}
	}
	set_country_flag = encountered_first_wormhole
	add_seen_bypass_type = wormhole
}


add_tech_option_or_research_effect = {
	if = {
		limit = {
			OR = {
				has_technology = $TECH$
				NOT = { can_research_technology = $TECH$ }
			}
		}
		add_monthly_resource_mult = { #18 i.e. @tier2researchreward if $PROGRESS$ is 0.25
			value = @\[( 72 * $PROGRESS$ )]
			resource = $CATEGORY$
		}
	}
	else_if = {
		limit = { NOT = { has_tech_option = $TECH$ } }
		add_research_option = $TECH$
		add_tech_progress = {
			tech = $TECH$
			progress = $PROGRESS$
		}
	}
	else = {
		add_tech_progress = { #give a bit more if they already have the option
			tech = $TECH$ #the formula basically means min( 1, <calced value> ), it's needed because trying to grant more than 1 causes error messages
			progress = @\[ ( ( 1 + ( 1.5 * $PROGRESS$ ) ) / 2 ) - ( | 1 - ( 1.5 * $PROGRESS$ ) | / 2 ) ]
		}
	}
}

give_tech_no_error_effect = {
	if = {
		limit = {
			NOT = { has_technology = $TECH$ }
		}
		give_technology = {
			message = $MESSAGE$
			tech = $TECH$
		}
	}
}



destroy_machine_world = {
	log = "machine handling fired"
	if = {
		limit = { has_planet_flag = machine_world_1 }
		every_playable_country = {
			limit = { has_event_chain = "ai_crisis_chain" }
			remove_point_of_interest = ai_crisis_poi.1
		}
	}
	else_if = {
		limit = { has_planet_flag = machine_world_2 }
		every_playable_country = {
			limit = { has_event_chain = "ai_crisis_chain" }
			remove_point_of_interest = ai_crisis_poi.2
		}
	}
	else_if = {
		limit = { has_planet_flag = machine_world_3 }
		every_playable_country = {
			limit = { has_event_chain = "ai_crisis_chain" }
			remove_point_of_interest = ai_crisis_poi.3
		}
	}
	else_if = {
		limit = { has_planet_flag = machine_world_4 }
		every_playable_country = {
			limit = { has_event_chain = "ai_crisis_chain" }
			remove_point_of_interest = ai_crisis_poi.4
		}
	}
	if = {
		limit = {
			OR = {
				NOT = { has_planet_flag = destroyed_by_colossus }
				has_planet_flag = planet_godrayed
			}
		}
		destroy_colony = yes
		change_pc = pc_broken
		reset_planet = yes
		hidden_effect = { clear_deposits = yes }
		add_deposit = d_living_metal_deposit
		add_deposit = d_minerals_3
		add_deposit = d_energy_3
	}
	every_playable_country = {
		limit = { has_event_chain = "ai_crisis_chain" }
		add_event_chain_counter = {
			event_chain = "ai_crisis_chain"
			counter = "active_machine_worlds"
			amount = -1
		}
	}
	random_country = {
		limit = { is_country_type = "ai_empire" }
		change_variable = {
			which = "machine_worlds_destroyed"
			value = 1
		}
		if = {
			limit = {
				check_variable = {
					which = "machine_worlds_destroyed"
					value = 1
				}
			}
			remove_global_flag = ghost_signal_5_flag
			set_global_flag = ghost_signal_4_flag
			every_country = {
				limit = { has_notification_modifier = ghost_signal_5 }
				remove_notification_modifier = ghost_signal_5
				add_notification_modifier = ghost_signal_4
				every_owned_pop = {
					limit = { has_modifier = pop_ghost_signal_5 }
					remove_modifier = "pop_ghost_signal_5"
					add_modifier = { modifier = "pop_ghost_signal_4" days = -1 }
				}
				every_owned_ship = {
					limit = {
						has_sapient_combat_computer = yes
					}
					remove_modifier = "ship_ghost_signal_5"
					add_modifier = { modifier = "ship_ghost_signal_4" days = -1 }
				}
			}
			every_country = {
				limit = { has_notification_modifier = ghost_signal_5_machine }
				remove_notification_modifier = ghost_signal_5_machine
				add_notification_modifier = ghost_signal_4_machine
				every_owned_pop = {
					limit = { has_trait = trait_machine_unit }
					remove_modifier = "pop_ghost_signal_5_machine"
					add_modifier = { modifier = "pop_ghost_signal_4_machine" days = -1 }
				}
				every_owned_ship = {
					limit = {
						has_sapient_combat_computer = yes
					}
					remove_modifier = "ship_ghost_signal_5"
					add_modifier = { modifier = "ship_ghost_signal_4" days = -1 }
				}
			}
			observer_event = { id = observer.50 }
			every_country = {
				limit = { is_ai = no }
				country_event = { id = crisis.2037 }
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = "machine_worlds_destroyed"
					value = 2
				}
			}
			set_global_flag = first_machine_world_destroyed
			remove_global_flag = ghost_signal_4_flag
			set_global_flag = ghost_signal_3_flag
			every_country = {
				limit = { has_notification_modifier = ghost_signal_4 }
				remove_notification_modifier = ghost_signal_4
				add_notification_modifier = ghost_signal_3
				every_owned_pop = {
					limit = { has_modifier = "pop_ghost_signal_4" }
					remove_modifier = "pop_ghost_signal_4"
					add_modifier = { modifier = "pop_ghost_signal_3" days = -1 }
				}
				every_owned_ship = {
					limit = {
						has_sapient_combat_computer = yes
					}
					remove_modifier = "ship_ghost_signal_4"
					add_modifier = { modifier = "ship_ghost_signal_3" days = -1 }
				}
			}
			every_country = {
				limit = { has_notification_modifier = ghost_signal_4_machine }
				remove_notification_modifier = ghost_signal_4_machine
				every_owned_pop = {
					limit = { has_trait = trait_machine_unit }
					remove_modifier = "pop_ghost_signal_4_machine"
				}
				every_owned_ship = {
					limit = {
						has_sapient_combat_computer = yes
					}
					remove_modifier = "ship_ghost_signal_4"
				}
			}
			every_country = {
				limit = { has_special_project = AI_CRISIS_PROJECT }
				abort_special_project = { type = AI_CRISIS_PROJECT }
			}
			observer_event = { id = observer.50 }
			every_country = {
				limit = { is_ai = no }
				country_event = { id = crisis.2037 }
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = "machine_worlds_destroyed"
					value = 3
				}
			}
			remove_global_flag = ghost_signal_3_flag
			set_global_flag = ghost_signal_2_flag
			every_country = {
				limit = { has_notification_modifier = ghost_signal_3 }
				remove_notification_modifier = ghost_signal_3
				add_notification_modifier = ghost_signal_2
				every_owned_pop = {
					limit = { has_modifier = pop_ghost_signal_3 }
					remove_modifier = "pop_ghost_signal_3"
					add_modifier = { modifier = "pop_ghost_signal_2" days = -1 }
				}
				every_owned_ship = {
					limit = {
						has_sapient_combat_computer = yes
					}
					remove_modifier = "ship_ghost_signal_3"
					add_modifier = { modifier = "ship_ghost_signal_2" days = -1 }
				}
			}
			observer_event = { id = observer.50 }
			every_country = {
				limit = { is_ai = no }
				country_event = { id = crisis.2037 }
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = "machine_worlds_destroyed"
					value = 4
				}
			}
			remove_global_flag = ghost_signal_2_flag
			every_country = {
				limit = { has_notification_modifier = ghost_signal_2 }
				remove_notification_modifier = ghost_signal_2
				add_notification_modifier = ghost_signal_1
				every_owned_pop = {
					limit = { has_modifier = pop_ghost_signal_2 }
					remove_modifier = "pop_ghost_signal_2"
					add_modifier = { modifier = "pop_ghost_signal_1" days = -1 }
				}
				every_owned_ship = {
					limit = {
						has_sapient_combat_computer = yes
					}
					remove_modifier = "ship_ghost_signal_2"
					add_modifier = { modifier = "ship_ghost_signal_1" days = -1 }
				}
			}
			observer_event = { id = observer.50 }
			country_event = { id = crisis.2035 }
		}
	}
}

# Called from galcom resolutions. Needs event_target:new_crisis and event_target:community_war_leader
declare_crisis_war_effect = {
	# community opens internal borders and ceases pre-existing wars with the Crisis
	every_playable_country = {
		limit = {
			is_galactic_community_member = yes
			NOR = {
				has_country_flag = declared_crisis
				is_in_federation_with = event_target:new_crisis
			}
		}
		if = {
			limit = {
				any_war = {
					any_war_participant = {
						is_same_value = event_target:new_crisis
					}
				}
			}
			every_war = {
				limit = {
					any_war_participant = {
						is_same_value = event_target:new_crisis
					}
				}
				remove_war_participant = event_target:new_crisis
			}
		}
		every_playable_country = {
			limit = {
				is_galactic_community_member = yes
				NOR = {
					is_same_value = prev
					has_country_flag = declared_crisis
					is_in_federation_with = event_target:new_crisis
				}
			}
			set_closed_borders = {
				who = prev
				status = no
			}
		}
	}
	event_target:community_war_leader = {
		declare_war = {
			target = event_target:new_crisis
			name = "NAME_Declared_Crisis_War"
			attacker_war_goal = "wg_declared_crisis"
			effect = { save_event_target_as = crisis_war }
		}
	}
	every_playable_country = {
		limit = {
			is_galactic_community_member = yes
			NOR = {
				is_same_value = event_target:community_war_leader
				is_in_federation_with = event_target:new_crisis
			}
		}

		join_war_on_side = {
			war = event_target:crisis_war
			side = event_target:community_war_leader
		}
	}
}

death_cult_sacrifice_effect = {
	#First we need to get the variables that determine how big the boon is

	# Formula is ( initiates * random factor ) / (total pops), and then round that to the nearest 0.1 to avoid weird-looking results
	random_list = {
		#This is effectively ( base * random ), where base = 30
		#It is balanced so that sacrificing 5% of your pops gives a really good result

		1 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 15
			}
		}
		4 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 20
			}
		}
		1 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 25
			}
		}
	}
	if = { #small empire penalty: losing 1 pop out of 30 is not the same as 30 out of 900 with logarithmic growth
		limit = { num_pops < 100 }
		multiply_variable = {
			which = sacrifice_random_mult
			value = 0.8
		}
		if = {
			limit = { num_pops < 50 }
			multiply_variable = {
				which = sacrifice_random_mult
				value = 0.8
			}
		}
	}
	export_trigger_value_to_variable = {
		trigger = num_assigned_jobs
		parameters = {
			job = mortal_initiate
		}
		variable = sacrifice_result_mult
	}
	multiply_variable = {
		which = sacrifice_result_mult
		value = sacrifice_random_mult
	}
	clear_variable = sacrifice_random_mult
	divide_variable = {
		which = sacrifice_result_mult
		value = trigger:num_pops
	}
	round_variable_to_closest = {
		which = sacrifice_result_mult
		value = 0.1
	}

	#We also need the edicts length multiplier for the modifiers
	export_modifier_to_variable = {
		modifier = edict_length_mult
		variable = edict_length_modifiers
	}
	change_variable = { # Needs to be 1 + mult
		which = edict_length_modifiers
		value = 1
	}

	#Now we do the sacrifice
	every_owned_pop = {
		limit = { has_job = mortal_initiate }
		kill_pop = yes
	}
}

create_nivlac_effect = {
	if = {
		limit = {
			host_has_dlc = "Plantoids Species Pack"
		}
		create_species = {
			name = "NAME_Nivlac"
			plural = "NAME_Nivlacs"
			class = FUN
			portrait = "fun15"
			namelist = "FUN4"
			extra_trait_points = 2
			traits = {
				trait = "trait_nivlac"
				trait = "trait_plantoid_radiotrophic"
				trait = "trait_quick_learners"
			}
			homeworld = event_target:nivlac_joint_planet
			effect = {
				save_global_event_target_as = nivlac_species
				set_species_flag = nivlac_no_procreation
			}
		}
	}

	else = {
		create_species = {
			name = "NAME_Nivlac"
			plural = "NAME_Nivlacs"
			class = FUN
			portrait = "fun15"
			namelist = "FUN4"
			traits = {
				trait = "trait_nivlac"
				trait = "trait_quick_learners"
			}
			homeworld = event_target:nivlac_joint_planet
			effect = {
				save_global_event_target_as = nivlac_species
			}
		}
	}
}

create_nu_baol_effect = {
	if = {
		limit = {
			host_has_dlc = "Plantoids Species Pack"
		}
		create_species = {
			name = "NAME_Nu_Baol"
			plural = "NAME_Nu_Baol"
			class = "PLANT"
			portrait = pla16_baol
			namelist = "PLANT2"
			extra_trait_points = 4
			traits = {
				trait = "trait_plantoid_phototrophic"
				trait = "trait_agrarian"
				trait = "trait_communal"
				trait = "trait_venerable"
				trait = "trait_delicious"
				trait = "trait_slow_breeders"
				trait = "trait_pc_gaia_preference"
			}
			effect = {
				save_global_event_target_as = nu_baol_species
			}
		}
	}

	else = {
		create_species = {
			name = "NAME_Nu_Baol"
			plural = "NAME_Nu_Baol"
			class = "PLANT"
			portrait = pla16_baol
			namelist = "PLANT2"
			extra_trait_points = 3
			traits = {
				trait = "trait_agrarian"
				trait = "trait_communal"
				trait = "trait_venerable"
				trait = "trait_delicious"
				trait = "trait_slow_breeders"
				trait = "trait_pc_gaia_preference"
			}
			effect = {
				save_global_event_target_as = nu_baol_species
			}
		}
	}
}

#This will remove the ship, create the deposit, and fire an event to respawn the ship in 15 years
create_origin_dragon_deposit_effect = {
	event_target:here_be_the_dragon_ship = { delete_ship = this }
	add_deposit = d_landed_dragon

	planet_event = { id = aquatics.170 days = 5400 random = 360 } #about 15 years
}

create_origin_dragon_fleet_effect = {
	create_fleet = {
		name = "NAME_Hrozgar_of_the_Endless_Flames"
		settings = {
			spawn_debris = no
			is_boss = yes
			can_change_leader = no
		}
		effect = {
			set_owner = event_target:here_be_the_dragon_country
			create_ship = {
				name = "NAME_Hrozgar_of_the_Endless_Flames"
				design = "NAME_Sky_Dragon"
				effect = {
					set_ship_flag = here_be_the_dragon_ship
					save_event_target_as = here_be_the_dragon_ship
				}
			}
			set_location = {
				target = event_target:here_be_dragons_planet
				distance = 10
				angle = 90
				direction = in_system
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = self
			set_aggro_range = 350

			queue_actions = {
				repeat = {
					find_random_planet = {
						found_planet = {
							move_to = this
							orbit_planet = THIS
							wait = 30
						}
					}
				}
			}
		}
	}
}

ice_mining_depletion_effect = {
	owner = {
		random_owned_starbase = {
			limit = {
				has_starbase_building = ice_mining_station
			}
			weights = {
				base = 1
				modifier = {
					factor = 1000
					solar_system = {
						has_star_flag = ice_mining@prevprevprev
					}
				}
				modifier = {
					factor = 0
					NOT = {
						solar_system = {
							has_star_flag = ice_mining@prevprevprev
						}
					}
					owner = {
						any_system_within_border = {
							has_star_flag = ice_mining@prevprevprevprev
							exists = starbase
							starbase = { has_starbase_building = ice_mining_station }
						}
					}
				}
			}
			solar_system = {
				save_event_target_as = mined_system

				if = {
					limit = { has_star_flag = ice_mining@prevprevprev }
					remove_star_flag = ice_mining@prevprevprev
				}
				remove_star_flag = ice_mining_in_progress

				random_system_planet = {
					limit = {
						OR = {
							is_planet_class = pc_ice_asteroid
							is_planet_class = pc_frozen
						}
					}
					if = {
						limit = {
							is_planet_class = pc_ice_asteroid
						}
						if = {
							limit = { exists = orbital_station }
							orbital_station = { delete_fleet = this }
						}
						set_planet_flag = being_killed #probably only removed in the next tick
						remove_planet = yes
					}
					else_if = {
						limit = { planet_size > 1 }
						change_planet_size = -1
						change_variable = {
							which = ice_mined
							value = 1
						}
						if = {
							limit = {
								check_variable = {
									which = ice_mined
									value >= 3
								}
							}
							change_pc = pc_barren_cold
							add_modifier = {
								modifier = ice_mined_planet
							}
						}
					}
					else = {
						change_pc = pc_barren_cold
						add_modifier = {
							modifier = ice_mined_planet
						}
					}
				}
				if = {
					limit = {
						NOT = {
							any_system_planet = {
								OR = {
									is_planet_class = pc_ice_asteroid
									is_planet_class = pc_frozen
								}
								NOT = { has_planet_flag = being_killed }
							}
						}
					}
					root = { set_planet_flag = temp_ice_mine_exhausted_flag } #deliberately root and not prevprevprev (because that is not always a planet)
				}
			}
		}
	}
}
